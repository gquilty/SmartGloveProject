
NAP348_Glove_v1_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000024e2  00002576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000af  00800116  00800116  0000258c  2**0
                  ALLOC
  3 .debug_aranges 000000d8  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000079  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001537  00000000  00000000  000026dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000467  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011a3  00000000  00000000  0000407b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00005220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053f  00000000  00000000  000053b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000486  00000000  00000000  000058ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  00005d75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *
 * @return @c 0 if the strings are the same, @c 1 if the string pointed to by
 *     @a a is greater than the string pointed to by @a b, and @c -1 otherwise.
 **/
static int circBufferCmp(const void *a, const void *b)
{
       0:	ef c0       	rjmp	.+478    	; 0x1e0 <__ctors_end>
       2:	00 00       	nop
       4:	0c c1       	rjmp	.+536    	; 0x21e <__bad_interrupt>
       6:	00 00       	nop
       8:	0a c1       	rjmp	.+532    	; 0x21e <__bad_interrupt>
       a:	00 00       	nop
       c:	08 c1       	rjmp	.+528    	; 0x21e <__bad_interrupt>
       e:	00 00       	nop
      10:	06 c1       	rjmp	.+524    	; 0x21e <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__vector_5>
      18:	02 c1       	rjmp	.+516    	; 0x21e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	00 c1       	rjmp	.+512    	; 0x21e <__bad_interrupt>
      1e:	00 00       	nop
      20:	fe c0       	rjmp	.+508    	; 0x21e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__vector_9>
      28:	fa c0       	rjmp	.+500    	; 0x21e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f8 c0       	rjmp	.+496    	; 0x21e <__bad_interrupt>
      2e:	00 00       	nop
      30:	f6 c0       	rjmp	.+492    	; 0x21e <__bad_interrupt>
      32:	00 00       	nop
      34:	f4 c0       	rjmp	.+488    	; 0x21e <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_14>
      3c:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__vector_15>
      40:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__vector_16>
      44:	ec c0       	rjmp	.+472    	; 0x21e <__bad_interrupt>
      46:	00 00       	nop
      48:	ea c0       	rjmp	.+468    	; 0x21e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e8 c0       	rjmp	.+464    	; 0x21e <__bad_interrupt>
      4e:	00 00       	nop
      50:	e6 c0       	rjmp	.+460    	; 0x21e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__vector_21>
      58:	e2 c0       	rjmp	.+452    	; 0x21e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e0 c0       	rjmp	.+448    	; 0x21e <__bad_interrupt>
      5e:	00 00       	nop
      60:	de c0       	rjmp	.+444    	; 0x21e <__bad_interrupt>
      62:	00 00       	nop
      64:	dc c0       	rjmp	.+440    	; 0x21e <__bad_interrupt>
      66:	00 00       	nop
      68:	da c0       	rjmp	.+436    	; 0x21e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d8 c0       	rjmp	.+432    	; 0x21e <__bad_interrupt>
      6e:	00 00       	nop
      70:	d6 c0       	rjmp	.+428    	; 0x21e <__bad_interrupt>
      72:	00 00       	nop
      74:	d4 c0       	rjmp	.+424    	; 0x21e <__bad_interrupt>
      76:	00 00       	nop
      78:	d2 c0       	rjmp	.+420    	; 0x21e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d0 c0       	rjmp	.+416    	; 0x21e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ce c0       	rjmp	.+412    	; 0x21e <__bad_interrupt>
      82:	00 00       	nop
      84:	cc c0       	rjmp	.+408    	; 0x21e <__bad_interrupt>
      86:	00 00       	nop
      88:	ca c0       	rjmp	.+404    	; 0x21e <__bad_interrupt>
      8a:	00 00       	nop

0000008c <__c.1790>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.1788>:
      90:	69 6e 66 00                                         inf.

00000094 <__c.2085>:
      94:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      a4:	47 00                                               G.

000000a6 <pstr_an>:
      a6:	61 6e 00                                            an.

000000a9 <pstr_nfinity>:
      a9:	6e 66 69 6e 69 74 79 00                             nfinity.

000000b1 <pwr_m10>:
      b1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      c1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000c9 <pwr_p10>:
      c9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      d9:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000e1 <__c.1680>:
      e1:	25 75 2c 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     %u,..@z..Z..rN..
      f1:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     101:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     111:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     121:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     131:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     141:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     151:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     161:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     171:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     181:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     191:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a1:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b1:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c1:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d1:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001e0 <__ctors_end>:
     1e0:	11 24       	eor	r1, r1
     1e2:	1f be       	out	0x3f, r1	; 63
     1e4:	cf ef       	ldi	r28, 0xFF	; 255
     1e6:	d0 e1       	ldi	r29, 0x10	; 16
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	cd bf       	out	0x3d, r28	; 61

000001ec <__do_copy_data>:
     1ec:	11 e0       	ldi	r17, 0x01	; 1
     1ee:	a0 e0       	ldi	r26, 0x00	; 0
     1f0:	b1 e0       	ldi	r27, 0x01	; 1
     1f2:	e2 ee       	ldi	r30, 0xE2	; 226
     1f4:	f4 e2       	ldi	r31, 0x24	; 36
     1f6:	00 e0       	ldi	r16, 0x00	; 0
     1f8:	0b bf       	out	0x3b, r16	; 59
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x14>
     1fc:	07 90       	elpm	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	a6 31       	cpi	r26, 0x16	; 22
     202:	b1 07       	cpc	r27, r17
     204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0x10>

00000206 <__do_clear_bss>:
     206:	11 e0       	ldi	r17, 0x01	; 1
     208:	a6 e1       	ldi	r26, 0x16	; 22
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
     20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
     210:	a5 3c       	cpi	r26, 0xC5	; 197
     212:	b1 07       	cpc	r27, r17
     214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
     216:	0e 94 ab 0b 	call	0x1756	; 0x1756 <main>
     21a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <_exit>

0000021e <__bad_interrupt>:
     21e:	f0 ce       	rjmp	.-544    	; 0x0 <__vectors>

00000220 <vfprintf>:
     220:	2f 92       	push	r2
     222:	3f 92       	push	r3
     224:	4f 92       	push	r4
     226:	5f 92       	push	r5
     228:	6f 92       	push	r6
     22a:	7f 92       	push	r7
     22c:	8f 92       	push	r8
     22e:	9f 92       	push	r9
     230:	af 92       	push	r10
     232:	bf 92       	push	r11
     234:	cf 92       	push	r12
     236:	df 92       	push	r13
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	61 97       	sbiw	r28, 0x11	; 17
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	3c 01       	movw	r6, r24
     256:	7f 87       	std	Y+15, r23	; 0x0f
     258:	6e 87       	std	Y+14, r22	; 0x0e
     25a:	6a 01       	movw	r12, r20
     25c:	fc 01       	movw	r30, r24
     25e:	17 82       	std	Z+7, r1	; 0x07
     260:	16 82       	std	Z+6, r1	; 0x06
     262:	83 81       	ldd	r24, Z+3	; 0x03
     264:	81 fd       	sbrc	r24, 1
     266:	03 c0       	rjmp	.+6      	; 0x26e <vfprintf+0x4e>
     268:	6f ef       	ldi	r22, 0xFF	; 255
     26a:	7f ef       	ldi	r23, 0xFF	; 255
     26c:	6f c3       	rjmp	.+1758   	; 0x94c <vfprintf+0x72c>
     26e:	9e 01       	movw	r18, r28
     270:	2f 5f       	subi	r18, 0xFF	; 255
     272:	3f 4f       	sbci	r19, 0xFF	; 255
     274:	39 8b       	std	Y+17, r19	; 0x11
     276:	28 8b       	std	Y+16, r18	; 0x10
     278:	f3 01       	movw	r30, r6
     27a:	23 81       	ldd	r18, Z+3	; 0x03
     27c:	ee 85       	ldd	r30, Y+14	; 0x0e
     27e:	ff 85       	ldd	r31, Y+15	; 0x0f
     280:	23 fd       	sbrc	r18, 3
     282:	85 91       	lpm	r24, Z+
     284:	23 ff       	sbrs	r18, 3
     286:	81 91       	ld	r24, Z+
     288:	ff 87       	std	Y+15, r31	; 0x0f
     28a:	ee 87       	std	Y+14, r30	; 0x0e
     28c:	88 23       	and	r24, r24
     28e:	09 f4       	brne	.+2      	; 0x292 <vfprintf+0x72>
     290:	5a c3       	rjmp	.+1716   	; 0x946 <vfprintf+0x726>
     292:	85 32       	cpi	r24, 0x25	; 37
     294:	51 f4       	brne	.+20     	; 0x2aa <vfprintf+0x8a>
     296:	ee 85       	ldd	r30, Y+14	; 0x0e
     298:	ff 85       	ldd	r31, Y+15	; 0x0f
     29a:	23 fd       	sbrc	r18, 3
     29c:	85 91       	lpm	r24, Z+
     29e:	23 ff       	sbrs	r18, 3
     2a0:	81 91       	ld	r24, Z+
     2a2:	ff 87       	std	Y+15, r31	; 0x0f
     2a4:	ee 87       	std	Y+14, r30	; 0x0e
     2a6:	85 32       	cpi	r24, 0x25	; 37
     2a8:	29 f4       	brne	.+10     	; 0x2b4 <vfprintf+0x94>
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	b3 01       	movw	r22, r6
     2ae:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     2b2:	e2 cf       	rjmp	.-60     	; 0x278 <vfprintf+0x58>
     2b4:	98 2f       	mov	r25, r24
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	88 24       	eor	r8, r8
     2ba:	99 24       	eor	r9, r9
     2bc:	10 32       	cpi	r17, 0x20	; 32
     2be:	b0 f4       	brcc	.+44     	; 0x2ec <vfprintf+0xcc>
     2c0:	9b 32       	cpi	r25, 0x2B	; 43
     2c2:	69 f0       	breq	.+26     	; 0x2de <vfprintf+0xbe>
     2c4:	9c 32       	cpi	r25, 0x2C	; 44
     2c6:	28 f4       	brcc	.+10     	; 0x2d2 <vfprintf+0xb2>
     2c8:	90 32       	cpi	r25, 0x20	; 32
     2ca:	51 f0       	breq	.+20     	; 0x2e0 <vfprintf+0xc0>
     2cc:	93 32       	cpi	r25, 0x23	; 35
     2ce:	71 f4       	brne	.+28     	; 0x2ec <vfprintf+0xcc>
     2d0:	0b c0       	rjmp	.+22     	; 0x2e8 <vfprintf+0xc8>
     2d2:	9d 32       	cpi	r25, 0x2D	; 45
     2d4:	39 f0       	breq	.+14     	; 0x2e4 <vfprintf+0xc4>
     2d6:	90 33       	cpi	r25, 0x30	; 48
     2d8:	49 f4       	brne	.+18     	; 0x2ec <vfprintf+0xcc>
     2da:	11 60       	ori	r17, 0x01	; 1
     2dc:	28 c0       	rjmp	.+80     	; 0x32e <vfprintf+0x10e>
     2de:	12 60       	ori	r17, 0x02	; 2
     2e0:	14 60       	ori	r17, 0x04	; 4
     2e2:	25 c0       	rjmp	.+74     	; 0x32e <vfprintf+0x10e>
     2e4:	18 60       	ori	r17, 0x08	; 8
     2e6:	23 c0       	rjmp	.+70     	; 0x32e <vfprintf+0x10e>
     2e8:	10 61       	ori	r17, 0x10	; 16
     2ea:	21 c0       	rjmp	.+66     	; 0x32e <vfprintf+0x10e>
     2ec:	17 fd       	sbrc	r17, 7
     2ee:	2a c0       	rjmp	.+84     	; 0x344 <vfprintf+0x124>
     2f0:	89 2f       	mov	r24, r25
     2f2:	80 53       	subi	r24, 0x30	; 48
     2f4:	8a 30       	cpi	r24, 0x0A	; 10
     2f6:	78 f4       	brcc	.+30     	; 0x316 <vfprintf+0xf6>
     2f8:	16 ff       	sbrs	r17, 6
     2fa:	06 c0       	rjmp	.+12     	; 0x308 <vfprintf+0xe8>
     2fc:	fa e0       	ldi	r31, 0x0A	; 10
     2fe:	9f 9e       	mul	r9, r31
     300:	90 2c       	mov	r9, r0
     302:	11 24       	eor	r1, r1
     304:	98 0e       	add	r9, r24
     306:	13 c0       	rjmp	.+38     	; 0x32e <vfprintf+0x10e>
     308:	3a e0       	ldi	r19, 0x0A	; 10
     30a:	83 9e       	mul	r8, r19
     30c:	80 2c       	mov	r8, r0
     30e:	11 24       	eor	r1, r1
     310:	88 0e       	add	r8, r24
     312:	10 62       	ori	r17, 0x20	; 32
     314:	0c c0       	rjmp	.+24     	; 0x32e <vfprintf+0x10e>
     316:	9e 32       	cpi	r25, 0x2E	; 46
     318:	21 f4       	brne	.+8      	; 0x322 <vfprintf+0x102>
     31a:	16 fd       	sbrc	r17, 6
     31c:	14 c3       	rjmp	.+1576   	; 0x946 <vfprintf+0x726>
     31e:	10 64       	ori	r17, 0x40	; 64
     320:	06 c0       	rjmp	.+12     	; 0x32e <vfprintf+0x10e>
     322:	9c 36       	cpi	r25, 0x6C	; 108
     324:	11 f4       	brne	.+4      	; 0x32a <vfprintf+0x10a>
     326:	10 68       	ori	r17, 0x80	; 128
     328:	02 c0       	rjmp	.+4      	; 0x32e <vfprintf+0x10e>
     32a:	98 36       	cpi	r25, 0x68	; 104
     32c:	59 f4       	brne	.+22     	; 0x344 <vfprintf+0x124>
     32e:	ee 85       	ldd	r30, Y+14	; 0x0e
     330:	ff 85       	ldd	r31, Y+15	; 0x0f
     332:	23 fd       	sbrc	r18, 3
     334:	95 91       	lpm	r25, Z+
     336:	23 ff       	sbrs	r18, 3
     338:	91 91       	ld	r25, Z+
     33a:	ff 87       	std	Y+15, r31	; 0x0f
     33c:	ee 87       	std	Y+14, r30	; 0x0e
     33e:	99 23       	and	r25, r25
     340:	09 f0       	breq	.+2      	; 0x344 <vfprintf+0x124>
     342:	bc cf       	rjmp	.-136    	; 0x2bc <vfprintf+0x9c>
     344:	89 2f       	mov	r24, r25
     346:	85 54       	subi	r24, 0x45	; 69
     348:	83 30       	cpi	r24, 0x03	; 3
     34a:	20 f4       	brcc	.+8      	; 0x354 <vfprintf+0x134>
     34c:	81 2f       	mov	r24, r17
     34e:	80 61       	ori	r24, 0x10	; 16
     350:	90 5e       	subi	r25, 0xE0	; 224
     352:	07 c0       	rjmp	.+14     	; 0x362 <vfprintf+0x142>
     354:	89 2f       	mov	r24, r25
     356:	85 56       	subi	r24, 0x65	; 101
     358:	83 30       	cpi	r24, 0x03	; 3
     35a:	08 f0       	brcs	.+2      	; 0x35e <vfprintf+0x13e>
     35c:	9f c1       	rjmp	.+830    	; 0x69c <vfprintf+0x47c>
     35e:	81 2f       	mov	r24, r17
     360:	8f 7e       	andi	r24, 0xEF	; 239
     362:	86 fd       	sbrc	r24, 6
     364:	02 c0       	rjmp	.+4      	; 0x36a <vfprintf+0x14a>
     366:	76 e0       	ldi	r23, 0x06	; 6
     368:	97 2e       	mov	r9, r23
     36a:	6f e3       	ldi	r22, 0x3F	; 63
     36c:	f6 2e       	mov	r15, r22
     36e:	f8 22       	and	r15, r24
     370:	95 36       	cpi	r25, 0x65	; 101
     372:	19 f4       	brne	.+6      	; 0x37a <vfprintf+0x15a>
     374:	f0 e4       	ldi	r31, 0x40	; 64
     376:	ff 2a       	or	r15, r31
     378:	07 c0       	rjmp	.+14     	; 0x388 <vfprintf+0x168>
     37a:	96 36       	cpi	r25, 0x66	; 102
     37c:	19 f4       	brne	.+6      	; 0x384 <vfprintf+0x164>
     37e:	20 e8       	ldi	r18, 0x80	; 128
     380:	f2 2a       	or	r15, r18
     382:	02 c0       	rjmp	.+4      	; 0x388 <vfprintf+0x168>
     384:	91 10       	cpse	r9, r1
     386:	9a 94       	dec	r9
     388:	f7 fe       	sbrs	r15, 7
     38a:	0a c0       	rjmp	.+20     	; 0x3a0 <vfprintf+0x180>
     38c:	3b e3       	ldi	r19, 0x3B	; 59
     38e:	39 15       	cp	r19, r9
     390:	18 f4       	brcc	.+6      	; 0x398 <vfprintf+0x178>
     392:	5c e3       	ldi	r21, 0x3C	; 60
     394:	b5 2e       	mov	r11, r21
     396:	02 c0       	rjmp	.+4      	; 0x39c <vfprintf+0x17c>
     398:	b9 2c       	mov	r11, r9
     39a:	b3 94       	inc	r11
     39c:	27 e0       	ldi	r18, 0x07	; 7
     39e:	09 c0       	rjmp	.+18     	; 0x3b2 <vfprintf+0x192>
     3a0:	47 e0       	ldi	r20, 0x07	; 7
     3a2:	49 15       	cp	r20, r9
     3a4:	20 f4       	brcc	.+8      	; 0x3ae <vfprintf+0x18e>
     3a6:	bb 24       	eor	r11, r11
     3a8:	47 e0       	ldi	r20, 0x07	; 7
     3aa:	94 2e       	mov	r9, r20
     3ac:	f7 cf       	rjmp	.-18     	; 0x39c <vfprintf+0x17c>
     3ae:	29 2d       	mov	r18, r9
     3b0:	bb 24       	eor	r11, r11
     3b2:	c6 01       	movw	r24, r12
     3b4:	04 96       	adiw	r24, 0x04	; 4
     3b6:	9d 87       	std	Y+13, r25	; 0x0d
     3b8:	8c 87       	std	Y+12, r24	; 0x0c
     3ba:	f6 01       	movw	r30, r12
     3bc:	60 81       	ld	r22, Z
     3be:	71 81       	ldd	r23, Z+1	; 0x01
     3c0:	82 81       	ldd	r24, Z+2	; 0x02
     3c2:	93 81       	ldd	r25, Z+3	; 0x03
     3c4:	ae 01       	movw	r20, r28
     3c6:	4f 5f       	subi	r20, 0xFF	; 255
     3c8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ca:	0b 2d       	mov	r16, r11
     3cc:	0e 94 1c 10 	call	0x2038	; 0x2038 <__ftoa_engine>
     3d0:	6c 01       	movw	r12, r24
     3d2:	09 81       	ldd	r16, Y+1	; 0x01
     3d4:	20 2e       	mov	r2, r16
     3d6:	33 24       	eor	r3, r3
     3d8:	00 ff       	sbrs	r16, 0
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <vfprintf+0x1c4>
     3dc:	03 fd       	sbrc	r16, 3
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <vfprintf+0x1c4>
     3e0:	1d e2       	ldi	r17, 0x2D	; 45
     3e2:	09 c0       	rjmp	.+18     	; 0x3f6 <vfprintf+0x1d6>
     3e4:	f1 fe       	sbrs	r15, 1
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <vfprintf+0x1cc>
     3e8:	1b e2       	ldi	r17, 0x2B	; 43
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <vfprintf+0x1d6>
     3ec:	f2 fc       	sbrc	r15, 2
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <vfprintf+0x1d4>
     3f0:	10 e0       	ldi	r17, 0x00	; 0
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <vfprintf+0x1d6>
     3f4:	10 e2       	ldi	r17, 0x20	; 32
     3f6:	c1 01       	movw	r24, r2
     3f8:	8c 70       	andi	r24, 0x0C	; 12
     3fa:	90 70       	andi	r25, 0x00	; 0
     3fc:	89 2b       	or	r24, r25
     3fe:	b9 f1       	breq	.+110    	; 0x46e <vfprintf+0x24e>
     400:	11 23       	and	r17, r17
     402:	11 f4       	brne	.+4      	; 0x408 <vfprintf+0x1e8>
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	01 c0       	rjmp	.+2      	; 0x40a <vfprintf+0x1ea>
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	88 15       	cp	r24, r8
     40c:	10 f0       	brcs	.+4      	; 0x412 <vfprintf+0x1f2>
     40e:	88 24       	eor	r8, r8
     410:	0a c0       	rjmp	.+20     	; 0x426 <vfprintf+0x206>
     412:	88 1a       	sub	r8, r24
     414:	f3 fc       	sbrc	r15, 3
     416:	07 c0       	rjmp	.+14     	; 0x426 <vfprintf+0x206>
     418:	80 e2       	ldi	r24, 0x20	; 32
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	b3 01       	movw	r22, r6
     41e:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     422:	8a 94       	dec	r8
     424:	c9 f7       	brne	.-14     	; 0x418 <vfprintf+0x1f8>
     426:	11 23       	and	r17, r17
     428:	29 f0       	breq	.+10     	; 0x434 <vfprintf+0x214>
     42a:	81 2f       	mov	r24, r17
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	b3 01       	movw	r22, r6
     430:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     434:	23 fe       	sbrs	r2, 3
     436:	03 c0       	rjmp	.+6      	; 0x43e <vfprintf+0x21e>
     438:	0c e8       	ldi	r16, 0x8C	; 140
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	0e c0       	rjmp	.+28     	; 0x45a <vfprintf+0x23a>
     43e:	00 e9       	ldi	r16, 0x90	; 144
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	0b c0       	rjmp	.+22     	; 0x45a <vfprintf+0x23a>
     444:	e1 14       	cp	r14, r1
     446:	f1 04       	cpc	r15, r1
     448:	09 f0       	breq	.+2      	; 0x44c <vfprintf+0x22c>
     44a:	80 52       	subi	r24, 0x20	; 32
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	b3 01       	movw	r22, r6
     450:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     454:	0f 5f       	subi	r16, 0xFF	; 255
     456:	1f 4f       	sbci	r17, 0xFF	; 255
     458:	05 c0       	rjmp	.+10     	; 0x464 <vfprintf+0x244>
     45a:	ef 2c       	mov	r14, r15
     45c:	ff 24       	eor	r15, r15
     45e:	f0 e1       	ldi	r31, 0x10	; 16
     460:	ef 22       	and	r14, r31
     462:	ff 24       	eor	r15, r15
     464:	f8 01       	movw	r30, r16
     466:	84 91       	lpm	r24, Z+
     468:	88 23       	and	r24, r24
     46a:	61 f7       	brne	.-40     	; 0x444 <vfprintf+0x224>
     46c:	14 c1       	rjmp	.+552    	; 0x696 <vfprintf+0x476>
     46e:	f7 fe       	sbrs	r15, 7
     470:	12 c0       	rjmp	.+36     	; 0x496 <vfprintf+0x276>
     472:	bc 0c       	add	r11, r12
     474:	24 fe       	sbrs	r2, 4
     476:	04 c0       	rjmp	.+8      	; 0x480 <vfprintf+0x260>
     478:	8a 81       	ldd	r24, Y+2	; 0x02
     47a:	81 33       	cpi	r24, 0x31	; 49
     47c:	09 f4       	brne	.+2      	; 0x480 <vfprintf+0x260>
     47e:	ba 94       	dec	r11
     480:	1b 14       	cp	r1, r11
     482:	1c f0       	brlt	.+6      	; 0x48a <vfprintf+0x26a>
     484:	bb 24       	eor	r11, r11
     486:	b3 94       	inc	r11
     488:	2d c0       	rjmp	.+90     	; 0x4e4 <vfprintf+0x2c4>
     48a:	f8 e0       	ldi	r31, 0x08	; 8
     48c:	fb 15       	cp	r31, r11
     48e:	50 f5       	brcc	.+84     	; 0x4e4 <vfprintf+0x2c4>
     490:	38 e0       	ldi	r19, 0x08	; 8
     492:	b3 2e       	mov	r11, r19
     494:	27 c0       	rjmp	.+78     	; 0x4e4 <vfprintf+0x2c4>
     496:	f6 fc       	sbrc	r15, 6
     498:	25 c0       	rjmp	.+74     	; 0x4e4 <vfprintf+0x2c4>
     49a:	89 2d       	mov	r24, r9
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	8c 15       	cp	r24, r12
     4a0:	9d 05       	cpc	r25, r13
     4a2:	4c f0       	brlt	.+18     	; 0x4b6 <vfprintf+0x296>
     4a4:	2c ef       	ldi	r18, 0xFC	; 252
     4a6:	c2 16       	cp	r12, r18
     4a8:	2f ef       	ldi	r18, 0xFF	; 255
     4aa:	d2 06       	cpc	r13, r18
     4ac:	24 f0       	brlt	.+8      	; 0x4b6 <vfprintf+0x296>
     4ae:	30 e8       	ldi	r19, 0x80	; 128
     4b0:	f3 2a       	or	r15, r19
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <vfprintf+0x296>
     4b4:	9a 94       	dec	r9
     4b6:	99 20       	and	r9, r9
     4b8:	49 f0       	breq	.+18     	; 0x4cc <vfprintf+0x2ac>
     4ba:	e2 e0       	ldi	r30, 0x02	; 2
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ec 0f       	add	r30, r28
     4c0:	fd 1f       	adc	r31, r29
     4c2:	e9 0d       	add	r30, r9
     4c4:	f1 1d       	adc	r31, r1
     4c6:	80 81       	ld	r24, Z
     4c8:	80 33       	cpi	r24, 0x30	; 48
     4ca:	a1 f3       	breq	.-24     	; 0x4b4 <vfprintf+0x294>
     4cc:	f7 fe       	sbrs	r15, 7
     4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <vfprintf+0x2c4>
     4d0:	b9 2c       	mov	r11, r9
     4d2:	b3 94       	inc	r11
     4d4:	89 2d       	mov	r24, r9
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	c8 16       	cp	r12, r24
     4da:	d9 06       	cpc	r13, r25
     4dc:	14 f0       	brlt	.+4      	; 0x4e2 <vfprintf+0x2c2>
     4de:	99 24       	eor	r9, r9
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <vfprintf+0x2c4>
     4e2:	9c 18       	sub	r9, r12
     4e4:	f7 fc       	sbrc	r15, 7
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <vfprintf+0x2ce>
     4e8:	25 e0       	ldi	r18, 0x05	; 5
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	09 c0       	rjmp	.+18     	; 0x500 <vfprintf+0x2e0>
     4ee:	1c 14       	cp	r1, r12
     4f0:	1d 04       	cpc	r1, r13
     4f2:	1c f0       	brlt	.+6      	; 0x4fa <vfprintf+0x2da>
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	03 c0       	rjmp	.+6      	; 0x500 <vfprintf+0x2e0>
     4fa:	96 01       	movw	r18, r12
     4fc:	2f 5f       	subi	r18, 0xFF	; 255
     4fe:	3f 4f       	sbci	r19, 0xFF	; 255
     500:	11 23       	and	r17, r17
     502:	11 f0       	breq	.+4      	; 0x508 <vfprintf+0x2e8>
     504:	2f 5f       	subi	r18, 0xFF	; 255
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	99 20       	and	r9, r9
     50a:	29 f0       	breq	.+10     	; 0x516 <vfprintf+0x2f6>
     50c:	89 2d       	mov	r24, r9
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	28 0f       	add	r18, r24
     514:	39 1f       	adc	r19, r25
     516:	88 2d       	mov	r24, r8
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	28 17       	cp	r18, r24
     51c:	39 07       	cpc	r19, r25
     51e:	14 f0       	brlt	.+4      	; 0x524 <vfprintf+0x304>
     520:	88 24       	eor	r8, r8
     522:	01 c0       	rjmp	.+2      	; 0x526 <vfprintf+0x306>
     524:	82 1a       	sub	r8, r18
     526:	4f 2c       	mov	r4, r15
     528:	55 24       	eor	r5, r5
     52a:	c2 01       	movw	r24, r4
     52c:	89 70       	andi	r24, 0x09	; 9
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	89 2b       	or	r24, r25
     532:	39 f0       	breq	.+14     	; 0x542 <vfprintf+0x322>
     534:	08 c0       	rjmp	.+16     	; 0x546 <vfprintf+0x326>
     536:	80 e2       	ldi	r24, 0x20	; 32
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	b3 01       	movw	r22, r6
     53c:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     540:	8a 94       	dec	r8
     542:	88 20       	and	r8, r8
     544:	c1 f7       	brne	.-16     	; 0x536 <vfprintf+0x316>
     546:	11 23       	and	r17, r17
     548:	29 f0       	breq	.+10     	; 0x554 <vfprintf+0x334>
     54a:	81 2f       	mov	r24, r17
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	b3 01       	movw	r22, r6
     550:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     554:	43 fe       	sbrs	r4, 3
     556:	07 c0       	rjmp	.+14     	; 0x566 <vfprintf+0x346>
     558:	08 c0       	rjmp	.+16     	; 0x56a <vfprintf+0x34a>
     55a:	80 e3       	ldi	r24, 0x30	; 48
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	b3 01       	movw	r22, r6
     560:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     564:	8a 94       	dec	r8
     566:	88 20       	and	r8, r8
     568:	c1 f7       	brne	.-16     	; 0x55a <vfprintf+0x33a>
     56a:	f7 fe       	sbrs	r15, 7
     56c:	46 c0       	rjmp	.+140    	; 0x5fa <vfprintf+0x3da>
     56e:	86 01       	movw	r16, r12
     570:	d7 fe       	sbrs	r13, 7
     572:	02 c0       	rjmp	.+4      	; 0x578 <vfprintf+0x358>
     574:	00 e0       	ldi	r16, 0x00	; 0
     576:	10 e0       	ldi	r17, 0x00	; 0
     578:	76 01       	movw	r14, r12
     57a:	08 94       	sec
     57c:	e1 1c       	adc	r14, r1
     57e:	f1 1c       	adc	r15, r1
     580:	e0 1a       	sub	r14, r16
     582:	f1 0a       	sbc	r15, r17
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	4c 0f       	add	r20, r28
     58a:	5d 1f       	adc	r21, r29
     58c:	e4 0e       	add	r14, r20
     58e:	f5 1e       	adc	r15, r21
     590:	26 01       	movw	r4, r12
     592:	4b 18       	sub	r4, r11
     594:	51 08       	sbc	r5, r1
     596:	89 2d       	mov	r24, r9
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	aa 24       	eor	r10, r10
     59c:	bb 24       	eor	r11, r11
     59e:	a8 1a       	sub	r10, r24
     5a0:	b9 0a       	sbc	r11, r25
     5a2:	5f ef       	ldi	r21, 0xFF	; 255
     5a4:	0f 3f       	cpi	r16, 0xFF	; 255
     5a6:	15 07       	cpc	r17, r21
     5a8:	29 f4       	brne	.+10     	; 0x5b4 <vfprintf+0x394>
     5aa:	8e e2       	ldi	r24, 0x2E	; 46
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	b3 01       	movw	r22, r6
     5b0:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     5b4:	c0 16       	cp	r12, r16
     5b6:	d1 06       	cpc	r13, r17
     5b8:	34 f0       	brlt	.+12     	; 0x5c6 <vfprintf+0x3a6>
     5ba:	40 16       	cp	r4, r16
     5bc:	51 06       	cpc	r5, r17
     5be:	1c f4       	brge	.+6      	; 0x5c6 <vfprintf+0x3a6>
     5c0:	f7 01       	movw	r30, r14
     5c2:	80 81       	ld	r24, Z
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <vfprintf+0x3a8>
     5c6:	80 e3       	ldi	r24, 0x30	; 48
     5c8:	01 50       	subi	r16, 0x01	; 1
     5ca:	10 40       	sbci	r17, 0x00	; 0
     5cc:	08 94       	sec
     5ce:	e1 1c       	adc	r14, r1
     5d0:	f1 1c       	adc	r15, r1
     5d2:	0a 15       	cp	r16, r10
     5d4:	1b 05       	cpc	r17, r11
     5d6:	2c f0       	brlt	.+10     	; 0x5e2 <vfprintf+0x3c2>
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	b3 01       	movw	r22, r6
     5dc:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     5e0:	e0 cf       	rjmp	.-64     	; 0x5a2 <vfprintf+0x382>
     5e2:	0c 15       	cp	r16, r12
     5e4:	1d 05       	cpc	r17, r13
     5e6:	39 f4       	brne	.+14     	; 0x5f6 <vfprintf+0x3d6>
     5e8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ea:	96 33       	cpi	r25, 0x36	; 54
     5ec:	18 f4       	brcc	.+6      	; 0x5f4 <vfprintf+0x3d4>
     5ee:	95 33       	cpi	r25, 0x35	; 53
     5f0:	11 f4       	brne	.+4      	; 0x5f6 <vfprintf+0x3d6>
     5f2:	24 fe       	sbrs	r2, 4
     5f4:	81 e3       	ldi	r24, 0x31	; 49
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	4b c0       	rjmp	.+150    	; 0x690 <vfprintf+0x470>
     5fa:	8a 81       	ldd	r24, Y+2	; 0x02
     5fc:	81 33       	cpi	r24, 0x31	; 49
     5fe:	09 f0       	breq	.+2      	; 0x602 <vfprintf+0x3e2>
     600:	0f 7e       	andi	r16, 0xEF	; 239
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	b3 01       	movw	r22, r6
     606:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     60a:	99 20       	and	r9, r9
     60c:	a1 f0       	breq	.+40     	; 0x636 <vfprintf+0x416>
     60e:	8e e2       	ldi	r24, 0x2E	; 46
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	b3 01       	movw	r22, r6
     614:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     618:	12 e0       	ldi	r17, 0x02	; 2
     61a:	e1 e0       	ldi	r30, 0x01	; 1
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ec 0f       	add	r30, r28
     620:	fd 1f       	adc	r31, r29
     622:	e1 0f       	add	r30, r17
     624:	f1 1d       	adc	r31, r1
     626:	1f 5f       	subi	r17, 0xFF	; 255
     628:	80 81       	ld	r24, Z
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	b3 01       	movw	r22, r6
     62e:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     632:	9a 94       	dec	r9
     634:	91 f7       	brne	.-28     	; 0x61a <vfprintf+0x3fa>
     636:	44 fc       	sbrc	r4, 4
     638:	03 c0       	rjmp	.+6      	; 0x640 <vfprintf+0x420>
     63a:	85 e6       	ldi	r24, 0x65	; 101
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	02 c0       	rjmp	.+4      	; 0x644 <vfprintf+0x424>
     640:	85 e4       	ldi	r24, 0x45	; 69
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	b3 01       	movw	r22, r6
     646:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     64a:	d7 fc       	sbrc	r13, 7
     64c:	05 c0       	rjmp	.+10     	; 0x658 <vfprintf+0x438>
     64e:	c1 14       	cp	r12, r1
     650:	d1 04       	cpc	r13, r1
     652:	41 f4       	brne	.+16     	; 0x664 <vfprintf+0x444>
     654:	04 ff       	sbrs	r16, 4
     656:	06 c0       	rjmp	.+12     	; 0x664 <vfprintf+0x444>
     658:	d0 94       	com	r13
     65a:	c1 94       	neg	r12
     65c:	d1 08       	sbc	r13, r1
     65e:	d3 94       	inc	r13
     660:	8d e2       	ldi	r24, 0x2D	; 45
     662:	01 c0       	rjmp	.+2      	; 0x666 <vfprintf+0x446>
     664:	8b e2       	ldi	r24, 0x2B	; 43
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	b3 01       	movw	r22, r6
     66a:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     66e:	80 e3       	ldi	r24, 0x30	; 48
     670:	05 c0       	rjmp	.+10     	; 0x67c <vfprintf+0x45c>
     672:	8f 5f       	subi	r24, 0xFF	; 255
     674:	26 ef       	ldi	r18, 0xF6	; 246
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	c2 0e       	add	r12, r18
     67a:	d3 1e       	adc	r13, r19
     67c:	3a e0       	ldi	r19, 0x0A	; 10
     67e:	c3 16       	cp	r12, r19
     680:	d1 04       	cpc	r13, r1
     682:	bc f7       	brge	.-18     	; 0x672 <vfprintf+0x452>
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	b3 01       	movw	r22, r6
     688:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     68c:	c6 01       	movw	r24, r12
     68e:	c0 96       	adiw	r24, 0x30	; 48
     690:	b3 01       	movw	r22, r6
     692:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     696:	cc 84       	ldd	r12, Y+12	; 0x0c
     698:	dd 84       	ldd	r13, Y+13	; 0x0d
     69a:	52 c1       	rjmp	.+676    	; 0x940 <vfprintf+0x720>
     69c:	93 36       	cpi	r25, 0x63	; 99
     69e:	31 f0       	breq	.+12     	; 0x6ac <vfprintf+0x48c>
     6a0:	93 37       	cpi	r25, 0x73	; 115
     6a2:	99 f0       	breq	.+38     	; 0x6ca <vfprintf+0x4aa>
     6a4:	93 35       	cpi	r25, 0x53	; 83
     6a6:	09 f0       	breq	.+2      	; 0x6aa <vfprintf+0x48a>
     6a8:	59 c0       	rjmp	.+178    	; 0x75c <vfprintf+0x53c>
     6aa:	23 c0       	rjmp	.+70     	; 0x6f2 <vfprintf+0x4d2>
     6ac:	f6 01       	movw	r30, r12
     6ae:	80 81       	ld	r24, Z
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	5e 01       	movw	r10, r28
     6b4:	08 94       	sec
     6b6:	a1 1c       	adc	r10, r1
     6b8:	b1 1c       	adc	r11, r1
     6ba:	22 e0       	ldi	r18, 0x02	; 2
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	c2 0e       	add	r12, r18
     6c0:	d3 1e       	adc	r13, r19
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	e2 2e       	mov	r14, r18
     6c6:	f1 2c       	mov	r15, r1
     6c8:	12 c0       	rjmp	.+36     	; 0x6ee <vfprintf+0x4ce>
     6ca:	f6 01       	movw	r30, r12
     6cc:	a0 80       	ld	r10, Z
     6ce:	b1 80       	ldd	r11, Z+1	; 0x01
     6d0:	16 fd       	sbrc	r17, 6
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <vfprintf+0x4ba>
     6d4:	6f ef       	ldi	r22, 0xFF	; 255
     6d6:	7f ef       	ldi	r23, 0xFF	; 255
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <vfprintf+0x4be>
     6da:	69 2d       	mov	r22, r9
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	22 e0       	ldi	r18, 0x02	; 2
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	c2 0e       	add	r12, r18
     6e4:	d3 1e       	adc	r13, r19
     6e6:	c5 01       	movw	r24, r10
     6e8:	0e 94 1a 11 	call	0x2234	; 0x2234 <strnlen>
     6ec:	7c 01       	movw	r14, r24
     6ee:	1f 77       	andi	r17, 0x7F	; 127
     6f0:	13 c0       	rjmp	.+38     	; 0x718 <vfprintf+0x4f8>
     6f2:	f6 01       	movw	r30, r12
     6f4:	a0 80       	ld	r10, Z
     6f6:	b1 80       	ldd	r11, Z+1	; 0x01
     6f8:	16 fd       	sbrc	r17, 6
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <vfprintf+0x4e2>
     6fc:	6f ef       	ldi	r22, 0xFF	; 255
     6fe:	7f ef       	ldi	r23, 0xFF	; 255
     700:	02 c0       	rjmp	.+4      	; 0x706 <vfprintf+0x4e6>
     702:	69 2d       	mov	r22, r9
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	22 e0       	ldi	r18, 0x02	; 2
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	c2 0e       	add	r12, r18
     70c:	d3 1e       	adc	r13, r19
     70e:	c5 01       	movw	r24, r10
     710:	0e 94 0f 11 	call	0x221e	; 0x221e <strnlen_P>
     714:	7c 01       	movw	r14, r24
     716:	10 68       	ori	r17, 0x80	; 128
     718:	13 ff       	sbrs	r17, 3
     71a:	07 c0       	rjmp	.+14     	; 0x72a <vfprintf+0x50a>
     71c:	1b c0       	rjmp	.+54     	; 0x754 <vfprintf+0x534>
     71e:	80 e2       	ldi	r24, 0x20	; 32
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	b3 01       	movw	r22, r6
     724:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     728:	8a 94       	dec	r8
     72a:	88 2d       	mov	r24, r8
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	e8 16       	cp	r14, r24
     730:	f9 06       	cpc	r15, r25
     732:	a8 f3       	brcs	.-22     	; 0x71e <vfprintf+0x4fe>
     734:	0f c0       	rjmp	.+30     	; 0x754 <vfprintf+0x534>
     736:	f5 01       	movw	r30, r10
     738:	17 fd       	sbrc	r17, 7
     73a:	85 91       	lpm	r24, Z+
     73c:	17 ff       	sbrs	r17, 7
     73e:	81 91       	ld	r24, Z+
     740:	5f 01       	movw	r10, r30
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	b3 01       	movw	r22, r6
     746:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     74a:	81 10       	cpse	r8, r1
     74c:	8a 94       	dec	r8
     74e:	08 94       	sec
     750:	e1 08       	sbc	r14, r1
     752:	f1 08       	sbc	r15, r1
     754:	e1 14       	cp	r14, r1
     756:	f1 04       	cpc	r15, r1
     758:	71 f7       	brne	.-36     	; 0x736 <vfprintf+0x516>
     75a:	f2 c0       	rjmp	.+484    	; 0x940 <vfprintf+0x720>
     75c:	94 36       	cpi	r25, 0x64	; 100
     75e:	11 f0       	breq	.+4      	; 0x764 <vfprintf+0x544>
     760:	99 36       	cpi	r25, 0x69	; 105
     762:	89 f5       	brne	.+98     	; 0x7c6 <vfprintf+0x5a6>
     764:	17 ff       	sbrs	r17, 7
     766:	08 c0       	rjmp	.+16     	; 0x778 <vfprintf+0x558>
     768:	f6 01       	movw	r30, r12
     76a:	20 81       	ld	r18, Z
     76c:	31 81       	ldd	r19, Z+1	; 0x01
     76e:	42 81       	ldd	r20, Z+2	; 0x02
     770:	53 81       	ldd	r21, Z+3	; 0x03
     772:	84 e0       	ldi	r24, 0x04	; 4
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0a c0       	rjmp	.+20     	; 0x78c <vfprintf+0x56c>
     778:	f6 01       	movw	r30, r12
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	9c 01       	movw	r18, r24
     780:	44 27       	eor	r20, r20
     782:	37 fd       	sbrc	r19, 7
     784:	40 95       	com	r20
     786:	54 2f       	mov	r21, r20
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	c8 0e       	add	r12, r24
     78e:	d9 1e       	adc	r13, r25
     790:	9f e6       	ldi	r25, 0x6F	; 111
     792:	f9 2e       	mov	r15, r25
     794:	f1 22       	and	r15, r17
     796:	57 ff       	sbrs	r21, 7
     798:	09 c0       	rjmp	.+18     	; 0x7ac <vfprintf+0x58c>
     79a:	50 95       	com	r21
     79c:	40 95       	com	r20
     79e:	30 95       	com	r19
     7a0:	21 95       	neg	r18
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	4f 4f       	sbci	r20, 0xFF	; 255
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	90 e8       	ldi	r25, 0x80	; 128
     7aa:	f9 2a       	or	r15, r25
     7ac:	ca 01       	movw	r24, r20
     7ae:	b9 01       	movw	r22, r18
     7b0:	ae 01       	movw	r20, r28
     7b2:	4f 5f       	subi	r20, 0xFF	; 255
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	2a e0       	ldi	r18, 0x0A	; 10
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	0e 94 0e 12 	call	0x241c	; 0x241c <__ultoa_invert>
     7be:	e8 2e       	mov	r14, r24
     7c0:	e8 89       	ldd	r30, Y+16	; 0x10
     7c2:	ee 1a       	sub	r14, r30
     7c4:	41 c0       	rjmp	.+130    	; 0x848 <vfprintf+0x628>
     7c6:	95 37       	cpi	r25, 0x75	; 117
     7c8:	21 f4       	brne	.+8      	; 0x7d2 <vfprintf+0x5b2>
     7ca:	1f 7e       	andi	r17, 0xEF	; 239
     7cc:	2a e0       	ldi	r18, 0x0A	; 10
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	1c c0       	rjmp	.+56     	; 0x80a <vfprintf+0x5ea>
     7d2:	19 7f       	andi	r17, 0xF9	; 249
     7d4:	9f 36       	cpi	r25, 0x6F	; 111
     7d6:	61 f0       	breq	.+24     	; 0x7f0 <vfprintf+0x5d0>
     7d8:	90 37       	cpi	r25, 0x70	; 112
     7da:	20 f4       	brcc	.+8      	; 0x7e4 <vfprintf+0x5c4>
     7dc:	98 35       	cpi	r25, 0x58	; 88
     7de:	09 f0       	breq	.+2      	; 0x7e2 <vfprintf+0x5c2>
     7e0:	b2 c0       	rjmp	.+356    	; 0x946 <vfprintf+0x726>
     7e2:	0f c0       	rjmp	.+30     	; 0x802 <vfprintf+0x5e2>
     7e4:	90 37       	cpi	r25, 0x70	; 112
     7e6:	39 f0       	breq	.+14     	; 0x7f6 <vfprintf+0x5d6>
     7e8:	98 37       	cpi	r25, 0x78	; 120
     7ea:	09 f0       	breq	.+2      	; 0x7ee <vfprintf+0x5ce>
     7ec:	ac c0       	rjmp	.+344    	; 0x946 <vfprintf+0x726>
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <vfprintf+0x5d8>
     7f0:	28 e0       	ldi	r18, 0x08	; 8
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	0a c0       	rjmp	.+20     	; 0x80a <vfprintf+0x5ea>
     7f6:	10 61       	ori	r17, 0x10	; 16
     7f8:	14 fd       	sbrc	r17, 4
     7fa:	14 60       	ori	r17, 0x04	; 4
     7fc:	20 e1       	ldi	r18, 0x10	; 16
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	04 c0       	rjmp	.+8      	; 0x80a <vfprintf+0x5ea>
     802:	14 fd       	sbrc	r17, 4
     804:	16 60       	ori	r17, 0x06	; 6
     806:	20 e1       	ldi	r18, 0x10	; 16
     808:	32 e0       	ldi	r19, 0x02	; 2
     80a:	17 ff       	sbrs	r17, 7
     80c:	08 c0       	rjmp	.+16     	; 0x81e <vfprintf+0x5fe>
     80e:	f6 01       	movw	r30, r12
     810:	60 81       	ld	r22, Z
     812:	71 81       	ldd	r23, Z+1	; 0x01
     814:	82 81       	ldd	r24, Z+2	; 0x02
     816:	93 81       	ldd	r25, Z+3	; 0x03
     818:	44 e0       	ldi	r20, 0x04	; 4
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	08 c0       	rjmp	.+16     	; 0x82e <vfprintf+0x60e>
     81e:	f6 01       	movw	r30, r12
     820:	80 81       	ld	r24, Z
     822:	91 81       	ldd	r25, Z+1	; 0x01
     824:	bc 01       	movw	r22, r24
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	42 e0       	ldi	r20, 0x02	; 2
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	c4 0e       	add	r12, r20
     830:	d5 1e       	adc	r13, r21
     832:	ae 01       	movw	r20, r28
     834:	4f 5f       	subi	r20, 0xFF	; 255
     836:	5f 4f       	sbci	r21, 0xFF	; 255
     838:	0e 94 0e 12 	call	0x241c	; 0x241c <__ultoa_invert>
     83c:	e8 2e       	mov	r14, r24
     83e:	58 89       	ldd	r21, Y+16	; 0x10
     840:	e5 1a       	sub	r14, r21
     842:	8f e7       	ldi	r24, 0x7F	; 127
     844:	f8 2e       	mov	r15, r24
     846:	f1 22       	and	r15, r17
     848:	f6 fe       	sbrs	r15, 6
     84a:	0b c0       	rjmp	.+22     	; 0x862 <vfprintf+0x642>
     84c:	8e ef       	ldi	r24, 0xFE	; 254
     84e:	f8 22       	and	r15, r24
     850:	e9 14       	cp	r14, r9
     852:	38 f4       	brcc	.+14     	; 0x862 <vfprintf+0x642>
     854:	f4 fe       	sbrs	r15, 4
     856:	07 c0       	rjmp	.+14     	; 0x866 <vfprintf+0x646>
     858:	f2 fc       	sbrc	r15, 2
     85a:	05 c0       	rjmp	.+10     	; 0x866 <vfprintf+0x646>
     85c:	9f ee       	ldi	r25, 0xEF	; 239
     85e:	f9 22       	and	r15, r25
     860:	02 c0       	rjmp	.+4      	; 0x866 <vfprintf+0x646>
     862:	1e 2d       	mov	r17, r14
     864:	01 c0       	rjmp	.+2      	; 0x868 <vfprintf+0x648>
     866:	19 2d       	mov	r17, r9
     868:	f4 fe       	sbrs	r15, 4
     86a:	0d c0       	rjmp	.+26     	; 0x886 <vfprintf+0x666>
     86c:	fe 01       	movw	r30, r28
     86e:	ee 0d       	add	r30, r14
     870:	f1 1d       	adc	r31, r1
     872:	80 81       	ld	r24, Z
     874:	80 33       	cpi	r24, 0x30	; 48
     876:	19 f4       	brne	.+6      	; 0x87e <vfprintf+0x65e>
     878:	e9 ee       	ldi	r30, 0xE9	; 233
     87a:	fe 22       	and	r15, r30
     87c:	08 c0       	rjmp	.+16     	; 0x88e <vfprintf+0x66e>
     87e:	1f 5f       	subi	r17, 0xFF	; 255
     880:	f2 fe       	sbrs	r15, 2
     882:	05 c0       	rjmp	.+10     	; 0x88e <vfprintf+0x66e>
     884:	03 c0       	rjmp	.+6      	; 0x88c <vfprintf+0x66c>
     886:	8f 2d       	mov	r24, r15
     888:	86 78       	andi	r24, 0x86	; 134
     88a:	09 f0       	breq	.+2      	; 0x88e <vfprintf+0x66e>
     88c:	1f 5f       	subi	r17, 0xFF	; 255
     88e:	0f 2d       	mov	r16, r15
     890:	f3 fc       	sbrc	r15, 3
     892:	14 c0       	rjmp	.+40     	; 0x8bc <vfprintf+0x69c>
     894:	f0 fe       	sbrs	r15, 0
     896:	0f c0       	rjmp	.+30     	; 0x8b6 <vfprintf+0x696>
     898:	18 15       	cp	r17, r8
     89a:	10 f0       	brcs	.+4      	; 0x8a0 <vfprintf+0x680>
     89c:	9e 2c       	mov	r9, r14
     89e:	0b c0       	rjmp	.+22     	; 0x8b6 <vfprintf+0x696>
     8a0:	9e 2c       	mov	r9, r14
     8a2:	98 0c       	add	r9, r8
     8a4:	91 1a       	sub	r9, r17
     8a6:	18 2d       	mov	r17, r8
     8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <vfprintf+0x696>
     8aa:	80 e2       	ldi	r24, 0x20	; 32
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	b3 01       	movw	r22, r6
     8b0:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     8b4:	1f 5f       	subi	r17, 0xFF	; 255
     8b6:	18 15       	cp	r17, r8
     8b8:	c0 f3       	brcs	.-16     	; 0x8aa <vfprintf+0x68a>
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <vfprintf+0x6a4>
     8bc:	18 15       	cp	r17, r8
     8be:	10 f4       	brcc	.+4      	; 0x8c4 <vfprintf+0x6a4>
     8c0:	81 1a       	sub	r8, r17
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <vfprintf+0x6a6>
     8c4:	88 24       	eor	r8, r8
     8c6:	04 ff       	sbrs	r16, 4
     8c8:	0f c0       	rjmp	.+30     	; 0x8e8 <vfprintf+0x6c8>
     8ca:	80 e3       	ldi	r24, 0x30	; 48
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	b3 01       	movw	r22, r6
     8d0:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     8d4:	02 ff       	sbrs	r16, 2
     8d6:	1d c0       	rjmp	.+58     	; 0x912 <vfprintf+0x6f2>
     8d8:	01 fd       	sbrc	r16, 1
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <vfprintf+0x6c2>
     8dc:	88 e7       	ldi	r24, 0x78	; 120
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e c0       	rjmp	.+28     	; 0x8fe <vfprintf+0x6de>
     8e2:	88 e5       	ldi	r24, 0x58	; 88
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0b c0       	rjmp	.+22     	; 0x8fe <vfprintf+0x6de>
     8e8:	80 2f       	mov	r24, r16
     8ea:	86 78       	andi	r24, 0x86	; 134
     8ec:	91 f0       	breq	.+36     	; 0x912 <vfprintf+0x6f2>
     8ee:	01 ff       	sbrs	r16, 1
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <vfprintf+0x6d6>
     8f2:	8b e2       	ldi	r24, 0x2B	; 43
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <vfprintf+0x6d8>
     8f6:	80 e2       	ldi	r24, 0x20	; 32
     8f8:	f7 fc       	sbrc	r15, 7
     8fa:	8d e2       	ldi	r24, 0x2D	; 45
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	b3 01       	movw	r22, r6
     900:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     904:	06 c0       	rjmp	.+12     	; 0x912 <vfprintf+0x6f2>
     906:	80 e3       	ldi	r24, 0x30	; 48
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	b3 01       	movw	r22, r6
     90c:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     910:	9a 94       	dec	r9
     912:	e9 14       	cp	r14, r9
     914:	c0 f3       	brcs	.-16     	; 0x906 <vfprintf+0x6e6>
     916:	ea 94       	dec	r14
     918:	e1 e0       	ldi	r30, 0x01	; 1
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	ec 0f       	add	r30, r28
     91e:	fd 1f       	adc	r31, r29
     920:	ee 0d       	add	r30, r14
     922:	f1 1d       	adc	r31, r1
     924:	80 81       	ld	r24, Z
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	b3 01       	movw	r22, r6
     92a:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     92e:	ee 20       	and	r14, r14
     930:	91 f7       	brne	.-28     	; 0x916 <vfprintf+0x6f6>
     932:	06 c0       	rjmp	.+12     	; 0x940 <vfprintf+0x720>
     934:	80 e2       	ldi	r24, 0x20	; 32
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	b3 01       	movw	r22, r6
     93a:	0e 94 67 11 	call	0x22ce	; 0x22ce <fputc>
     93e:	8a 94       	dec	r8
     940:	88 20       	and	r8, r8
     942:	c1 f7       	brne	.-16     	; 0x934 <vfprintf+0x714>
     944:	99 cc       	rjmp	.-1742   	; 0x278 <vfprintf+0x58>
     946:	f3 01       	movw	r30, r6
     948:	66 81       	ldd	r22, Z+6	; 0x06
     94a:	77 81       	ldd	r23, Z+7	; 0x07
     94c:	cb 01       	movw	r24, r22
     94e:	61 96       	adiw	r28, 0x11	; 17
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	bf 90       	pop	r11
     96c:	af 90       	pop	r10
     96e:	9f 90       	pop	r9
     970:	8f 90       	pop	r8
     972:	7f 90       	pop	r7
     974:	6f 90       	pop	r6
     976:	5f 90       	pop	r5
     978:	4f 90       	pop	r4
     97a:	3f 90       	pop	r3
     97c:	2f 90       	pop	r2
     97e:	08 95       	ret

00000980 <putval>:
     980:	fc 01       	movw	r30, r24
     982:	20 fd       	sbrc	r18, 0
     984:	08 c0       	rjmp	.+16     	; 0x996 <putval+0x16>
     986:	23 fd       	sbrc	r18, 3
     988:	05 c0       	rjmp	.+10     	; 0x994 <putval+0x14>
     98a:	22 ff       	sbrs	r18, 2
     98c:	02 c0       	rjmp	.+4      	; 0x992 <putval+0x12>
     98e:	73 83       	std	Z+3, r23	; 0x03
     990:	62 83       	std	Z+2, r22	; 0x02
     992:	51 83       	std	Z+1, r21	; 0x01
     994:	40 83       	st	Z, r20
     996:	08 95       	ret

00000998 <mulacc>:
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	44 ff       	sbrs	r20, 4
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <mulacc+0x10>
     9a4:	33 e0       	ldi	r19, 0x03	; 3
     9a6:	11 c0       	rjmp	.+34     	; 0x9ca <mulacc+0x32>
     9a8:	46 ff       	sbrs	r20, 6
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <mulacc+0x18>
     9ac:	34 e0       	ldi	r19, 0x04	; 4
     9ae:	0d c0       	rjmp	.+26     	; 0x9ca <mulacc+0x32>
     9b0:	db 01       	movw	r26, r22
     9b2:	fc 01       	movw	r30, r24
     9b4:	aa 0f       	add	r26, r26
     9b6:	bb 1f       	adc	r27, r27
     9b8:	ee 1f       	adc	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	10 94       	com	r1
     9be:	d1 f7       	brne	.-12     	; 0x9b4 <mulacc+0x1c>
     9c0:	6a 0f       	add	r22, r26
     9c2:	7b 1f       	adc	r23, r27
     9c4:	8e 1f       	adc	r24, r30
     9c6:	9f 1f       	adc	r25, r31
     9c8:	31 e0       	ldi	r19, 0x01	; 1
     9ca:	66 0f       	add	r22, r22
     9cc:	77 1f       	adc	r23, r23
     9ce:	88 1f       	adc	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	31 50       	subi	r19, 0x01	; 1
     9d4:	d1 f7       	brne	.-12     	; 0x9ca <mulacc+0x32>
     9d6:	7b 01       	movw	r14, r22
     9d8:	8c 01       	movw	r16, r24
     9da:	e2 0e       	add	r14, r18
     9dc:	f1 1c       	adc	r15, r1
     9de:	01 1d       	adc	r16, r1
     9e0:	11 1d       	adc	r17, r1
     9e2:	a8 01       	movw	r20, r16
     9e4:	97 01       	movw	r18, r14
     9e6:	b7 01       	movw	r22, r14
     9e8:	ca 01       	movw	r24, r20
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	08 95       	ret

000009f4 <skip_spaces>:
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	8c 01       	movw	r16, r24
     9fe:	c8 01       	movw	r24, r16
     a00:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     a04:	ec 01       	movw	r28, r24
     a06:	97 fd       	sbrc	r25, 7
     a08:	08 c0       	rjmp	.+16     	; 0xa1a <skip_spaces+0x26>
     a0a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <isspace>
     a0e:	89 2b       	or	r24, r25
     a10:	b1 f7       	brne	.-20     	; 0x9fe <skip_spaces+0xa>
     a12:	ce 01       	movw	r24, r28
     a14:	b8 01       	movw	r22, r16
     a16:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <ungetc>
     a1a:	ce 01       	movw	r24, r28
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <conv_int>:
     a26:	8f 92       	push	r8
     a28:	9f 92       	push	r9
     a2a:	af 92       	push	r10
     a2c:	bf 92       	push	r11
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	5c 01       	movw	r10, r24
     a3e:	eb 01       	movw	r28, r22
     a40:	4a 01       	movw	r8, r20
     a42:	12 2f       	mov	r17, r18
     a44:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     a48:	ac 01       	movw	r20, r24
     a4a:	8b 32       	cpi	r24, 0x2B	; 43
     a4c:	19 f0       	breq	.+6      	; 0xa54 <conv_int+0x2e>
     a4e:	8d 32       	cpi	r24, 0x2D	; 45
     a50:	51 f4       	brne	.+20     	; 0xa66 <conv_int+0x40>
     a52:	10 68       	ori	r17, 0x80	; 128
     a54:	21 97       	sbiw	r28, 0x01	; 1
     a56:	09 f4       	brne	.+2      	; 0xa5a <conv_int+0x34>
     a58:	6b c0       	rjmp	.+214    	; 0xb30 <conv_int+0x10a>
     a5a:	c5 01       	movw	r24, r10
     a5c:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     a60:	ac 01       	movw	r20, r24
     a62:	97 fd       	sbrc	r25, 7
     a64:	65 c0       	rjmp	.+202    	; 0xb30 <conv_int+0x10a>
     a66:	6d ef       	ldi	r22, 0xFD	; 253
     a68:	d6 2e       	mov	r13, r22
     a6a:	d1 22       	and	r13, r17
     a6c:	8d 2d       	mov	r24, r13
     a6e:	80 73       	andi	r24, 0x30	; 48
     a70:	01 f5       	brne	.+64     	; 0xab2 <conv_int+0x8c>
     a72:	40 33       	cpi	r20, 0x30	; 48
     a74:	f1 f4       	brne	.+60     	; 0xab2 <conv_int+0x8c>
     a76:	21 97       	sbiw	r28, 0x01	; 1
     a78:	09 f4       	brne	.+2      	; 0xa7c <conv_int+0x56>
     a7a:	46 c0       	rjmp	.+140    	; 0xb08 <conv_int+0xe2>
     a7c:	c5 01       	movw	r24, r10
     a7e:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     a82:	ac 01       	movw	r20, r24
     a84:	97 fd       	sbrc	r25, 7
     a86:	40 c0       	rjmp	.+128    	; 0xb08 <conv_int+0xe2>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	d8 2a       	or	r13, r24
     a8c:	48 37       	cpi	r20, 0x78	; 120
     a8e:	11 f0       	breq	.+4      	; 0xa94 <conv_int+0x6e>
     a90:	48 35       	cpi	r20, 0x58	; 88
     a92:	59 f4       	brne	.+22     	; 0xaaa <conv_int+0x84>
     a94:	80 e4       	ldi	r24, 0x40	; 64
     a96:	d8 2a       	or	r13, r24
     a98:	21 97       	sbiw	r28, 0x01	; 1
     a9a:	b1 f1       	breq	.+108    	; 0xb08 <conv_int+0xe2>
     a9c:	c5 01       	movw	r24, r10
     a9e:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     aa2:	ac 01       	movw	r20, r24
     aa4:	99 23       	and	r25, r25
     aa6:	2c f4       	brge	.+10     	; 0xab2 <conv_int+0x8c>
     aa8:	2f c0       	rjmp	.+94     	; 0xb08 <conv_int+0xe2>
     aaa:	d6 fc       	sbrc	r13, 6
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <conv_int+0x8c>
     aae:	80 e1       	ldi	r24, 0x10	; 16
     ab0:	d8 2a       	or	r13, r24
     ab2:	ee 24       	eor	r14, r14
     ab4:	ff 24       	eor	r15, r15
     ab6:	87 01       	movw	r16, r14
     ab8:	24 2f       	mov	r18, r20
     aba:	20 53       	subi	r18, 0x30	; 48
     abc:	28 30       	cpi	r18, 0x08	; 8
     abe:	88 f0       	brcs	.+34     	; 0xae2 <conv_int+0xbc>
     ac0:	d4 fc       	sbrc	r13, 4
     ac2:	09 c0       	rjmp	.+18     	; 0xad6 <conv_int+0xb0>
     ac4:	2a 30       	cpi	r18, 0x0A	; 10
     ac6:	68 f0       	brcs	.+26     	; 0xae2 <conv_int+0xbc>
     ac8:	d6 fe       	sbrs	r13, 6
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <conv_int+0xb0>
     acc:	2f 7d       	andi	r18, 0xDF	; 223
     ace:	82 2f       	mov	r24, r18
     ad0:	81 51       	subi	r24, 0x11	; 17
     ad2:	86 30       	cpi	r24, 0x06	; 6
     ad4:	28 f0       	brcs	.+10     	; 0xae0 <conv_int+0xba>
     ad6:	ca 01       	movw	r24, r20
     ad8:	b5 01       	movw	r22, r10
     ada:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <ungetc>
     ade:	11 c0       	rjmp	.+34     	; 0xb02 <conv_int+0xdc>
     ae0:	27 50       	subi	r18, 0x07	; 7
     ae2:	c8 01       	movw	r24, r16
     ae4:	b7 01       	movw	r22, r14
     ae6:	4d 2d       	mov	r20, r13
     ae8:	57 df       	rcall	.-338    	; 0x998 <mulacc>
     aea:	7b 01       	movw	r14, r22
     aec:	8c 01       	movw	r16, r24
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	d8 2a       	or	r13, r24
     af2:	21 97       	sbiw	r28, 0x01	; 1
     af4:	61 f0       	breq	.+24     	; 0xb0e <conv_int+0xe8>
     af6:	c5 01       	movw	r24, r10
     af8:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     afc:	ac 01       	movw	r20, r24
     afe:	97 ff       	sbrs	r25, 7
     b00:	db cf       	rjmp	.-74     	; 0xab8 <conv_int+0x92>
     b02:	d1 fc       	sbrc	r13, 1
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <conv_int+0xe8>
     b06:	14 c0       	rjmp	.+40     	; 0xb30 <conv_int+0x10a>
     b08:	ee 24       	eor	r14, r14
     b0a:	ff 24       	eor	r15, r15
     b0c:	87 01       	movw	r16, r14
     b0e:	d7 fe       	sbrs	r13, 7
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <conv_int+0xfc>
     b12:	10 95       	com	r17
     b14:	00 95       	com	r16
     b16:	f0 94       	com	r15
     b18:	e0 94       	com	r14
     b1a:	e1 1c       	adc	r14, r1
     b1c:	f1 1c       	adc	r15, r1
     b1e:	01 1d       	adc	r16, r1
     b20:	11 1d       	adc	r17, r1
     b22:	c4 01       	movw	r24, r8
     b24:	b8 01       	movw	r22, r16
     b26:	a7 01       	movw	r20, r14
     b28:	2d 2d       	mov	r18, r13
     b2a:	2a df       	rcall	.-428    	; 0x980 <putval>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <conv_int+0x10c>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	bf 90       	pop	r11
     b42:	af 90       	pop	r10
     b44:	9f 90       	pop	r9
     b46:	8f 90       	pop	r8
     b48:	08 95       	ret

00000b4a <conv_brk>:
     b4a:	6f 92       	push	r6
     b4c:	7f 92       	push	r7
     b4e:	8f 92       	push	r8
     b50:	9f 92       	push	r9
     b52:	af 92       	push	r10
     b54:	bf 92       	push	r11
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	a0 97       	sbiw	r28, 0x20	; 32
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	5c 01       	movw	r10, r24
     b78:	6b 01       	movw	r12, r22
     b7a:	8a 01       	movw	r16, r20
     b7c:	79 01       	movw	r14, r18
     b7e:	fe 01       	movw	r30, r28
     b80:	31 96       	adiw	r30, 0x01	; 1
     b82:	80 e2       	ldi	r24, 0x20	; 32
     b84:	df 01       	movw	r26, r30
     b86:	1d 92       	st	X+, r1
     b88:	8a 95       	dec	r24
     b8a:	e9 f7       	brne	.-6      	; 0xb86 <conv_brk+0x3c>
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	3f 01       	movw	r6, r30
     b98:	a1 e0       	ldi	r26, 0x01	; 1
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	f5 01       	movw	r30, r10
     b9e:	83 81       	ldd	r24, Z+3	; 0x03
     ba0:	f7 01       	movw	r30, r14
     ba2:	83 fd       	sbrc	r24, 3
     ba4:	25 91       	lpm	r18, Z+
     ba6:	83 ff       	sbrs	r24, 3
     ba8:	21 91       	ld	r18, Z+
     baa:	7f 01       	movw	r14, r30
     bac:	22 23       	and	r18, r18
     bae:	09 f4       	brne	.+2      	; 0xbb2 <conv_brk+0x68>
     bb0:	81 c0       	rjmp	.+258    	; 0xcb4 <conv_brk+0x16a>
     bb2:	2e 35       	cpi	r18, 0x5E	; 94
     bb4:	19 f4       	brne	.+6      	; 0xbbc <conv_brk+0x72>
     bb6:	41 15       	cp	r20, r1
     bb8:	51 05       	cpc	r21, r1
     bba:	69 f1       	breq	.+90     	; 0xc16 <conv_brk+0xcc>
     bbc:	87 2f       	mov	r24, r23
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	84 17       	cp	r24, r20
     bc2:	95 07       	cpc	r25, r21
     bc4:	44 f4       	brge	.+16     	; 0xbd6 <conv_brk+0x8c>
     bc6:	2d 35       	cpi	r18, 0x5D	; 93
     bc8:	51 f1       	breq	.+84     	; 0xc1e <conv_brk+0xd4>
     bca:	2d 32       	cpi	r18, 0x2D	; 45
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <conv_brk+0x8c>
     bce:	33 23       	and	r19, r19
     bd0:	29 f4       	brne	.+10     	; 0xbdc <conv_brk+0x92>
     bd2:	31 e0       	ldi	r19, 0x01	; 1
     bd4:	21 c0       	rjmp	.+66     	; 0xc18 <conv_brk+0xce>
     bd6:	33 23       	and	r19, r19
     bd8:	09 f4       	brne	.+2      	; 0xbdc <conv_brk+0x92>
     bda:	62 2f       	mov	r22, r18
     bdc:	32 2f       	mov	r19, r18
     bde:	83 2f       	mov	r24, r19
     be0:	86 95       	lsr	r24
     be2:	86 95       	lsr	r24
     be4:	86 95       	lsr	r24
     be6:	f3 01       	movw	r30, r6
     be8:	e8 0f       	add	r30, r24
     bea:	f1 1d       	adc	r31, r1
     bec:	83 2f       	mov	r24, r19
     bee:	87 70       	andi	r24, 0x07	; 7
     bf0:	4d 01       	movw	r8, r26
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <conv_brk+0xae>
     bf4:	88 0c       	add	r8, r8
     bf6:	99 1c       	adc	r9, r9
     bf8:	8a 95       	dec	r24
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <conv_brk+0xaa>
     bfc:	20 81       	ld	r18, Z
     bfe:	28 29       	or	r18, r8
     c00:	20 83       	st	Z, r18
     c02:	36 17       	cp	r19, r22
     c04:	11 f4       	brne	.+4      	; 0xc0a <conv_brk+0xc0>
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	07 c0       	rjmp	.+14     	; 0xc18 <conv_brk+0xce>
     c0a:	36 17       	cp	r19, r22
     c0c:	10 f4       	brcc	.+4      	; 0xc12 <conv_brk+0xc8>
     c0e:	3f 5f       	subi	r19, 0xFF	; 255
     c10:	e6 cf       	rjmp	.-52     	; 0xbde <conv_brk+0x94>
     c12:	31 50       	subi	r19, 0x01	; 1
     c14:	e4 cf       	rjmp	.-56     	; 0xbde <conv_brk+0x94>
     c16:	71 e0       	ldi	r23, 0x01	; 1
     c18:	4f 5f       	subi	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	bf cf       	rjmp	.-130    	; 0xb9c <conv_brk+0x52>
     c1e:	33 23       	and	r19, r19
     c20:	19 f0       	breq	.+6      	; 0xc28 <conv_brk+0xde>
     c22:	8e 81       	ldd	r24, Y+6	; 0x06
     c24:	80 62       	ori	r24, 0x20	; 32
     c26:	8e 83       	std	Y+6, r24	; 0x06
     c28:	77 23       	and	r23, r23
     c2a:	59 f0       	breq	.+22     	; 0xc42 <conv_brk+0xf8>
     c2c:	fe 01       	movw	r30, r28
     c2e:	31 96       	adiw	r30, 0x01	; 1
     c30:	9e 01       	movw	r18, r28
     c32:	2f 5d       	subi	r18, 0xDF	; 223
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	80 81       	ld	r24, Z
     c38:	80 95       	com	r24
     c3a:	81 93       	st	Z+, r24
     c3c:	e2 17       	cp	r30, r18
     c3e:	f3 07       	cpc	r31, r19
     c40:	d1 f7       	brne	.-12     	; 0xc36 <conv_brk+0xec>
     c42:	99 24       	eor	r9, r9
     c44:	93 94       	inc	r9
     c46:	3e 01       	movw	r6, r28
     c48:	08 94       	sec
     c4a:	61 1c       	adc	r6, r1
     c4c:	71 1c       	adc	r7, r1
     c4e:	c5 01       	movw	r24, r10
     c50:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     c54:	ac 01       	movw	r20, r24
     c56:	97 fd       	sbrc	r25, 7
     c58:	25 c0       	rjmp	.+74     	; 0xca4 <conv_brk+0x15a>
     c5a:	86 95       	lsr	r24
     c5c:	86 95       	lsr	r24
     c5e:	86 95       	lsr	r24
     c60:	f3 01       	movw	r30, r6
     c62:	e8 0f       	add	r30, r24
     c64:	f1 1d       	adc	r31, r1
     c66:	80 81       	ld	r24, Z
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	9a 01       	movw	r18, r20
     c6c:	27 70       	andi	r18, 0x07	; 7
     c6e:	30 70       	andi	r19, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <conv_brk+0x12c>
     c72:	95 95       	asr	r25
     c74:	87 95       	ror	r24
     c76:	2a 95       	dec	r18
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <conv_brk+0x128>
     c7a:	80 fd       	sbrc	r24, 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <conv_brk+0x13e>
     c7e:	ca 01       	movw	r24, r20
     c80:	b5 01       	movw	r22, r10
     c82:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <ungetc>
     c86:	0e c0       	rjmp	.+28     	; 0xca4 <conv_brk+0x15a>
     c88:	01 15       	cp	r16, r1
     c8a:	11 05       	cpc	r17, r1
     c8c:	19 f0       	breq	.+6      	; 0xc94 <conv_brk+0x14a>
     c8e:	d8 01       	movw	r26, r16
     c90:	4d 93       	st	X+, r20
     c92:	8d 01       	movw	r16, r26
     c94:	08 94       	sec
     c96:	c1 08       	sbc	r12, r1
     c98:	d1 08       	sbc	r13, r1
     c9a:	99 24       	eor	r9, r9
     c9c:	c1 14       	cp	r12, r1
     c9e:	d1 04       	cpc	r13, r1
     ca0:	b1 f6       	brne	.-84     	; 0xc4e <conv_brk+0x104>
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <conv_brk+0x15e>
     ca4:	99 20       	and	r9, r9
     ca6:	31 f4       	brne	.+12     	; 0xcb4 <conv_brk+0x16a>
     ca8:	01 15       	cp	r16, r1
     caa:	11 05       	cpc	r17, r1
     cac:	29 f0       	breq	.+10     	; 0xcb8 <conv_brk+0x16e>
     cae:	f8 01       	movw	r30, r16
     cb0:	10 82       	st	Z, r1
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <conv_brk+0x16e>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	c7 01       	movw	r24, r14
     cba:	a0 96       	adiw	r28, 0x20	; 32
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	cf 90       	pop	r12
     cd6:	bf 90       	pop	r11
     cd8:	af 90       	pop	r10
     cda:	9f 90       	pop	r9
     cdc:	8f 90       	pop	r8
     cde:	7f 90       	pop	r7
     ce0:	6f 90       	pop	r6
     ce2:	08 95       	ret

00000ce4 <conv_flt>:
     ce4:	2f 92       	push	r2
     ce6:	3f 92       	push	r3
     ce8:	5f 92       	push	r5
     cea:	6f 92       	push	r6
     cec:	7f 92       	push	r7
     cee:	8f 92       	push	r8
     cf0:	9f 92       	push	r9
     cf2:	af 92       	push	r10
     cf4:	bf 92       	push	r11
     cf6:	cf 92       	push	r12
     cf8:	df 92       	push	r13
     cfa:	ef 92       	push	r14
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	3c 01       	movw	r6, r24
     d08:	7b 01       	movw	r14, r22
     d0a:	1a 01       	movw	r2, r20
     d0c:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     d10:	ec 01       	movw	r28, r24
     d12:	8b 32       	cpi	r24, 0x2B	; 43
     d14:	39 f0       	breq	.+14     	; 0xd24 <conv_flt+0x40>
     d16:	8d 32       	cpi	r24, 0x2D	; 45
     d18:	11 f0       	breq	.+4      	; 0xd1e <conv_flt+0x3a>
     d1a:	55 24       	eor	r5, r5
     d1c:	11 c0       	rjmp	.+34     	; 0xd40 <conv_flt+0x5c>
     d1e:	b0 e8       	ldi	r27, 0x80	; 128
     d20:	5b 2e       	mov	r5, r27
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <conv_flt+0x42>
     d24:	55 24       	eor	r5, r5
     d26:	08 94       	sec
     d28:	e1 08       	sbc	r14, r1
     d2a:	f1 08       	sbc	r15, r1
     d2c:	e1 14       	cp	r14, r1
     d2e:	f1 04       	cpc	r15, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <conv_flt+0x50>
     d32:	14 c1       	rjmp	.+552    	; 0xf5c <conv_flt+0x278>
     d34:	c3 01       	movw	r24, r6
     d36:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     d3a:	ec 01       	movw	r28, r24
     d3c:	97 fd       	sbrc	r25, 7
     d3e:	0e c1       	rjmp	.+540    	; 0xf5c <conv_flt+0x278>
     d40:	ce 01       	movw	r24, r28
     d42:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <tolower>
     d46:	89 36       	cpi	r24, 0x69	; 105
     d48:	91 05       	cpc	r25, r1
     d4a:	21 f0       	breq	.+8      	; 0xd54 <conv_flt+0x70>
     d4c:	8e 36       	cpi	r24, 0x6E	; 110
     d4e:	91 05       	cpc	r25, r1
     d50:	99 f5       	brne	.+102    	; 0xdb8 <conv_flt+0xd4>
     d52:	1d c0       	rjmp	.+58     	; 0xd8e <conv_flt+0xaa>
     d54:	09 ea       	ldi	r16, 0xA9	; 169
     d56:	10 e0       	ldi	r17, 0x00	; 0
     d58:	1c c0       	rjmp	.+56     	; 0xd92 <conv_flt+0xae>
     d5a:	08 94       	sec
     d5c:	e1 08       	sbc	r14, r1
     d5e:	f1 08       	sbc	r15, r1
     d60:	e1 14       	cp	r14, r1
     d62:	f1 04       	cpc	r15, r1
     d64:	71 f0       	breq	.+28     	; 0xd82 <conv_flt+0x9e>
     d66:	c3 01       	movw	r24, r6
     d68:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     d6c:	ec 01       	movw	r28, r24
     d6e:	97 fd       	sbrc	r25, 7
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <conv_flt+0x9e>
     d72:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <tolower>
     d76:	d8 16       	cp	r13, r24
     d78:	61 f0       	breq	.+24     	; 0xd92 <conv_flt+0xae>
     d7a:	ce 01       	movw	r24, r28
     d7c:	b3 01       	movw	r22, r6
     d7e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <ungetc>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	0c 3a       	cpi	r16, 0xAC	; 172
     d86:	12 07       	cpc	r17, r18
     d88:	09 f0       	breq	.+2      	; 0xd8c <conv_flt+0xa8>
     d8a:	e8 c0       	rjmp	.+464    	; 0xf5c <conv_flt+0x278>
     d8c:	08 c0       	rjmp	.+16     	; 0xd9e <conv_flt+0xba>
     d8e:	06 ea       	ldi	r16, 0xA6	; 166
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	f8 01       	movw	r30, r16
     d94:	0f 5f       	subi	r16, 0xFF	; 255
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	d4 90       	lpm	r13, Z+
     d9a:	dd 20       	and	r13, r13
     d9c:	f1 f6       	brne	.-68     	; 0xd5a <conv_flt+0x76>
     d9e:	09 5a       	subi	r16, 0xA9	; 169
     da0:	10 40       	sbci	r17, 0x00	; 0
     da2:	29 f0       	breq	.+10     	; 0xdae <conv_flt+0xca>
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	a0 e8       	ldi	r26, 0x80	; 128
     daa:	bf e7       	ldi	r27, 0x7F	; 127
     dac:	cb c0       	rjmp	.+406    	; 0xf44 <conv_flt+0x260>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 ec       	ldi	r26, 0xC0	; 192
     db4:	bf e7       	ldi	r27, 0x7F	; 127
     db6:	c6 c0       	rjmp	.+396    	; 0xf44 <conv_flt+0x260>
     db8:	cc 24       	eor	r12, r12
     dba:	dd 24       	eor	r13, r13
     dbc:	88 24       	eor	r8, r8
     dbe:	99 24       	eor	r9, r9
     dc0:	54 01       	movw	r10, r8
     dc2:	ae 01       	movw	r20, r28
     dc4:	40 53       	subi	r20, 0x30	; 48
     dc6:	24 2f       	mov	r18, r20
     dc8:	4a 30       	cpi	r20, 0x0A	; 10
     dca:	30 f5       	brcc	.+76     	; 0xe18 <conv_flt+0x134>
     dcc:	52 e0       	ldi	r21, 0x02	; 2
     dce:	55 2a       	or	r5, r21
     dd0:	85 2d       	mov	r24, r5
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	ac 01       	movw	r20, r24
     dd6:	48 70       	andi	r20, 0x08	; 8
     dd8:	50 70       	andi	r21, 0x00	; 0
     dda:	52 fe       	sbrs	r5, 2
     ddc:	06 c0       	rjmp	.+12     	; 0xdea <conv_flt+0x106>
     dde:	45 2b       	or	r20, r21
     de0:	09 f5       	brne	.+66     	; 0xe24 <conv_flt+0x140>
     de2:	08 94       	sec
     de4:	c1 1c       	adc	r12, r1
     de6:	d1 1c       	adc	r13, r1
     de8:	1d c0       	rjmp	.+58     	; 0xe24 <conv_flt+0x140>
     dea:	45 2b       	or	r20, r21
     dec:	19 f0       	breq	.+6      	; 0xdf4 <conv_flt+0x110>
     dee:	08 94       	sec
     df0:	c1 08       	sbc	r12, r1
     df2:	d1 08       	sbc	r13, r1
     df4:	c5 01       	movw	r24, r10
     df6:	b4 01       	movw	r22, r8
     df8:	40 e2       	ldi	r20, 0x20	; 32
     dfa:	ce dd       	rcall	.-1124   	; 0x998 <mulacc>
     dfc:	4b 01       	movw	r8, r22
     dfe:	5c 01       	movw	r10, r24
     e00:	88 e9       	ldi	r24, 0x98	; 152
     e02:	88 16       	cp	r8, r24
     e04:	89 e9       	ldi	r24, 0x99	; 153
     e06:	98 06       	cpc	r9, r24
     e08:	89 e9       	ldi	r24, 0x99	; 153
     e0a:	a8 06       	cpc	r10, r24
     e0c:	89 e1       	ldi	r24, 0x19	; 25
     e0e:	b8 06       	cpc	r11, r24
     e10:	48 f0       	brcs	.+18     	; 0xe24 <conv_flt+0x140>
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	59 2a       	or	r5, r25
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <conv_flt+0x140>
     e18:	4e 3f       	cpi	r20, 0xFE	; 254
     e1a:	81 f4       	brne	.+32     	; 0xe3c <conv_flt+0x158>
     e1c:	53 fc       	sbrc	r5, 3
     e1e:	0e c0       	rjmp	.+28     	; 0xe3c <conv_flt+0x158>
     e20:	e8 e0       	ldi	r30, 0x08	; 8
     e22:	5e 2a       	or	r5, r30
     e24:	08 94       	sec
     e26:	e1 08       	sbc	r14, r1
     e28:	f1 08       	sbc	r15, r1
     e2a:	e1 14       	cp	r14, r1
     e2c:	f1 04       	cpc	r15, r1
     e2e:	31 f0       	breq	.+12     	; 0xe3c <conv_flt+0x158>
     e30:	c3 01       	movw	r24, r6
     e32:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     e36:	ec 01       	movw	r28, r24
     e38:	97 ff       	sbrs	r25, 7
     e3a:	c3 cf       	rjmp	.-122    	; 0xdc2 <conv_flt+0xde>
     e3c:	51 fe       	sbrs	r5, 1
     e3e:	8e c0       	rjmp	.+284    	; 0xf5c <conv_flt+0x278>
     e40:	c5 36       	cpi	r28, 0x65	; 101
     e42:	19 f0       	breq	.+6      	; 0xe4a <conv_flt+0x166>
     e44:	c5 34       	cpi	r28, 0x45	; 69
     e46:	09 f0       	breq	.+2      	; 0xe4a <conv_flt+0x166>
     e48:	45 c0       	rjmp	.+138    	; 0xed4 <conv_flt+0x1f0>
     e4a:	08 94       	sec
     e4c:	e1 08       	sbc	r14, r1
     e4e:	f1 08       	sbc	r15, r1
     e50:	e1 14       	cp	r14, r1
     e52:	f1 04       	cpc	r15, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <conv_flt+0x174>
     e56:	82 c0       	rjmp	.+260    	; 0xf5c <conv_flt+0x278>
     e58:	c3 01       	movw	r24, r6
     e5a:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     e5e:	ec 01       	movw	r28, r24
     e60:	97 fd       	sbrc	r25, 7
     e62:	7c c0       	rjmp	.+248    	; 0xf5c <conv_flt+0x278>
     e64:	8b 32       	cpi	r24, 0x2B	; 43
     e66:	21 f0       	breq	.+8      	; 0xe70 <conv_flt+0x18c>
     e68:	8d 32       	cpi	r24, 0x2D	; 45
     e6a:	69 f4       	brne	.+26     	; 0xe86 <conv_flt+0x1a2>
     e6c:	f0 e1       	ldi	r31, 0x10	; 16
     e6e:	5f 2a       	or	r5, r31
     e70:	08 94       	sec
     e72:	e1 08       	sbc	r14, r1
     e74:	f1 08       	sbc	r15, r1
     e76:	e1 14       	cp	r14, r1
     e78:	f1 04       	cpc	r15, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <conv_flt+0x19a>
     e7c:	6f c0       	rjmp	.+222    	; 0xf5c <conv_flt+0x278>
     e7e:	c3 01       	movw	r24, r6
     e80:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     e84:	ec 01       	movw	r28, r24
     e86:	ce 01       	movw	r24, r28
     e88:	c0 97       	sbiw	r24, 0x30	; 48
     e8a:	0a 97       	sbiw	r24, 0x0a	; 10
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <conv_flt+0x1ac>
     e8e:	66 c0       	rjmp	.+204    	; 0xf5c <conv_flt+0x278>
     e90:	00 e0       	ldi	r16, 0x00	; 0
     e92:	10 e0       	ldi	r17, 0x00	; 0
     e94:	b8 01       	movw	r22, r16
     e96:	88 27       	eor	r24, r24
     e98:	77 fd       	sbrc	r23, 7
     e9a:	80 95       	com	r24
     e9c:	98 2f       	mov	r25, r24
     e9e:	ae 01       	movw	r20, r28
     ea0:	40 53       	subi	r20, 0x30	; 48
     ea2:	24 2f       	mov	r18, r20
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	78 dd       	rcall	.-1296   	; 0x998 <mulacc>
     ea8:	8b 01       	movw	r16, r22
     eaa:	08 94       	sec
     eac:	e1 08       	sbc	r14, r1
     eae:	f1 08       	sbc	r15, r1
     eb0:	e1 14       	cp	r14, r1
     eb2:	f1 04       	cpc	r15, r1
     eb4:	39 f0       	breq	.+14     	; 0xec4 <conv_flt+0x1e0>
     eb6:	c3 01       	movw	r24, r6
     eb8:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     ebc:	ec 01       	movw	r28, r24
     ebe:	c0 97       	sbiw	r24, 0x30	; 48
     ec0:	0a 97       	sbiw	r24, 0x0a	; 10
     ec2:	40 f3       	brcs	.-48     	; 0xe94 <conv_flt+0x1b0>
     ec4:	b8 01       	movw	r22, r16
     ec6:	54 fe       	sbrs	r5, 4
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <conv_flt+0x1ec>
     eca:	70 95       	com	r23
     ecc:	61 95       	neg	r22
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	c6 0e       	add	r12, r22
     ed2:	d7 1e       	adc	r13, r23
     ed4:	ef 28       	or	r14, r15
     ed6:	31 f0       	breq	.+12     	; 0xee4 <conv_flt+0x200>
     ed8:	d7 fd       	sbrc	r29, 7
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <conv_flt+0x200>
     edc:	ce 01       	movw	r24, r28
     ede:	b3 01       	movw	r22, r6
     ee0:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <ungetc>
     ee4:	c5 01       	movw	r24, r10
     ee6:	b4 01       	movw	r22, r8
     ee8:	84 d1       	rcall	.+776    	; 0x11f2 <__floatunsisf>
     eea:	d7 fe       	sbrs	r13, 7
     eec:	0d c0       	rjmp	.+26     	; 0xf08 <conv_flt+0x224>
     eee:	a5 ec       	ldi	r26, 0xC5	; 197
     ef0:	ea 2e       	mov	r14, r26
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	fa 2e       	mov	r15, r26
     ef6:	d0 94       	com	r13
     ef8:	c1 94       	neg	r12
     efa:	d1 08       	sbc	r13, r1
     efc:	d3 94       	inc	r13
     efe:	c0 e2       	ldi	r28, 0x20	; 32
     f00:	d0 e0       	ldi	r29, 0x00	; 0
     f02:	00 e0       	ldi	r16, 0x00	; 0
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	0d c0       	rjmp	.+26     	; 0xf22 <conv_flt+0x23e>
     f08:	fd ed       	ldi	r31, 0xDD	; 221
     f0a:	ef 2e       	mov	r14, r31
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	ff 2e       	mov	r15, r31
     f10:	f6 cf       	rjmp	.-20     	; 0xefe <conv_flt+0x21a>
     f12:	f7 01       	movw	r30, r14
     f14:	25 91       	lpm	r18, Z+
     f16:	35 91       	lpm	r19, Z+
     f18:	45 91       	lpm	r20, Z+
     f1a:	54 91       	lpm	r21, Z+
     f1c:	a7 d1       	rcall	.+846    	; 0x126c <__mulsf3>
     f1e:	cc 1a       	sub	r12, r28
     f20:	dd 0a       	sbc	r13, r29
     f22:	cc 16       	cp	r12, r28
     f24:	dd 06       	cpc	r13, r29
     f26:	a8 f7       	brcc	.-22     	; 0xf12 <conv_flt+0x22e>
     f28:	d6 95       	lsr	r29
     f2a:	c7 95       	ror	r28
     f2c:	0f 5f       	subi	r16, 0xFF	; 255
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	06 30       	cpi	r16, 0x06	; 6
     f32:	11 05       	cpc	r17, r1
     f34:	29 f0       	breq	.+10     	; 0xf40 <conv_flt+0x25c>
     f36:	ec ef       	ldi	r30, 0xFC	; 252
     f38:	ff ef       	ldi	r31, 0xFF	; 255
     f3a:	ee 0e       	add	r14, r30
     f3c:	ff 1e       	adc	r15, r31
     f3e:	f1 cf       	rjmp	.-30     	; 0xf22 <conv_flt+0x23e>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	57 fc       	sbrc	r5, 7
     f46:	b0 58       	subi	r27, 0x80	; 128
     f48:	21 14       	cp	r2, r1
     f4a:	31 04       	cpc	r3, r1
     f4c:	29 f0       	breq	.+10     	; 0xf58 <conv_flt+0x274>
     f4e:	f1 01       	movw	r30, r2
     f50:	80 83       	st	Z, r24
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	a2 83       	std	Z+2, r26	; 0x02
     f56:	b3 83       	std	Z+3, r27	; 0x03
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <conv_flt+0x27a>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	bf 90       	pop	r11
     f70:	af 90       	pop	r10
     f72:	9f 90       	pop	r9
     f74:	8f 90       	pop	r8
     f76:	7f 90       	pop	r7
     f78:	6f 90       	pop	r6
     f7a:	5f 90       	pop	r5
     f7c:	3f 90       	pop	r3
     f7e:	2f 90       	pop	r2
     f80:	08 95       	ret

00000f82 <vfscanf>:
     f82:	5f 92       	push	r5
     f84:	6f 92       	push	r6
     f86:	7f 92       	push	r7
     f88:	8f 92       	push	r8
     f8a:	9f 92       	push	r9
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	4c 01       	movw	r8, r24
     fa2:	5b 01       	movw	r10, r22
     fa4:	3a 01       	movw	r6, r20
     fa6:	fc 01       	movw	r30, r24
     fa8:	17 82       	std	Z+7, r1	; 0x07
     faa:	16 82       	std	Z+6, r1	; 0x06
     fac:	55 24       	eor	r5, r5
     fae:	fd c0       	rjmp	.+506    	; 0x11aa <__stack+0xab>
     fb0:	81 2f       	mov	r24, r17
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <isspace>
     fb8:	89 2b       	or	r24, r25
     fba:	19 f0       	breq	.+6      	; 0xfc2 <vfscanf+0x40>
     fbc:	c4 01       	movw	r24, r8
     fbe:	1a dd       	rcall	.-1484   	; 0x9f4 <skip_spaces>
     fc0:	f4 c0       	rjmp	.+488    	; 0x11aa <__stack+0xab>
     fc2:	15 32       	cpi	r17, 0x25	; 37
     fc4:	49 f4       	brne	.+18     	; 0xfd8 <vfscanf+0x56>
     fc6:	f5 01       	movw	r30, r10
     fc8:	f3 fc       	sbrc	r15, 3
     fca:	65 91       	lpm	r22, Z+
     fcc:	f3 fe       	sbrs	r15, 3
     fce:	61 91       	ld	r22, Z+
     fd0:	5f 01       	movw	r10, r30
     fd2:	65 32       	cpi	r22, 0x25	; 37
     fd4:	69 f4       	brne	.+26     	; 0xff0 <vfscanf+0x6e>
     fd6:	15 e2       	ldi	r17, 0x25	; 37
     fd8:	c4 01       	movw	r24, r8
     fda:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
     fde:	97 fd       	sbrc	r25, 7
     fe0:	f0 c0       	rjmp	.+480    	; 0x11c2 <__stack+0xc3>
     fe2:	18 17       	cp	r17, r24
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <vfscanf+0x66>
     fe6:	e1 c0       	rjmp	.+450    	; 0x11aa <__stack+0xab>
     fe8:	b4 01       	movw	r22, r8
     fea:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <ungetc>
     fee:	ee c0       	rjmp	.+476    	; 0x11cc <__stack+0xcd>
     ff0:	6a 32       	cpi	r22, 0x2A	; 42
     ff2:	19 f0       	breq	.+6      	; 0xffa <vfscanf+0x78>
     ff4:	16 2f       	mov	r17, r22
     ff6:	00 e0       	ldi	r16, 0x00	; 0
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <vfscanf+0x84>
     ffa:	f3 fc       	sbrc	r15, 3
     ffc:	15 91       	lpm	r17, Z+
     ffe:	f3 fe       	sbrs	r15, 3
    1000:	11 91       	ld	r17, Z+
    1002:	5f 01       	movw	r10, r30
    1004:	01 e0       	ldi	r16, 0x01	; 1
    1006:	cc 24       	eor	r12, r12
    1008:	dd 24       	eor	r13, r13
    100a:	0d c0       	rjmp	.+26     	; 0x1026 <vfscanf+0xa4>
    100c:	02 60       	ori	r16, 0x02	; 2
    100e:	b6 01       	movw	r22, r12
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	c0 dc       	rcall	.-1664   	; 0x998 <mulacc>
    1018:	6b 01       	movw	r12, r22
    101a:	f5 01       	movw	r30, r10
    101c:	f3 fc       	sbrc	r15, 3
    101e:	15 91       	lpm	r17, Z+
    1020:	f3 fe       	sbrs	r15, 3
    1022:	11 91       	ld	r17, Z+
    1024:	5f 01       	movw	r10, r30
    1026:	21 2f       	mov	r18, r17
    1028:	20 53       	subi	r18, 0x30	; 48
    102a:	2a 30       	cpi	r18, 0x0A	; 10
    102c:	78 f3       	brcs	.-34     	; 0x100c <vfscanf+0x8a>
    102e:	01 fd       	sbrc	r16, 1
    1030:	04 c0       	rjmp	.+8      	; 0x103a <vfscanf+0xb8>
    1032:	cc 24       	eor	r12, r12
    1034:	ca 94       	dec	r12
    1036:	dc 2c       	mov	r13, r12
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <vfscanf+0xc0>
    103a:	c1 14       	cp	r12, r1
    103c:	d1 04       	cpc	r13, r1
    103e:	09 f4       	brne	.+2      	; 0x1042 <vfscanf+0xc0>
    1040:	c5 c0       	rjmp	.+394    	; 0x11cc <__stack+0xcd>
    1042:	18 36       	cpi	r17, 0x68	; 104
    1044:	21 f0       	breq	.+8      	; 0x104e <vfscanf+0xcc>
    1046:	1c 36       	cpi	r17, 0x6C	; 108
    1048:	99 f4       	brne	.+38     	; 0x1070 <vfscanf+0xee>
    104a:	f5 01       	movw	r30, r10
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <vfscanf+0xe2>
    104e:	f5 01       	movw	r30, r10
    1050:	f3 fc       	sbrc	r15, 3
    1052:	65 91       	lpm	r22, Z+
    1054:	f3 fe       	sbrs	r15, 3
    1056:	61 91       	ld	r22, Z+
    1058:	68 36       	cpi	r22, 0x68	; 104
    105a:	19 f0       	breq	.+6      	; 0x1062 <vfscanf+0xe0>
    105c:	5f 01       	movw	r10, r30
    105e:	16 2f       	mov	r17, r22
    1060:	07 c0       	rjmp	.+14     	; 0x1070 <vfscanf+0xee>
    1062:	08 60       	ori	r16, 0x08	; 8
    1064:	04 60       	ori	r16, 0x04	; 4
    1066:	f3 fc       	sbrc	r15, 3
    1068:	15 91       	lpm	r17, Z+
    106a:	f3 fe       	sbrs	r15, 3
    106c:	11 91       	ld	r17, Z+
    106e:	5f 01       	movw	r10, r30
    1070:	11 23       	and	r17, r17
    1072:	09 f4       	brne	.+2      	; 0x1076 <vfscanf+0xf4>
    1074:	ab c0       	rjmp	.+342    	; 0x11cc <__stack+0xcd>
    1076:	84 e9       	ldi	r24, 0x94	; 148
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	61 2f       	mov	r22, r17
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	0e 94 04 11 	call	0x2208	; 0x2208 <strchr_P>
    1082:	89 2b       	or	r24, r25
    1084:	09 f4       	brne	.+2      	; 0x1088 <vfscanf+0x106>
    1086:	a2 c0       	rjmp	.+324    	; 0x11cc <__stack+0xcd>
    1088:	80 2f       	mov	r24, r16
    108a:	00 ff       	sbrs	r16, 0
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <vfscanf+0x112>
    108e:	ee 24       	eor	r14, r14
    1090:	ff 24       	eor	r15, r15
    1092:	07 c0       	rjmp	.+14     	; 0x10a2 <vfscanf+0x120>
    1094:	f3 01       	movw	r30, r6
    1096:	e0 80       	ld	r14, Z
    1098:	f1 80       	ldd	r15, Z+1	; 0x01
    109a:	22 e0       	ldi	r18, 0x02	; 2
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	62 0e       	add	r6, r18
    10a0:	73 1e       	adc	r7, r19
    10a2:	1e 36       	cpi	r17, 0x6E	; 110
    10a4:	49 f4       	brne	.+18     	; 0x10b8 <vfscanf+0x136>
    10a6:	f4 01       	movw	r30, r8
    10a8:	46 81       	ldd	r20, Z+6	; 0x06
    10aa:	57 81       	ldd	r21, Z+7	; 0x07
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	c7 01       	movw	r24, r14
    10b2:	20 2f       	mov	r18, r16
    10b4:	65 dc       	rcall	.-1846   	; 0x980 <putval>
    10b6:	79 c0       	rjmp	.+242    	; 0x11aa <__stack+0xab>
    10b8:	13 36       	cpi	r17, 0x63	; 99
    10ba:	b9 f4       	brne	.+46     	; 0x10ea <vfscanf+0x168>
    10bc:	81 fd       	sbrc	r24, 1
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <vfscanf+0x144>
    10c0:	11 e0       	ldi	r17, 0x01	; 1
    10c2:	c1 2e       	mov	r12, r17
    10c4:	d1 2c       	mov	r13, r1
    10c6:	c4 01       	movw	r24, r8
    10c8:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
    10cc:	97 fd       	sbrc	r25, 7
    10ce:	79 c0       	rjmp	.+242    	; 0x11c2 <__stack+0xc3>
    10d0:	e1 14       	cp	r14, r1
    10d2:	f1 04       	cpc	r15, r1
    10d4:	19 f0       	breq	.+6      	; 0x10dc <vfscanf+0x15a>
    10d6:	f7 01       	movw	r30, r14
    10d8:	81 93       	st	Z+, r24
    10da:	7f 01       	movw	r14, r30
    10dc:	08 94       	sec
    10de:	c1 08       	sbc	r12, r1
    10e0:	d1 08       	sbc	r13, r1
    10e2:	c1 14       	cp	r12, r1
    10e4:	d1 04       	cpc	r13, r1
    10e6:	79 f7       	brne	.-34     	; 0x10c6 <vfscanf+0x144>
    10e8:	5e c0       	rjmp	.+188    	; 0x11a6 <__stack+0xa7>
    10ea:	1b 35       	cpi	r17, 0x5B	; 91
    10ec:	51 f4       	brne	.+20     	; 0x1102 <__stack+0x3>
    10ee:	c4 01       	movw	r24, r8
    10f0:	b6 01       	movw	r22, r12
    10f2:	a7 01       	movw	r20, r14
    10f4:	95 01       	movw	r18, r10
    10f6:	29 dd       	rcall	.-1454   	; 0xb4a <conv_brk>
    10f8:	5c 01       	movw	r10, r24
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	09 f0       	breq	.+2      	; 0x1100 <__stack+0x1>
    10fe:	53 c0       	rjmp	.+166    	; 0x11a6 <__stack+0xa7>
    1100:	4d c0       	rjmp	.+154    	; 0x119c <__stack+0x9d>
    1102:	c4 01       	movw	r24, r8
    1104:	77 dc       	rcall	.-1810   	; 0x9f4 <skip_spaces>
    1106:	97 fd       	sbrc	r25, 7
    1108:	5c c0       	rjmp	.+184    	; 0x11c2 <__stack+0xc3>
    110a:	1f 36       	cpi	r17, 0x6F	; 111
    110c:	d1 f1       	breq	.+116    	; 0x1182 <__stack+0x83>
    110e:	10 37       	cpi	r17, 0x70	; 112
    1110:	38 f4       	brcc	.+14     	; 0x1120 <__stack+0x21>
    1112:	14 36       	cpi	r17, 0x64	; 100
    1114:	a1 f1       	breq	.+104    	; 0x117e <__stack+0x7f>
    1116:	19 36       	cpi	r17, 0x69	; 105
    1118:	a9 f1       	breq	.+106    	; 0x1184 <__stack+0x85>
    111a:	18 35       	cpi	r17, 0x58	; 88
    111c:	c9 f5       	brne	.+114    	; 0x1190 <__stack+0x91>
    111e:	2d c0       	rjmp	.+90     	; 0x117a <__stack+0x7b>
    1120:	13 37       	cpi	r17, 0x73	; 115
    1122:	51 f0       	breq	.+20     	; 0x1138 <__stack+0x39>
    1124:	14 37       	cpi	r17, 0x74	; 116
    1126:	18 f4       	brcc	.+6      	; 0x112e <__stack+0x2f>
    1128:	10 37       	cpi	r17, 0x70	; 112
    112a:	91 f5       	brne	.+100    	; 0x1190 <__stack+0x91>
    112c:	26 c0       	rjmp	.+76     	; 0x117a <__stack+0x7b>
    112e:	15 37       	cpi	r17, 0x75	; 117
    1130:	31 f1       	breq	.+76     	; 0x117e <__stack+0x7f>
    1132:	18 37       	cpi	r17, 0x78	; 120
    1134:	69 f5       	brne	.+90     	; 0x1190 <__stack+0x91>
    1136:	21 c0       	rjmp	.+66     	; 0x117a <__stack+0x7b>
    1138:	c4 01       	movw	r24, r8
    113a:	0e 94 25 11 	call	0x224a	; 0x224a <fgetc>
    113e:	ec 01       	movw	r28, r24
    1140:	97 fd       	sbrc	r25, 7
    1142:	15 c0       	rjmp	.+42     	; 0x116e <__stack+0x6f>
    1144:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <isspace>
    1148:	89 2b       	or	r24, r25
    114a:	29 f0       	breq	.+10     	; 0x1156 <__stack+0x57>
    114c:	ce 01       	movw	r24, r28
    114e:	b4 01       	movw	r22, r8
    1150:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <ungetc>
    1154:	0c c0       	rjmp	.+24     	; 0x116e <__stack+0x6f>
    1156:	e1 14       	cp	r14, r1
    1158:	f1 04       	cpc	r15, r1
    115a:	19 f0       	breq	.+6      	; 0x1162 <__stack+0x63>
    115c:	f7 01       	movw	r30, r14
    115e:	c1 93       	st	Z+, r28
    1160:	7f 01       	movw	r14, r30
    1162:	08 94       	sec
    1164:	c1 08       	sbc	r12, r1
    1166:	d1 08       	sbc	r13, r1
    1168:	c1 14       	cp	r12, r1
    116a:	d1 04       	cpc	r13, r1
    116c:	29 f7       	brne	.-54     	; 0x1138 <__stack+0x39>
    116e:	e1 14       	cp	r14, r1
    1170:	f1 04       	cpc	r15, r1
    1172:	c9 f0       	breq	.+50     	; 0x11a6 <__stack+0xa7>
    1174:	f7 01       	movw	r30, r14
    1176:	10 82       	st	Z, r1
    1178:	16 c0       	rjmp	.+44     	; 0x11a6 <__stack+0xa7>
    117a:	00 64       	ori	r16, 0x40	; 64
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <__stack+0x85>
    117e:	00 62       	ori	r16, 0x20	; 32
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <__stack+0x85>
    1182:	00 61       	ori	r16, 0x10	; 16
    1184:	c4 01       	movw	r24, r8
    1186:	b6 01       	movw	r22, r12
    1188:	a7 01       	movw	r20, r14
    118a:	20 2f       	mov	r18, r16
    118c:	4c dc       	rcall	.-1896   	; 0xa26 <conv_int>
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <__stack+0x99>
    1190:	c4 01       	movw	r24, r8
    1192:	b6 01       	movw	r22, r12
    1194:	a7 01       	movw	r20, r14
    1196:	a6 dd       	rcall	.-1204   	; 0xce4 <conv_flt>
    1198:	88 23       	and	r24, r24
    119a:	29 f4       	brne	.+10     	; 0x11a6 <__stack+0xa7>
    119c:	f4 01       	movw	r30, r8
    119e:	83 81       	ldd	r24, Z+3	; 0x03
    11a0:	80 73       	andi	r24, 0x30	; 48
    11a2:	79 f4       	brne	.+30     	; 0x11c2 <__stack+0xc3>
    11a4:	13 c0       	rjmp	.+38     	; 0x11cc <__stack+0xcd>
    11a6:	00 ff       	sbrs	r16, 0
    11a8:	53 94       	inc	r5
    11aa:	f4 01       	movw	r30, r8
    11ac:	f3 80       	ldd	r15, Z+3	; 0x03
    11ae:	f5 01       	movw	r30, r10
    11b0:	f3 fc       	sbrc	r15, 3
    11b2:	15 91       	lpm	r17, Z+
    11b4:	f3 fe       	sbrs	r15, 3
    11b6:	11 91       	ld	r17, Z+
    11b8:	5f 01       	movw	r10, r30
    11ba:	11 23       	and	r17, r17
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <__stack+0xc1>
    11be:	f8 ce       	rjmp	.-528    	; 0xfb0 <vfscanf+0x2e>
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <__stack+0xcd>
    11c2:	55 20       	and	r5, r5
    11c4:	19 f4       	brne	.+6      	; 0x11cc <__stack+0xcd>
    11c6:	2f ef       	ldi	r18, 0xFF	; 255
    11c8:	3f ef       	ldi	r19, 0xFF	; 255
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <__stack+0xd1>
    11cc:	25 2d       	mov	r18, r5
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	c9 01       	movw	r24, r18
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	9f 90       	pop	r9
    11e8:	8f 90       	pop	r8
    11ea:	7f 90       	pop	r7
    11ec:	6f 90       	pop	r6
    11ee:	5f 90       	pop	r5
    11f0:	08 95       	ret

000011f2 <__floatunsisf>:
    11f2:	e8 94       	clt
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <__floatsisf+0x12>

000011f6 <__floatsisf>:
    11f6:	97 fb       	bst	r25, 7
    11f8:	3e f4       	brtc	.+14     	; 0x1208 <__floatsisf+0x12>
    11fa:	90 95       	com	r25
    11fc:	80 95       	com	r24
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	99 23       	and	r25, r25
    120a:	a9 f0       	breq	.+42     	; 0x1236 <__floatsisf+0x40>
    120c:	f9 2f       	mov	r31, r25
    120e:	96 e9       	ldi	r25, 0x96	; 150
    1210:	bb 27       	eor	r27, r27
    1212:	93 95       	inc	r25
    1214:	f6 95       	lsr	r31
    1216:	87 95       	ror	r24
    1218:	77 95       	ror	r23
    121a:	67 95       	ror	r22
    121c:	b7 95       	ror	r27
    121e:	f1 11       	cpse	r31, r1
    1220:	f8 cf       	rjmp	.-16     	; 0x1212 <__floatsisf+0x1c>
    1222:	fa f4       	brpl	.+62     	; 0x1262 <__floatsisf+0x6c>
    1224:	bb 0f       	add	r27, r27
    1226:	11 f4       	brne	.+4      	; 0x122c <__floatsisf+0x36>
    1228:	60 ff       	sbrs	r22, 0
    122a:	1b c0       	rjmp	.+54     	; 0x1262 <__floatsisf+0x6c>
    122c:	6f 5f       	subi	r22, 0xFF	; 255
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	16 c0       	rjmp	.+44     	; 0x1262 <__floatsisf+0x6c>
    1236:	88 23       	and	r24, r24
    1238:	11 f0       	breq	.+4      	; 0x123e <__floatsisf+0x48>
    123a:	96 e9       	ldi	r25, 0x96	; 150
    123c:	11 c0       	rjmp	.+34     	; 0x1260 <__floatsisf+0x6a>
    123e:	77 23       	and	r23, r23
    1240:	21 f0       	breq	.+8      	; 0x124a <__floatsisf+0x54>
    1242:	9e e8       	ldi	r25, 0x8E	; 142
    1244:	87 2f       	mov	r24, r23
    1246:	76 2f       	mov	r23, r22
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <__floatsisf+0x5e>
    124a:	66 23       	and	r22, r22
    124c:	71 f0       	breq	.+28     	; 0x126a <__floatsisf+0x74>
    124e:	96 e8       	ldi	r25, 0x86	; 134
    1250:	86 2f       	mov	r24, r22
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	2a f0       	brmi	.+10     	; 0x1262 <__floatsisf+0x6c>
    1258:	9a 95       	dec	r25
    125a:	66 0f       	add	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	88 1f       	adc	r24, r24
    1260:	da f7       	brpl	.-10     	; 0x1258 <__floatsisf+0x62>
    1262:	88 0f       	add	r24, r24
    1264:	96 95       	lsr	r25
    1266:	87 95       	ror	r24
    1268:	97 f9       	bld	r25, 7
    126a:	08 95       	ret

0000126c <__mulsf3>:
    126c:	0b d0       	rcall	.+22     	; 0x1284 <__mulsf3x>
    126e:	78 c0       	rjmp	.+240    	; 0x1360 <__fp_round>
    1270:	69 d0       	rcall	.+210    	; 0x1344 <__fp_pscA>
    1272:	28 f0       	brcs	.+10     	; 0x127e <__mulsf3+0x12>
    1274:	6e d0       	rcall	.+220    	; 0x1352 <__fp_pscB>
    1276:	18 f0       	brcs	.+6      	; 0x127e <__mulsf3+0x12>
    1278:	95 23       	and	r25, r21
    127a:	09 f0       	breq	.+2      	; 0x127e <__mulsf3+0x12>
    127c:	5a c0       	rjmp	.+180    	; 0x1332 <__fp_inf>
    127e:	5f c0       	rjmp	.+190    	; 0x133e <__fp_nan>
    1280:	11 24       	eor	r1, r1
    1282:	a2 c0       	rjmp	.+324    	; 0x13c8 <__fp_szero>

00001284 <__mulsf3x>:
    1284:	7e d0       	rcall	.+252    	; 0x1382 <__fp_split3>
    1286:	a0 f3       	brcs	.-24     	; 0x1270 <__mulsf3+0x4>

00001288 <__mulsf3_pse>:
    1288:	95 9f       	mul	r25, r21
    128a:	d1 f3       	breq	.-12     	; 0x1280 <__mulsf3+0x14>
    128c:	95 0f       	add	r25, r21
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	55 1f       	adc	r21, r21
    1292:	62 9f       	mul	r22, r18
    1294:	f0 01       	movw	r30, r0
    1296:	72 9f       	mul	r23, r18
    1298:	bb 27       	eor	r27, r27
    129a:	f0 0d       	add	r31, r0
    129c:	b1 1d       	adc	r27, r1
    129e:	63 9f       	mul	r22, r19
    12a0:	aa 27       	eor	r26, r26
    12a2:	f0 0d       	add	r31, r0
    12a4:	b1 1d       	adc	r27, r1
    12a6:	aa 1f       	adc	r26, r26
    12a8:	64 9f       	mul	r22, r20
    12aa:	66 27       	eor	r22, r22
    12ac:	b0 0d       	add	r27, r0
    12ae:	a1 1d       	adc	r26, r1
    12b0:	66 1f       	adc	r22, r22
    12b2:	82 9f       	mul	r24, r18
    12b4:	22 27       	eor	r18, r18
    12b6:	b0 0d       	add	r27, r0
    12b8:	a1 1d       	adc	r26, r1
    12ba:	62 1f       	adc	r22, r18
    12bc:	73 9f       	mul	r23, r19
    12be:	b0 0d       	add	r27, r0
    12c0:	a1 1d       	adc	r26, r1
    12c2:	62 1f       	adc	r22, r18
    12c4:	83 9f       	mul	r24, r19
    12c6:	a0 0d       	add	r26, r0
    12c8:	61 1d       	adc	r22, r1
    12ca:	22 1f       	adc	r18, r18
    12cc:	74 9f       	mul	r23, r20
    12ce:	33 27       	eor	r19, r19
    12d0:	a0 0d       	add	r26, r0
    12d2:	61 1d       	adc	r22, r1
    12d4:	23 1f       	adc	r18, r19
    12d6:	84 9f       	mul	r24, r20
    12d8:	60 0d       	add	r22, r0
    12da:	21 1d       	adc	r18, r1
    12dc:	82 2f       	mov	r24, r18
    12de:	76 2f       	mov	r23, r22
    12e0:	6a 2f       	mov	r22, r26
    12e2:	11 24       	eor	r1, r1
    12e4:	9f 57       	subi	r25, 0x7F	; 127
    12e6:	50 40       	sbci	r21, 0x00	; 0
    12e8:	8a f0       	brmi	.+34     	; 0x130c <__mulsf3_pse+0x84>
    12ea:	e1 f0       	breq	.+56     	; 0x1324 <__mulsf3_pse+0x9c>
    12ec:	88 23       	and	r24, r24
    12ee:	4a f0       	brmi	.+18     	; 0x1302 <__mulsf3_pse+0x7a>
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	bb 1f       	adc	r27, r27
    12f6:	66 1f       	adc	r22, r22
    12f8:	77 1f       	adc	r23, r23
    12fa:	88 1f       	adc	r24, r24
    12fc:	91 50       	subi	r25, 0x01	; 1
    12fe:	50 40       	sbci	r21, 0x00	; 0
    1300:	a9 f7       	brne	.-22     	; 0x12ec <__mulsf3_pse+0x64>
    1302:	9e 3f       	cpi	r25, 0xFE	; 254
    1304:	51 05       	cpc	r21, r1
    1306:	70 f0       	brcs	.+28     	; 0x1324 <__mulsf3_pse+0x9c>
    1308:	14 c0       	rjmp	.+40     	; 0x1332 <__fp_inf>
    130a:	5e c0       	rjmp	.+188    	; 0x13c8 <__fp_szero>
    130c:	5f 3f       	cpi	r21, 0xFF	; 255
    130e:	ec f3       	brlt	.-6      	; 0x130a <__mulsf3_pse+0x82>
    1310:	98 3e       	cpi	r25, 0xE8	; 232
    1312:	dc f3       	brlt	.-10     	; 0x130a <__mulsf3_pse+0x82>
    1314:	86 95       	lsr	r24
    1316:	77 95       	ror	r23
    1318:	67 95       	ror	r22
    131a:	b7 95       	ror	r27
    131c:	f7 95       	ror	r31
    131e:	e7 95       	ror	r30
    1320:	9f 5f       	subi	r25, 0xFF	; 255
    1322:	c1 f7       	brne	.-16     	; 0x1314 <__mulsf3_pse+0x8c>
    1324:	fe 2b       	or	r31, r30
    1326:	88 0f       	add	r24, r24
    1328:	91 1d       	adc	r25, r1
    132a:	96 95       	lsr	r25
    132c:	87 95       	ror	r24
    132e:	97 f9       	bld	r25, 7
    1330:	08 95       	ret

00001332 <__fp_inf>:
    1332:	97 f9       	bld	r25, 7
    1334:	9f 67       	ori	r25, 0x7F	; 127
    1336:	80 e8       	ldi	r24, 0x80	; 128
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	08 95       	ret

0000133e <__fp_nan>:
    133e:	9f ef       	ldi	r25, 0xFF	; 255
    1340:	80 ec       	ldi	r24, 0xC0	; 192
    1342:	08 95       	ret

00001344 <__fp_pscA>:
    1344:	00 24       	eor	r0, r0
    1346:	0a 94       	dec	r0
    1348:	16 16       	cp	r1, r22
    134a:	17 06       	cpc	r1, r23
    134c:	18 06       	cpc	r1, r24
    134e:	09 06       	cpc	r0, r25
    1350:	08 95       	ret

00001352 <__fp_pscB>:
    1352:	00 24       	eor	r0, r0
    1354:	0a 94       	dec	r0
    1356:	12 16       	cp	r1, r18
    1358:	13 06       	cpc	r1, r19
    135a:	14 06       	cpc	r1, r20
    135c:	05 06       	cpc	r0, r21
    135e:	08 95       	ret

00001360 <__fp_round>:
    1360:	09 2e       	mov	r0, r25
    1362:	03 94       	inc	r0
    1364:	00 0c       	add	r0, r0
    1366:	11 f4       	brne	.+4      	; 0x136c <__fp_round+0xc>
    1368:	88 23       	and	r24, r24
    136a:	52 f0       	brmi	.+20     	; 0x1380 <__fp_round+0x20>
    136c:	bb 0f       	add	r27, r27
    136e:	40 f4       	brcc	.+16     	; 0x1380 <__fp_round+0x20>
    1370:	bf 2b       	or	r27, r31
    1372:	11 f4       	brne	.+4      	; 0x1378 <__fp_round+0x18>
    1374:	60 ff       	sbrs	r22, 0
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <__fp_round+0x20>
    1378:	6f 5f       	subi	r22, 0xFF	; 255
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	8f 4f       	sbci	r24, 0xFF	; 255
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	08 95       	ret

00001382 <__fp_split3>:
    1382:	57 fd       	sbrc	r21, 7
    1384:	90 58       	subi	r25, 0x80	; 128
    1386:	44 0f       	add	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	59 f0       	breq	.+22     	; 0x13a2 <__fp_splitA+0x10>
    138c:	5f 3f       	cpi	r21, 0xFF	; 255
    138e:	71 f0       	breq	.+28     	; 0x13ac <__fp_splitA+0x1a>
    1390:	47 95       	ror	r20

00001392 <__fp_splitA>:
    1392:	88 0f       	add	r24, r24
    1394:	97 fb       	bst	r25, 7
    1396:	99 1f       	adc	r25, r25
    1398:	61 f0       	breq	.+24     	; 0x13b2 <__fp_splitA+0x20>
    139a:	9f 3f       	cpi	r25, 0xFF	; 255
    139c:	79 f0       	breq	.+30     	; 0x13bc <__fp_splitA+0x2a>
    139e:	87 95       	ror	r24
    13a0:	08 95       	ret
    13a2:	12 16       	cp	r1, r18
    13a4:	13 06       	cpc	r1, r19
    13a6:	14 06       	cpc	r1, r20
    13a8:	55 1f       	adc	r21, r21
    13aa:	f2 cf       	rjmp	.-28     	; 0x1390 <__fp_split3+0xe>
    13ac:	46 95       	lsr	r20
    13ae:	f1 df       	rcall	.-30     	; 0x1392 <__fp_splitA>
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <__fp_splitA+0x30>
    13b2:	16 16       	cp	r1, r22
    13b4:	17 06       	cpc	r1, r23
    13b6:	18 06       	cpc	r1, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	f1 cf       	rjmp	.-30     	; 0x139e <__fp_splitA+0xc>
    13bc:	86 95       	lsr	r24
    13be:	71 05       	cpc	r23, r1
    13c0:	61 05       	cpc	r22, r1
    13c2:	08 94       	sec
    13c4:	08 95       	ret

000013c6 <__fp_zero>:
    13c6:	e8 94       	clt

000013c8 <__fp_szero>:
    13c8:	bb 27       	eor	r27, r27
    13ca:	66 27       	eor	r22, r22
    13cc:	77 27       	eor	r23, r23
    13ce:	cb 01       	movw	r24, r22
    13d0:	97 f9       	bld	r25, 7
    13d2:	08 95       	ret

000013d4 <adxl345_spi_init>:
#include "spi_adxl345.h" 
#include "delay.h"
void adxl345_spi_init(void)
{

	uc_sw_cs_LO;
    13d4:	dd 98       	cbi	0x1b, 5	; 27
	uc_sw_cs_OUT;
    13d6:	d5 9a       	sbi	0x1a, 5	; 26
 
	uc_sw_SCLK_HI;
    13d8:	de 9a       	sbi	0x1b, 6	; 27
	uc_sw_SCLK_OUT;
    13da:	d6 9a       	sbi	0x1a, 6	; 26
	
    uc_sw_SDI_LO;
    13dc:	df 98       	cbi	0x1b, 7	; 27
    uc_sw_SDI_OUT;
    13de:	d7 9a       	sbi	0x1a, 7	; 26
 
    uc_sw_SDO_LO; 
    13e0:	e5 e6       	ldi	r30, 0x65	; 101
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8b 7f       	andi	r24, 0xFB	; 251
    13e8:	80 83       	st	Z, r24
    uc_sw_SDO_IN;
    13ea:	e4 e6       	ldi	r30, 0x64	; 100
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8b 7f       	andi	r24, 0xFB	; 251
    13f2:	80 83       	st	Z, r24
}
    13f4:	08 95       	ret

000013f6 <getDOUT.1527>:

char getDOUT(void)
{
	if (PING & (1<<2)) return 1; 	// read PA7
    13f6:	80 91 63 00 	lds	r24, 0x0063
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	96 95       	lsr	r25
    1402:	87 95       	ror	r24
	else return 0; 
}
    1404:	81 70       	andi	r24, 0x01	; 1
    1406:	08 95       	ret

00001408 <adxl345_spi_write.1523>:
	
	temp_set = 1;		// 10
	temp_clr = 1;		// 10
	// want to change this variable, please use oscilloscope
	
	uc_sw_SCLK_HI;
    1408:	de 9a       	sbi	0x1b, 6	; 27
	uc_sw_cs_LO;		// enable /CS_ADC
    140a:	dd 98       	cbi	0x1b, 5	; 27
    140c:	27 e0       	ldi	r18, 0x07	; 7
    140e:	30 e0       	ldi	r19, 0x00	; 0
	
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
		data_in = address >> (i-1);
		if(data_in & 0x01) uc_sw_SDI_HI;
    1410:	48 2f       	mov	r20, r24
    1412:	50 e0       	ldi	r21, 0x00	; 0
			
	// Send command
	
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
    1414:	de 98       	cbi	0x1b, 6	; 27
		data_in = address >> (i-1);
		if(data_in & 0x01) uc_sw_SDI_HI;
    1416:	ca 01       	movw	r24, r20
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <adxl345_spi_write.1523+0x18>
    141c:	95 95       	asr	r25
    141e:	87 95       	ror	r24
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <adxl345_spi_write.1523+0x14>
    1424:	80 ff       	sbrs	r24, 0
    1426:	02 c0       	rjmp	.+4      	; 0x142c <adxl345_spi_write.1523+0x24>
    1428:	df 9a       	sbi	0x1b, 7	; 27
    142a:	01 c0       	rjmp	.+2      	; 0x142e <adxl345_spi_write.1523+0x26>
		else uc_sw_SDI_LO;
    142c:	df 98       	cbi	0x1b, 7	; 27
		//for(j=0;j<temp_clr;j++) delay_us(1);
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
    142e:	de 9a       	sbi	0x1b, 6	; 27
    1430:	21 50       	subi	r18, 0x01	; 1
    1432:	30 40       	sbci	r19, 0x00	; 0
	
	//for(j=0;j<temp_clr;j++) delay_us(1);		//=12us
			
	// Send command
	
	for (i=8;i>0;i--)
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	2f 3f       	cpi	r18, 0xFF	; 255
    1438:	38 07       	cpc	r19, r24
    143a:	61 f7       	brne	.-40     	; 0x1414 <adxl345_spi_write.1523+0xc>
    143c:	27 e0       	ldi	r18, 0x07	; 7
    143e:	30 e0       	ldi	r19, 0x00	; 0
	// send data
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
		data_in = data >> (i-1);
		if(data_in & 0x01) uc_sw_SDI_HI;
    1440:	70 e0       	ldi	r23, 0x00	; 0
	
	
	// send data
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
    1442:	de 98       	cbi	0x1b, 6	; 27
		data_in = data >> (i-1);
		if(data_in & 0x01) uc_sw_SDI_HI;
    1444:	cb 01       	movw	r24, r22
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <adxl345_spi_write.1523+0x46>
    144a:	95 95       	asr	r25
    144c:	87 95       	ror	r24
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <adxl345_spi_write.1523+0x42>
    1452:	80 ff       	sbrs	r24, 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <adxl345_spi_write.1523+0x52>
    1456:	df 9a       	sbi	0x1b, 7	; 27
    1458:	01 c0       	rjmp	.+2      	; 0x145c <adxl345_spi_write.1523+0x54>
		else uc_sw_SDI_LO;
    145a:	df 98       	cbi	0x1b, 7	; 27
		//for(j=0;j<temp_clr;j++) delay_us(1);
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
    145c:	de 9a       	sbi	0x1b, 6	; 27
    145e:	21 50       	subi	r18, 0x01	; 1
    1460:	30 40       	sbci	r19, 0x00	; 0
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
	}
	
	
	// send data
	for (i=8;i>0;i--)
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	2f 3f       	cpi	r18, 0xFF	; 255
    1466:	38 07       	cpc	r19, r24
    1468:	61 f7       	brne	.-40     	; 0x1442 <adxl345_spi_write.1523+0x3a>
	}
	
	
	// end of transmission
	
	uc_sw_cs_HI;		// disable /CS_ADC
    146a:	dd 9a       	sbi	0x1b, 5	; 27
}
    146c:	08 95       	ret

0000146e <adxl345_spi_read.1525>:
	
uint8_t adxl345_spi_read(uint8_t data)
{
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
	temp_set = 1;		// 10
	temp_clr = 1;		// 10

	// want to change this variable, please use oscilloscope
	
	uc_sw_SCLK_HI;
    1472:	de 9a       	sbi	0x1b, 6	; 27
	uc_sw_cs_LO;		// enable /uc_sw_cs
    1474:	dd 98       	cbi	0x1b, 5	; 27
    1476:	27 e0       	ldi	r18, 0x07	; 7
    1478:	30 e0       	ldi	r19, 0x00	; 0
	
	// Send command
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
		data_in = data >> (i-1);
    147a:	48 2f       	mov	r20, r24
    147c:	50 e0       	ldi	r21, 0x00	; 0
//	for(j=0;j<temp_clr;j++) ;
	
	// Send command
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
    147e:	de 98       	cbi	0x1b, 6	; 27
		data_in = data >> (i-1);
		if(i == 8) data_in = 0x01; // read byte
    1480:	27 30       	cpi	r18, 0x07	; 7
    1482:	11 f4       	brne	.+4      	; 0x1488 <adxl345_spi_read.1525+0x1a>
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <adxl345_spi_read.1525+0x28>
	
	// Send command
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
		data_in = data >> (i-1);
    1488:	ca 01       	movw	r24, r20
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <adxl345_spi_read.1525+0x24>
    148e:	95 95       	asr	r25
    1490:	87 95       	ror	r24
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <adxl345_spi_read.1525+0x20>
		if(i == 8) data_in = 0x01; // read byte
		if(data_in & 0x01) uc_sw_SDI_HI;
    1496:	80 ff       	sbrs	r24, 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <adxl345_spi_read.1525+0x30>
    149a:	df 9a       	sbi	0x1b, 7	; 27
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <adxl345_spi_read.1525+0x32>
		else uc_sw_SDI_LO;
    149e:	df 98       	cbi	0x1b, 7	; 27
		//for(j=0;j<temp_clr;j++) delay_us(1);
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
    14a0:	de 9a       	sbi	0x1b, 6	; 27
    14a2:	21 50       	subi	r18, 0x01	; 1
    14a4:	30 40       	sbci	r19, 0x00	; 0
	uc_sw_cs_LO;		// enable /uc_sw_cs
	
//	for(j=0;j<temp_clr;j++) ;
	
	// Send command
	for (i=8;i>0;i--)
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	2f 3f       	cpi	r18, 0xFF	; 255
    14aa:	38 07       	cpc	r19, r24
    14ac:	41 f7       	brne	.-48     	; 0x147e <adxl345_spi_read.1525+0x10>
    14ae:	00 e0       	ldi	r16, 0x00	; 0
    14b0:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Read data
	for (i=0;i<8;i++)
	{
		uc_sw_SCLK_LO; //for(j=0;j<temp_clr;j++) delay_us(1);
    14b2:	de 98       	cbi	0x1b, 6	; 27
		data_out |= getDOUT();
    14b4:	a0 df       	rcall	.-192    	; 0x13f6 <getDOUT.1527>
    14b6:	08 2b       	or	r16, r24
		if(i != 7) data_out <<= 1;  // do not shift data if this is the late bit
    14b8:	17 30       	cpi	r17, 0x07	; 7
    14ba:	09 f0       	breq	.+2      	; 0x14be <adxl345_spi_read.1525+0x50>
    14bc:	00 0f       	add	r16, r16
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
    14be:	de 9a       	sbi	0x1b, 6	; 27
		//for(j=0;j<temp_clr;j++) delay_us(1);
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
	}
	
	// Read data
	for (i=0;i<8;i++)
    14c0:	1f 5f       	subi	r17, 0xFF	; 255
    14c2:	18 30       	cpi	r17, 0x08	; 8
    14c4:	b1 f7       	brne	.-20     	; 0x14b2 <adxl345_spi_read.1525+0x44>
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);

	} 
	// end of transmission
	
	uc_sw_cs_HI;		// disable /uc_sw_cs
    14c6:	dd 9a       	sbi	0x1b, 5	; 27
	return data_out;
    14c8:	80 2f       	mov	r24, r16
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	08 95       	ret

000014d0 <__vector_14>:
/********************************************************************************
Interrupt Routines
********************************************************************************/

// timer1 overflow
ISR(TIMER1_OVF_vect) {
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
   // printf("***** Timer1 Overflow *****\n");
}
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <__vector_16>:
// timer0 overflow
ISR(TIMER0_OVF_vect) {
    14e4:	1f 92       	push	r1
    14e6:	0f 92       	push	r0
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	0f 92       	push	r0
    14ec:	11 24       	eor	r1, r1
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    // 61 ticks = 2 seconds @ 8.0MHz
    timer0_ticks++;
    14f2:	80 91 bc 01 	lds	r24, 0x01BC
    14f6:	8f 5f       	subi	r24, 0xFF	; 255
    14f8:	80 93 bc 01 	sts	0x01BC, r24
	//printf("Its been %u ticks.\n",timer0_ticks);
    if(timer0_ticks==30){
    14fc:	80 91 bc 01 	lds	r24, 0x01BC
        // fake it, notice the printf is printing seconds+1
       // printf("Its been %u second.\n",seconds+1);
    }
    if(timer0_ticks==61){
    1500:	80 91 bc 01 	lds	r24, 0x01BC
    1504:	8d 33       	cpi	r24, 0x3D	; 61
    1506:	a1 f4       	brne	.+40     	; 0x1530 <__vector_16+0x4c>
        timer0_ticks = 0;
    1508:	10 92 bc 01 	sts	0x01BC, r1
        // till you make it, now we increment seconds twice
        seconds++;
    150c:	80 91 bd 01 	lds	r24, 0x01BD
    1510:	90 91 be 01 	lds	r25, 0x01BE
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	90 93 be 01 	sts	0x01BE, r25
    151a:	80 93 bd 01 	sts	0x01BD, r24
        seconds++;
    151e:	80 91 bd 01 	lds	r24, 0x01BD
    1522:	90 91 be 01 	lds	r25, 0x01BE
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	90 93 be 01 	sts	0x01BE, r25
    152c:	80 93 bd 01 	sts	0x01BD, r24
       // printf("Its been %u seconds.\n",seconds);
    }
}
    1530:	9f 91       	pop	r25
    1532:	8f 91       	pop	r24
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <adc_init.1365>:
/******************************************************************************\
 * See adc.h for documentation of these functions.
\******************************************************************************/

void adc_init(uint8_t channel, uint8_t bits, uint8_t voltageRef)
{
    153e:	98 2f       	mov	r25, r24
    /* Check parameters */
    bits = ADC_BITS_10;
    if (channel > ADC_MAX_CHANNEL) {
        channel = ADC_MAX_CHANNEL;  /* GND reference */
    }
    if (voltageRef > ADC_REF_INTERNAL) {
    1540:	44 30       	cpi	r20, 0x04	; 4
    1542:	08 f0       	brcs	.+2      	; 0x1546 <adc_init.1365+0x8>
    1544:	41 e0       	ldi	r20, 0x01	; 1
    else if (adcPrescaler < 32) { adcPrescaler = PRESCALER_DIV32; }
    else if (adcPrescaler < 64) { adcPrescaler = PRESCALER_DIV64; }
    else                        { adcPrescaler = PRESCALER_DIV128; }

    /* Set clock */
    ADCSRA = (ADCSRA & ~0x03) | (adcPrescaler);
    1546:	86 b1       	in	r24, 0x06	; 6
    1548:	8c 7f       	andi	r24, 0xFC	; 252
    154a:	86 60       	ori	r24, 0x06	; 6
    154c:	86 b9       	out	0x06, r24	; 6

    /* Set channel, voltage reference and right justification */
    ADMUX = (voltageRef << REFS0) | channel;
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	36 e0       	ldi	r19, 0x06	; 6
    1552:	44 0f       	add	r20, r20
    1554:	55 1f       	adc	r21, r21
    1556:	3a 95       	dec	r19
    1558:	e1 f7       	brne	.-8      	; 0x1552 <adc_init.1365+0x14>
    155a:	89 2f       	mov	r24, r25
    155c:	90 32       	cpi	r25, 0x20	; 32
    155e:	08 f0       	brcs	.+2      	; 0x1562 <adc_init.1365+0x24>
    1560:	8f e1       	ldi	r24, 0x1F	; 31
    1562:	84 2b       	or	r24, r20
    1564:	87 b9       	out	0x07, r24	; 7

    /* Enable ADC */
    ADCSRA |= BIT(ADEN) | BIT(ADIE);
    1566:	86 b1       	in	r24, 0x06	; 6
    1568:	88 68       	ori	r24, 0x88	; 136
    156a:	86 b9       	out	0x06, r24	; 6
    isNewValue = false;
    156c:	10 92 18 01 	sts	0x0118, r1
    enableInterrupts();
    1570:	78 94       	sei
}
    1572:	08 95       	ret

00001574 <adc_singleConversion.1374>:
uint16_t adc_singleConversion(void)
{
    uint16_t result;
        
    /* Check that ADC is enabled */
    if ( !(ADCSRA & BIT(ADEN))) {
    1574:	37 99       	sbic	0x06, 7	; 6
    1576:	03 c0       	rjmp	.+6      	; 0x157e <adc_singleConversion.1374+0xa>
    1578:	8f ef       	ldi	r24, 0xFF	; 255
    157a:	9f ef       	ldi	r25, 0xFF	; 255
    157c:	08 95       	ret
        return 0xFFFF;
    }

    /* Start single conversion */
    ADCSRA &= ~BIT(ADFR);
    157e:	35 98       	cbi	0x06, 5	; 6
    ADCSRA |= BIT(ADSC);
    1580:	36 9a       	sbi	0x06, 6	; 6
    
#ifndef ADC_USE_CALLBACK
    /* Wait for conversion to complete */
    while (!isNewValue) {
    1582:	80 91 18 01 	lds	r24, 0x0118
    1586:	88 23       	and	r24, r24
    1588:	e1 f3       	breq	.-8      	; 0x1582 <adc_singleConversion.1374+0xe>
        ;
    }
    disableInterrupts();
    158a:	f8 94       	cli
    isNewValue = false;
    158c:	10 92 18 01 	sts	0x0118, r1
    result = result_local;
    1590:	80 91 16 01 	lds	r24, 0x0116
    1594:	90 91 17 01 	lds	r25, 0x0117
    enableInterrupts();
    1598:	78 94       	sei
    return result;
#else
    return 0;
#endif
}
    159a:	08 95       	ret

0000159c <__vector_21>:
 * Interrupt service routine that is signalled when an ADC conversion has
 * finished. The resulting value is stored locally, and a flag set to indicate
 * that a new value has been generated.
 **/
ISR(ADC_vect)
{
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	0f 92       	push	r0
    15a4:	11 24       	eor	r1, r1
    15a6:	2f 93       	push	r18
    15a8:	3f 93       	push	r19
    15aa:	8f 93       	push	r24
    15ac:	9f 93       	push	r25
    uint8_t resultLowByte;

    /* Must read ADCL before ADCH */
    resultLowByte = ADCL;
    15ae:	84 b1       	in	r24, 0x04	; 4
    result_local = TO_UINT16(ADCH, resultLowByte);
    15b0:	25 b1       	in	r18, 0x05	; 5
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	32 2f       	mov	r19, r18
    15b6:	22 27       	eor	r18, r18
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	28 2b       	or	r18, r24
    15bc:	39 2b       	or	r19, r25
    15be:	30 93 17 01 	sts	0x0117, r19
    15c2:	20 93 16 01 	sts	0x0116, r18
    isNewValue = true;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 93 18 01 	sts	0x0118, r24
    
#ifdef ADC_USE_CALLBACK
    adc_callback(result_local);
#endif
}
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	3f 91       	pop	r19
    15d2:	2f 91       	pop	r18
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	0f 90       	pop	r0
    15da:	1f 90       	pop	r1
    15dc:	18 95       	reti

000015de <__vector_15>:
 */
 
#ifndef BOARD_HAS_NO_TOSC1_CRYSTAL
/* Signalled every 8 seconds */
ISR(TIMER0_COMP_vect)
{
    15de:	1f 92       	push	r1
    15e0:	0f 92       	push	r0
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	0f 92       	push	r0
    15e6:	11 24       	eor	r1, r1
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    TCCR0 = PRESCALE_T0_DIV_1024;
    15ec:	87 e0       	ldi	r24, 0x07	; 7
    15ee:	83 bf       	out	0x33, r24	; 51

    timerInterruptCount[TIMER_SECOND]++;
    15f0:	80 91 1d 01 	lds	r24, 0x011D
    15f4:	90 91 1e 01 	lds	r25, 0x011E
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	90 93 1e 01 	sts	0x011E, r25
    15fe:	80 93 1d 01 	sts	0x011D, r24
        TCNT0 = 0;
        isTimerInt[TIMER_SECOND] = 0;
    }
#endif
    /* Use update busy flag to know when interrupt logic is reset */
    while (ASSR & BIT(TCR0UB)) {
    1602:	00 b6       	in	r0, 0x30	; 48
    1604:	00 fc       	sbrc	r0, 0
    1606:	fd cf       	rjmp	.-6      	; 0x1602 <__vector_15+0x24>
        ;
    }
}
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	0f 90       	pop	r0
    1612:	1f 90       	pop	r1
    1614:	18 95       	reti

00001616 <__vector_9>:
}

#endif
/* Signalled every millisecond */
ISR(TIMER2_COMP_vect)
{
    1616:	1f 92       	push	r1
    1618:	0f 92       	push	r0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	0f 92       	push	r0
    161e:	11 24       	eor	r1, r1
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    timerInterruptCount[TIMER_MILLISECOND]++;
    1624:	80 91 1f 01 	lds	r24, 0x011F
    1628:	90 91 20 01 	lds	r25, 0x0120
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	90 93 20 01 	sts	0x0120, r25
    1632:	80 93 1f 01 	sts	0x011F, r24
        }
        timerInterruptCount[TIMER_MILLISECOND] = 0;
        isTimerInt[TIMER_MILLISECOND] = 0;
    }
#endif
}
    1636:	9f 91       	pop	r25
    1638:	8f 91       	pop	r24
    163a:	0f 90       	pop	r0
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	0f 90       	pop	r0
    1640:	1f 90       	pop	r1
    1642:	18 95       	reti

00001644 <write.9346>:
#ifndef UART_DO_NOT_INSERT_RETURN
   //if (ch == '\n')
     //   putchar('\r');
#endif

    UDR0 = ch;
    1644:	8c b9       	out	0x0c, r24	; 12
    while ( !(UCSR0A & BIT(UDRE0)) )
    1646:	5d 9b       	sbis	0x0b, 5	; 11
    1648:	fe cf       	rjmp	.-4      	; 0x1646 <write.9346+0x2>
 * type expected by AVR-libc stdio system.
 */
static int write(char ch, FILE __attribute__((unused)) *unused)
{
    return uart_putchar(ch);
}
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	08 95       	ret

0000164e <read.9348>:
}


uint8_t uart_getchar(void)
{
    while ( !(UCSR0A & BIT(RXC0)) )
    164e:	5f 9b       	sbis	0x0b, 7	; 11
    1650:	fe cf       	rjmp	.-4      	; 0x164e <read.9348>
        ;
    return UDR0;
    1652:	8c b1       	in	r24, 0x0c	; 12
 * conforms to function type expected by AVR-libc stdio system.
 */
static int read(FILE __attribute__((unused)) *unused)
{
    return uart_getchar();
}
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	08 95       	ret

00001658 <getByte.9892>:

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    1658:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    165a:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & BIT(SPIF))) {
    165c:	77 9b       	sbis	0x0e, 7	; 14
    165e:	fe cf       	rjmp	.-4      	; 0x165c <getByte.9892+0x4>
        ;
    }
    return SPDR;
    1660:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1662:	c0 9a       	sbi	0x18, 0	; 24
    uint8_t byte;
    spi_enableCsn();
    byte = spi_readWriteByte(0);
    spi_disableCsn();
    return byte;
}
    1664:	08 95       	ret

00001666 <sendByte.9894>:

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    1666:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1668:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    166a:	77 9b       	sbis	0x0e, 7	; 14
    166c:	fe cf       	rjmp	.-4      	; 0x166a <sendByte.9894+0x4>
        ;
    }
    return SPDR;
    166e:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1670:	c0 9a       	sbi	0x18, 0	; 24
static void sendByte(uint8_t byte)
{
    spi_enableCsn();
    spi_readWriteByte(byte);
    spi_disableCsn();
}
    1672:	08 95       	ret

00001674 <rf_setMode.1476>:
    buffer = receiveBuffer;
}


void rf_setMode(uint8_t mode)
{
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	18 2f       	mov	r17, r24
    uint8_t statusByte;

    if (mode == rf_mode) {
    167a:	00 91 11 01 	lds	r16, 0x0111
    167e:	80 17       	cp	r24, r16
    1680:	91 f1       	breq	.+100    	; 0x16e6 <rf_setMode.1476+0x72>
        return;
    }

    disableInterrupts();
    1682:	f8 94       	cli

    /* Wait until any active transmission is finished before changing */
    do {
        statusByte = getByte();
    1684:	e9 df       	rcall	.-46     	; 0x1658 <getByte.9892>
    } while (statusByte & BIT(TX_ACTIVE));
    1686:	83 fd       	sbrc	r24, 3
    1688:	fd cf       	rjmp	.-6      	; 0x1684 <rf_setMode.1476+0x10>

    /* Turn off RX */
    if (mode != RF_MODE_RECEIVING && rf_mode == RF_MODE_RECEIVING) {
    168a:	13 30       	cpi	r17, 0x03	; 3
    168c:	a1 f0       	breq	.+40     	; 0x16b6 <rf_setMode.1476+0x42>
    168e:	03 30       	cpi	r16, 0x03	; 3
    1690:	29 f4       	brne	.+10     	; 0x169c <rf_setMode.1476+0x28>
        sendByte(SRFOFF);
    1692:	86 e0       	ldi	r24, 0x06	; 6
    1694:	e8 df       	rcall	.-48     	; 0x1666 <sendByte.9894>
        rf_disableInterrupt();
    1696:	89 b7       	in	r24, 0x39	; 57
    1698:	8f 7e       	andi	r24, 0xEF	; 239
    169a:	89 bf       	out	0x39, r24	; 57
    }

    /* Go to sleep mode (oscillator off) */
    if (mode == RF_MODE_SLEEP) {
    169c:	11 30       	cpi	r17, 0x01	; 1
    169e:	19 f4       	brne	.+6      	; 0x16a6 <rf_setMode.1476+0x32>
        sendByte(SXOSCOFF);
    16a0:	87 e0       	ldi	r24, 0x07	; 7
    16a2:	e1 df       	rcall	.-62     	; 0x1666 <sendByte.9894>
    16a4:	1d c0       	rjmp	.+58     	; 0x16e0 <rf_setMode.1476+0x6c>
    }

    /* Disable radio completely, ans configure pins for sleep */
    if (mode == RF_MODE_OFF) {
    16a6:	11 23       	and	r17, r17
    16a8:	49 f4       	brne	.+18     	; 0x16bc <rf_setMode.1476+0x48>
        disableVreg();
    16aa:	c5 98       	cbi	0x18, 5	; 24


/** Set pins to allow Atmega to go to low power sleep. **/
static inline void unsetPins(void)
{
    RF_FIFOP_DDR |= BIT(RF_FIFOP);
    16ac:	14 9a       	sbi	0x02, 4	; 2
    RF_FIFO_DDR |= BIT(RF_FIFO);
    16ae:	15 9a       	sbi	0x02, 5	; 2
    RF_SFD_DDR |= BIT(RF_SFD);
    16b0:	8c 9a       	sbi	0x11, 4	; 17
    RF_CCA_DDR |= BIT(RF_CCA);
    16b2:	8d 9a       	sbi	0x11, 5	; 17
    16b4:	15 c0       	rjmp	.+42     	; 0x16e0 <rf_setMode.1476+0x6c>
        disableVreg();
        unsetPins();
    }

    /* Go to standby mode (oscillator on), if not already there */
    if ((mode == RF_MODE_RECEIVING && rf_mode != RF_MODE_STANDBY) ||
    16b6:	02 30       	cpi	r16, 0x02	; 2
    16b8:	29 f4       	brne	.+10     	; 0x16c4 <rf_setMode.1476+0x50>
    16ba:	0b c0       	rjmp	.+22     	; 0x16d2 <rf_setMode.1476+0x5e>
    16bc:	12 30       	cpi	r17, 0x02	; 2
    16be:	39 f4       	brne	.+14     	; 0x16ce <rf_setMode.1476+0x5a>
    16c0:	03 30       	cpi	r16, 0x03	; 3
    16c2:	71 f0       	breq	.+28     	; 0x16e0 <rf_setMode.1476+0x6c>
                    (mode == RF_MODE_STANDBY && rf_mode != RF_MODE_RECEIVING)) {
        sendByte(SXOSCON);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	cf df       	rcall	.-98     	; 0x1666 <sendByte.9894>
        /* Wait for the crystal oscillator to become stable */
        do {
            statusByte = getByte();
    16c8:	c7 df       	rcall	.-114    	; 0x1658 <getByte.9892>
        } while (!(statusByte & BIT(XOSC16M_STABLE)));
    16ca:	86 ff       	sbrs	r24, 6
    16cc:	fd cf       	rjmp	.-6      	; 0x16c8 <rf_setMode.1476+0x54>
    }

    /* Turn on receiver */
    if (mode == RF_MODE_RECEIVING) {
    16ce:	13 30       	cpi	r17, 0x03	; 3
    16d0:	39 f4       	brne	.+14     	; 0x16e0 <rf_setMode.1476+0x6c>
        sendByte(SRXON);
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	c8 df       	rcall	.-112    	; 0x1666 <sendByte.9894>
        sendByte(SFLUSHRX);
    16d6:	88 e0       	ldi	r24, 0x08	; 8
    16d8:	c6 df       	rcall	.-116    	; 0x1666 <sendByte.9894>
        rf_enableInterrupt();
    16da:	89 b7       	in	r24, 0x39	; 57
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	89 bf       	out	0x39, r24	; 57
    }

    enableInterrupts();
    16e0:	78 94       	sei

    rf_mode = mode;
    16e2:	10 93 11 01 	sts	0x0111, r17
}
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <setRegister.9897>:

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    16ec:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    16ee:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    16f0:	77 9b       	sbis	0x0e, 7	; 14
    16f2:	fe cf       	rjmp	.-4      	; 0x16f0 <setRegister.9897+0x4>
        ;
    }
    return SPDR;
    16f4:	8f b1       	in	r24, 0x0f	; 15
 **/
static void setRegister(uint8_t address, uint16_t value)
{
    spi_enableCsn();
    spi_readWriteByte(address);
    spi_readWriteByte((uint8_t) ((value) >> 8));
    16f6:	87 2f       	mov	r24, r23
    16f8:	99 27       	eor	r25, r25


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    16fa:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    16fc:	77 9b       	sbis	0x0e, 7	; 14
    16fe:	fe cf       	rjmp	.-4      	; 0x16fc <setRegister.9897+0x10>
        ;
    }
    return SPDR;
    1700:	8f b1       	in	r24, 0x0f	; 15


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1702:	6f b9       	out	0x0f, r22	; 15
    while (!(SPSR & BIT(SPIF))) {
    1704:	77 9b       	sbis	0x0e, 7	; 14
    1706:	fe cf       	rjmp	.-4      	; 0x1704 <setRegister.9897+0x18>
        ;
    }
    return SPDR;
    1708:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    170a:	c0 9a       	sbi	0x18, 0	; 24
    spi_readWriteByte((uint8_t) (value));
    spi_disableCsn();
}
    170c:	08 95       	ret

0000170e <sendRamAddress.9899>:
 * Convert to format expected by radio (see datasheet) and send RAM address.
 *
 * @param address where to start writing to RAM within the CC2420.
 **/
static void sendRamAddress(uint16_t address)
{
    170e:	9c 01       	movw	r18, r24
    spi_readWriteByte(0x80 | (address & 0x7F));
    1710:	80 68       	ori	r24, 0x80	; 128


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1712:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1714:	77 9b       	sbis	0x0e, 7	; 14
    1716:	fe cf       	rjmp	.-4      	; 0x1714 <sendRamAddress.9899+0x6>
        ;
    }
    return SPDR;
    1718:	8f b1       	in	r24, 0x0f	; 15
    spi_readWriteByte((address >> 1) & 0xC0);
    171a:	36 95       	lsr	r19
    171c:	27 95       	ror	r18
    171e:	82 2f       	mov	r24, r18
    1720:	80 7c       	andi	r24, 0xC0	; 192


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1722:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1724:	77 9b       	sbis	0x0e, 7	; 14
    1726:	fe cf       	rjmp	.-4      	; 0x1724 <sendRamAddress.9899+0x16>
        ;
    }
    return SPDR;
    1728:	8f b1       	in	r24, 0x0f	; 15
}
    172a:	08 95       	ret

0000172c <writeFifo.9902>:
 *
 * @param data a pointer to the data that will be written.
 * @param size how many bytes of @a data to write.
 **/
static void writeFifo(const uint8_t* data, uint8_t size)
{
    172c:	9c 01       	movw	r18, r24

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    172e:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1730:	8e e3       	ldi	r24, 0x3E	; 62
    1732:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1734:	77 9b       	sbis	0x0e, 7	; 14
    1736:	fe cf       	rjmp	.-4      	; 0x1734 <writeFifo.9902+0x8>
        ;
    }
    return SPDR;
    1738:	8f b1       	in	r24, 0x0f	; 15
    173a:	f9 01       	movw	r30, r18
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	07 c0       	rjmp	.+14     	; 0x174e <writeFifo.9902+0x22>
    spi_enableCsn();
    spi_readWriteByte(TXFIFO);
    for (uint8_t i = 0; i < size; i++) {
        spi_readWriteByte(data[i]);
    1740:	80 81       	ld	r24, Z


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1742:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1744:	77 9b       	sbis	0x0e, 7	; 14
    1746:	fe cf       	rjmp	.-4      	; 0x1744 <writeFifo.9902+0x18>
        ;
    }
    return SPDR;
    1748:	8f b1       	in	r24, 0x0f	; 15
 **/
static void writeFifo(const uint8_t* data, uint8_t size)
{
    spi_enableCsn();
    spi_readWriteByte(TXFIFO);
    for (uint8_t i = 0; i < size; i++) {
    174a:	9f 5f       	subi	r25, 0xFF	; 255
    174c:	31 96       	adiw	r30, 0x01	; 1
    174e:	96 17       	cp	r25, r22
    1750:	b8 f3       	brcs	.-18     	; 0x1740 <writeFifo.9902+0x14>

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1752:	c0 9a       	sbi	0x18, 0	; 24
        spi_readWriteByte(data[i]);
    }
    spi_disableCsn();
}
    1754:	08 95       	ret

00001756 <main>:


  //---------*********TIMER**********-----------

int main(void)
{
    1756:	a5 e0       	ldi	r26, 0x05	; 5
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e0 eb       	ldi	r30, 0xB0	; 176
    175c:	fb e0       	ldi	r31, 0x0B	; 11
    175e:	50 c4       	rjmp	.+2208   	; 0x2000 <__prologue_saves__>
 // uint8_t i;

    /* Initalise everything */
    board_init();
    1760:	84 e0       	ldi	r24, 0x04	; 4
    1762:	8b bb       	out	0x1b, r24	; 27
    1764:	9f ef       	ldi	r25, 0xFF	; 255
    1766:	9a bb       	out	0x1a, r25	; 26
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	88 bb       	out	0x18, r24	; 24
    176c:	97 bb       	out	0x17, r25	; 23
    176e:	22 e0       	ldi	r18, 0x02	; 2
    1770:	25 bb       	out	0x15, r18	; 21
    1772:	94 bb       	out	0x14, r25	; 20
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	82 bb       	out	0x12, r24	; 18
    1778:	8c ef       	ldi	r24, 0xFC	; 252
    177a:	81 bb       	out	0x11, r24	; 17
    177c:	23 b9       	out	0x03, r18	; 3
    177e:	8d ef       	ldi	r24, 0xFD	; 253
    1780:	82 b9       	out	0x02, r24	; 2
    1782:	10 92 62 00 	sts	0x0062, r1
    1786:	90 93 61 00 	sts	0x0061, r25
    178a:	10 92 65 00 	sts	0x0065, r1
    178e:	8f e1       	ldi	r24, 0x1F	; 31
    1790:	80 93 64 00 	sts	0x0064, r24

	//Ensure adc port is input
	PORTF = 0x00; 
    1794:	10 92 62 00 	sts	0x0062, r1
    DDRF  = 0x00;
    1798:	10 92 61 00 	sts	0x0061, r1
	
	//Turn off sensors and disable mux 
	sensor_OUT;
    179c:	d4 9a       	sbi	0x1a, 4	; 26
    sensor_off;
    179e:	dc 98       	cbi	0x1b, 4	; 27
	
	  //---------*********TIMER**********-----------
    // enable timer overflow interrupt for both Timer0 and Timer1
    TIMSK=(1<<TOIE0) | (1<<TOIE1);
    17a0:	85 e0       	ldi	r24, 0x05	; 5
    17a2:	87 bf       	out	0x37, r24	; 55

    // set timer0 counter initial value to 0
    TCNT0=0x00;
    17a4:	12 be       	out	0x32, r1	; 50
    // start timer0 with /1024 prescaler
    TCCR0 = (1<<CS02) | (1<<CS00);
    17a6:	83 bf       	out	0x33, r24	; 51
    // lets turn on 16 bit timer1 also
    TCCR1B |= (1 << CS10) | (1 << CS12);
    17a8:	8e b5       	in	r24, 0x2e	; 46
    17aa:	85 60       	ori	r24, 0x05	; 5
    17ac:	8e bd       	out	0x2e, r24	; 46

    // enable interrupts
    sei(); 
    17ae:	78 94       	sei
	
	  //---------*********TIMER**********-----------

	
	
	uc_sw_MUX_BEND_EN_OUT;
    17b0:	a2 9a       	sbi	0x14, 2	; 20
	uc_sw_MUX_BEND_EN_HI;//Interface Disabled
    17b2:	aa 9a       	sbi	0x15, 2	; 21
	uc_sw_MUX_ACC_EN_OUT;
    17b4:	a3 9a       	sbi	0x14, 3	; 20
	uc_sw_MUX_ACC_EN_HI;// Interface Disabled
    17b6:	ab 9a       	sbi	0x15, 3	; 21
	
	uc_sw_MUX_MUX_cSA_CSB_OUT;
    17b8:	a1 9a       	sbi	0x14, 1	; 20
	uc_sw_MUX_MUX_cSA_CSB_LO;
    17ba:	a9 98       	cbi	0x15, 1	; 21
	
	uc_sw_MUX_MUX_WR_OUT;
    17bc:	a0 9a       	sbi	0x14, 0	; 20
	uc_sw_MUX_MUX_WR_LO;
    17be:	a8 98       	cbi	0x15, 0	; 21
	
	adxl345_spi_init();
    17c0:	09 de       	rcall	.-1006   	; 0x13d4 <adxl345_spi_init>
	uc_sw_MUX_A0_OUT;
    17c2:	a7 9a       	sbi	0x14, 7	; 20
	uc_sw_MUX_A0_LO;
    17c4:	af 98       	cbi	0x15, 7	; 21
	uc_sw_MUX_A1_OUT;
    17c6:	a6 9a       	sbi	0x14, 6	; 20
	uc_sw_MUX_A1_LO;
    17c8:	ae 98       	cbi	0x15, 6	; 21
	uc_sw_MUX_A2_OUT;
    17ca:	a5 9a       	sbi	0x14, 5	; 20
	uc_sw_MUX_A2_LO;
    17cc:	ad 98       	cbi	0x15, 5	; 21
	uc_sw_MUX_A3_OUT;
    17ce:	a4 9a       	sbi	0x14, 4	; 20
	uc_sw_MUX_A3_LO;
    17d0:	ac 98       	cbi	0x15, 4	; 21

	
	
	PORTF = 0x00; 
    17d2:	10 92 62 00 	sts	0x0062, r1
    DDRF  = 0x00;
    17d6:	10 92 61 00 	sts	0x0061, r1
\******************************************************************************/

/** Set pins for communicating with radio. **/
static inline void initPins(void)
{
    RF_RESETN_DDR |= BIT(RF_RESETN);
    17da:	8f 9a       	sbi	0x11, 7	; 17
    RF_RESETN_PORT |= BIT(RF_RESETN);
    17dc:	97 9a       	sbi	0x12, 7	; 18
    RF_VREG_DDR |= BIT(RF_VREG_EN);
    17de:	bd 9a       	sbi	0x17, 5	; 23
    RF_FIFOP_DDR &= ~BIT(RF_FIFOP);
    17e0:	14 98       	cbi	0x02, 4	; 2
    RF_FIFO_DDR &= ~BIT(RF_FIFO);
    17e2:	15 98       	cbi	0x02, 5	; 2
    RF_SFD_DDR &= ~BIT(RF_SFD);
    17e4:	8c 98       	cbi	0x11, 4	; 17
    RF_CCA_DDR &= ~BIT(RF_CCA);
    17e6:	8d 98       	cbi	0x11, 5	; 17
\******************************************************************************/

/** Enables SPI, selects master mode, clock rate F_CPU / 2, and SPI mode 0. **/
static inline void spi_init(void)
{
    SPI_PORT |= BIT(SPI_MOSI) | BIT(SPI_SCLK) | BIT(SPI_CSN) | BIT(SPI_MISO);
    17e8:	88 b3       	in	r24, 0x18	; 24
    17ea:	8f 60       	ori	r24, 0x0F	; 15
    17ec:	88 bb       	out	0x18, r24	; 24

    SPCR = BIT(SPE) | BIT(MSTR);
    17ee:	80 e5       	ldi	r24, 0x50	; 80
    17f0:	8d b9       	out	0x0d, r24	; 13

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    17f2:	c0 9a       	sbi	0x18, 0	; 24

    initPins();
    spi_init();

    /* Turn on regulator and reset chip */
    enableVreg();
    17f4:	c5 9a       	sbi	0x18, 5	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17f6:	80 eb       	ldi	r24, 0xB0	; 176
    17f8:	94 e0       	ldi	r25, 0x04	; 4
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <main+0xa4>
    delay_us(600);
    enableReset();
    17fe:	97 98       	cbi	0x12, 7	; 18
    1800:	80 ed       	ldi	r24, 0xD0	; 208
    1802:	97 e0       	ldi	r25, 0x07	; 7
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <main+0xae>
    delay_us(1000);
    disableReset();
    1808:	97 9a       	sbi	0x12, 7	; 18
    180a:	88 ee       	ldi	r24, 0xE8	; 232
    180c:	93 e0       	ldi	r25, 0x03	; 3
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <main+0xb8>
    /* Calculate frequency from channel number (see datasheet) */
    f = ((uint16_t)(channel - 11) * 5) + 357;
    f |= 0x4000;        /* To set bits in rest of register */

    /* Write it to the CC2420 */
    disableInterrupts();
    1812:	f8 94       	cli
    setRegister(FSCTRL, f);
    1814:	88 e1       	ldi	r24, 0x18	; 24
    1816:	62 e9       	ldi	r22, 0x92	; 146
    1818:	71 e4       	ldi	r23, 0x41	; 65
    181a:	68 df       	rcall	.-304    	; 0x16ec <setRegister.9897>
    enableInterrupts();
    181c:	78 94       	sei
            (power != RF_PWR_NEG15) &&
            (power != RF_PWR_NEG25)) {
        power = RF_PWR_MAX;
    }
    
    rf_power = power;
    181e:	8f ef       	ldi	r24, 0xFF	; 255
    1820:	80 93 1c 01 	sts	0x011C, r24

    disableInterrupts();
    1824:	f8 94       	cli
    setRegister(TXCTRL, 0xA000 | (uint16_t)rf_power);
    1826:	85 e1       	ldi	r24, 0x15	; 21
    1828:	6f ef       	ldi	r22, 0xFF	; 255
    182a:	70 ea       	ldi	r23, 0xA0	; 160
    182c:	5f df       	rcall	.-322    	; 0x16ec <setRegister.9897>
    enableInterrupts();
    182e:	78 94       	sei

    /* Set the output power */
    rf_setPower(power);

    /* Initialize the FIFOP external interrupt */
    rf_initInterrupt();
    1830:	8a b7       	in	r24, 0x3a	; 58
    1832:	83 60       	ori	r24, 0x03	; 3
    1834:	8a bf       	out	0x3a, r24	; 58
    1836:	80 e1       	ldi	r24, 0x10	; 16
    1838:	88 bf       	out	0x38, r24	; 56

    /* Disable interrupts while accessing SPI */
    disableInterrupts();
    183a:	f8 94       	cli

    /* Enable oscillator */
    sendByte(SXOSCON);
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	13 df       	rcall	.-474    	; 0x1666 <sendByte.9894>

    /* Set correlation threshold to 20 */
    setRegister(MDMCTRL1, 0x0500);
    1840:	82 e1       	ldi	r24, 0x12	; 18
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	75 e0       	ldi	r23, 0x05	; 5
    1846:	52 df       	rcall	.-348    	; 0x16ec <setRegister.9897>

    /* Set RXBPF to 1 as recommended in datasheet */
    setRegister(RXCTRL1, 0x2A56);
    1848:	87 e1       	ldi	r24, 0x17	; 23
    184a:	66 e5       	ldi	r22, 0x56	; 86
    184c:	7a e2       	ldi	r23, 0x2A	; 42
    184e:	4e df       	rcall	.-356    	; 0x16ec <setRegister.9897>

    /* Set the FIFOP threshold to maximum (127 bytes) */
    setRegister(IOCFG0, 0x007F);
    1850:	8c e1       	ldi	r24, 0x1C	; 28
    1852:	6f e7       	ldi	r22, 0x7F	; 127
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	4a df       	rcall	.-364    	; 0x16ec <setRegister.9897>

    /* Disable RXFIFO_PROTECTION */
    setRegister(SECCTRL0, 0x01C4);
    1858:	89 e1       	ldi	r24, 0x19	; 25
    185a:	64 ec       	ldi	r22, 0xC4	; 196
    185c:	71 e0       	ldi	r23, 0x01	; 1
    185e:	46 df       	rcall	.-372    	; 0x16ec <setRegister.9897>

    txSeqNumber = 0;
    1860:	10 92 19 01 	sts	0x0119, r1

    /* Wait for the crystal oscillator to become stable */
    do {
        statusByte = getByte();
    1864:	f9 de       	rcall	.-526    	; 0x1658 <getByte.9892>
    } while (!(statusByte & BIT(XOSC16M_STABLE)));
    1866:	86 ff       	sbrs	r24, 6
    1868:	fd cf       	rjmp	.-6      	; 0x1864 <main+0x10e>

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    186a:	c0 98       	cbi	0x18, 0	; 24

    /* Write addresses to RAM. The oscillator must be running for this. */
    spi_enableCsn();
    sendRamAddress(RAM_SHORTADR);
    186c:	8a e6       	ldi	r24, 0x6A	; 106
    186e:	91 e0       	ldi	r25, 0x01	; 1
    1870:	4e df       	rcall	.-356    	; 0x170e <sendRamAddress.9899>


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1872:	89 e7       	ldi	r24, 0x79	; 121
    1874:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1876:	77 9b       	sbis	0x0e, 7	; 14
    1878:	fe cf       	rjmp	.-4      	; 0x1876 <main+0x120>
        ;
    }
    return SPDR;
    187a:	8f b1       	in	r24, 0x0f	; 15


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    187c:	89 e7       	ldi	r24, 0x79	; 121
    187e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1880:	77 9b       	sbis	0x0e, 7	; 14
    1882:	fe cf       	rjmp	.-4      	; 0x1880 <main+0x12a>
        ;
    }
    return SPDR;
    1884:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1886:	c0 9a       	sbi	0x18, 0	; 24

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    1888:	c0 98       	cbi	0x18, 0	; 24
    spi_readWriteByte(RF_LOCAL_ADDRESS & 0xFF);  /* LSB first */
    spi_readWriteByte(RF_LOCAL_ADDRESS >> 8);
    spi_disableCsn();

    spi_enableCsn();
    sendRamAddress(RAM_PANID);
    188a:	88 e6       	ldi	r24, 0x68	; 104
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	3f df       	rcall	.-386    	; 0x170e <sendRamAddress.9899>


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1890:	85 eb       	ldi	r24, 0xB5	; 181
    1892:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1894:	77 9b       	sbis	0x0e, 7	; 14
    1896:	fe cf       	rjmp	.-4      	; 0x1894 <main+0x13e>
        ;
    }
    return SPDR;
    1898:	8f b1       	in	r24, 0x0f	; 15


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    189a:	81 e3       	ldi	r24, 0x31	; 49
    189c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    189e:	77 9b       	sbis	0x0e, 7	; 14
    18a0:	fe cf       	rjmp	.-4      	; 0x189e <main+0x148>
        ;
    }
    return SPDR;
    18a2:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    18a4:	c0 9a       	sbi	0x18, 0	; 24
    spi_readWriteByte(RF_NETWORK_ID & 0xFF);
    spi_readWriteByte(RF_NETWORK_ID >> 8);
    spi_disableCsn();

    /* Disable oscillator to save power */
    sendByte(SXOSCOFF);
    18a6:	87 e0       	ldi	r24, 0x07	; 7
    18a8:	de de       	rcall	.-580    	; 0x1666 <sendByte.9894>

    enableInterrupts();
    18aa:	78 94       	sei
}


void rf_setReceiveBuffer(volatile rf_msgType* receiveBuffer)
{
    buffer = receiveBuffer;
    18ac:	81 e2       	ldi	r24, 0x21	; 33
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	90 93 1b 01 	sts	0x011B, r25
    18b4:	80 93 1a 01 	sts	0x011A, r24
	rf_init(RF_CHANNEL_CENTRE, RF_PWR_MAX);
	rf_setReceiveBuffer(&receivedMsg);
	//rf_setMode(RF_MODE_RECEIVING);
	sensor_on;
    18b8:	dc 9a       	sbi	0x1b, 4	; 27
{
/* See avr-libc docs on <util/setbaud.h> for explanation of this code */
#define BAUD UART_BAUDRATE
#define BAUD_TOL UART_BAUD_TOL
#include <util/setbaud.h>
    UBRR0H = UBRRH_VALUE;
    18ba:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = UBRRL_VALUE;
    18be:	19 b8       	out	0x09, r1	; 9
#if USE_2X
    UCSR0A |= BIT(U2X0);
    18c0:	59 9a       	sbi	0x0b, 1	; 11

#undef BAUD
#undef BAUD_TOL

    /* Set parity, stop bits (one), and character size (eight) */
    UCSR0C = BIT(UCSZ01) | BIT(UCSZ00);
    18c2:	86 e0       	ldi	r24, 0x06	; 6
    18c4:	80 93 95 00 	sts	0x0095, r24
#ifdef UART_USE_CALLBACK
    /* Enable RX interrupt if application wants it */
    UCSR0B |= BIT(RXCIE0) | BIT(RXEN0) | BIT(TXEN0);
    enableInterrupts();
#else
    UCSR0B |= BIT(RXEN0) | BIT(TXEN0);
    18c8:	8a b1       	in	r24, 0x0a	; 10
    18ca:	88 61       	ori	r24, 0x18	; 24
    18cc:	8a b9       	out	0x0a, r24	; 10

    uart_enable();

#ifdef _STDIO_H_
    /* USART0 becomes stdin and stdout with avr-libc */
    stdout = &uart0;
    18ce:	83 e0       	ldi	r24, 0x03	; 3
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	90 93 c2 01 	sts	0x01C2, r25
    18d6:	80 93 c1 01 	sts	0x01C1, r24
    stdin = &uart0;
    18da:	90 93 c0 01 	sts	0x01C0, r25
    18de:	80 93 bf 01 	sts	0x01BF, r24
    stderr = &uart0;
    18e2:	90 93 c4 01 	sts	0x01C4, r25
    18e6:	80 93 c3 01 	sts	0x01C3, r24
	uart_init();


	uc_sw_MUX_ACC_EN_LO;
    18ea:	ab 98       	cbi	0x15, 3	; 21
    18ec:	88 ee       	ldi	r24, 0xE8	; 232
    18ee:	93 e0       	ldi	r25, 0x03	; 3
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <main+0x19a>
	delay_us(500);
	
for(j=0;j<16;j++)
    18f4:	10 92 9c 01 	sts	0x019C, r1
    18f8:	08 ec       	ldi	r16, 0xC8	; 200
    18fa:	10 e0       	ldi	r17, 0x00	; 0
    18fc:	28 c0       	rjmp	.+80     	; 0x194e <main+0x1f8>
{


	if(j&0x01)uc_sw_MUX_A0_HI;
    18fe:	80 ff       	sbrs	r24, 0
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <main+0x1b0>
    1902:	af 9a       	sbi	0x15, 7	; 21
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <main+0x1b2>
	else uc_sw_MUX_A0_LO;
    1906:	af 98       	cbi	0x15, 7	; 21
	if(j&0x02)uc_sw_MUX_A1_HI;
    1908:	81 ff       	sbrs	r24, 1
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <main+0x1ba>
    190c:	ae 9a       	sbi	0x15, 6	; 21
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <main+0x1bc>
	else uc_sw_MUX_A1_LO;
    1910:	ae 98       	cbi	0x15, 6	; 21
	if(j&0x04)uc_sw_MUX_A2_HI;
    1912:	82 ff       	sbrs	r24, 2
    1914:	02 c0       	rjmp	.+4      	; 0x191a <main+0x1c4>
    1916:	ad 9a       	sbi	0x15, 5	; 21
    1918:	01 c0       	rjmp	.+2      	; 0x191c <main+0x1c6>
	else uc_sw_MUX_A2_LO;
    191a:	ad 98       	cbi	0x15, 5	; 21
	if(j&0x08)uc_sw_MUX_A3_HI;
    191c:	83 ff       	sbrs	r24, 3
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <main+0x1ce>
    1920:	ac 9a       	sbi	0x15, 4	; 21
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <main+0x1d0>
	else uc_sw_MUX_A3_LO;
    1924:	ac 98       	cbi	0x15, 4	; 21
    1926:	c8 01       	movw	r24, r16
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <main+0x1d2>
	delay_us(100);
	adxl345_spi_write(0x31,0x08);
    192c:	81 e3       	ldi	r24, 0x31	; 49
    192e:	68 e0       	ldi	r22, 0x08	; 8
    1930:	6b dd       	rcall	.-1322   	; 0x1408 <adxl345_spi_write.1523>
	adxl345_spi_write(0x31,0x08);	
    1932:	81 e3       	ldi	r24, 0x31	; 49
    1934:	68 e0       	ldi	r22, 0x08	; 8
    1936:	68 dd       	rcall	.-1328   	; 0x1408 <adxl345_spi_write.1523>
	
	adxl345_spi_write(0x2D,0x08);		// start measurement
    1938:	8d e2       	ldi	r24, 0x2D	; 45
    193a:	68 e0       	ldi	r22, 0x08	; 8
    193c:	65 dd       	rcall	.-1334   	; 0x1408 <adxl345_spi_write.1523>
	adxl345_spi_write(0x31,0x08);
    193e:	81 e3       	ldi	r24, 0x31	; 49
    1940:	68 e0       	ldi	r22, 0x08	; 8
    1942:	62 dd       	rcall	.-1340   	; 0x1408 <adxl345_spi_write.1523>


	uc_sw_MUX_ACC_EN_LO;
	delay_us(500);
	
for(j=0;j<16;j++)
    1944:	80 91 9c 01 	lds	r24, 0x019C
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	80 93 9c 01 	sts	0x019C, r24
    194e:	80 91 9c 01 	lds	r24, 0x019C
    1952:	80 31       	cpi	r24, 0x10	; 16
    1954:	a0 f2       	brcs	.-88     	; 0x18fe <main+0x1a8>
			uc_sw_MUX_ACC_EN_LO;//Connect interface
			delay_us(2);
			
			
		txBuffer[0+6*j+3] = adxl345_spi_read(0xB2);
		txBuffer[1+6*j+3] = adxl345_spi_read(0xB3);	
    1956:	16 e0       	ldi	r17, 0x06	; 6
    1958:	e1 2e       	mov	r14, r17
        txBuffer[2+6*j+3] = adxl345_spi_read(0xB4);
    195a:	b3 e0       	ldi	r27, 0x03	; 3
    195c:	fb 2e       	mov	r15, r27
				for (i=0;i<3;i++)
		{
		
		if(0x80&txBuffer[1+2*i+6*j+3])tempresult=((((txBuffer[0+2*i+6*j+3])^0xFF)+1)+256*((((txBuffer[2*i+1+6*j+3])^0xFF))))*(-1.0/256);
		else tempresult=(txBuffer[2*i+6*j+3]+256*(txBuffer[2*i+1+6*j+3]))*(1.0/256);
		snprintf(&Bdata[0],9,"%f",tempresult);
    195e:	a1 ea       	ldi	r26, 0xA1	; 161
    1960:	ca 2e       	mov	r12, r26
    1962:	a1 e0       	ldi	r26, 0x01	; 1
    1964:	da 2e       	mov	r13, r26
    1966:	f9 e0       	ldi	r31, 0x09	; 9
    1968:	af 2e       	mov	r10, r31
    196a:	b1 2c       	mov	r11, r1
    196c:	e0 e0       	ldi	r30, 0x00	; 0
    196e:	8e 2e       	mov	r8, r30
    1970:	e1 e0       	ldi	r30, 0x01	; 1
    1972:	9e 2e       	mov	r9, r30
        statusByte = getByte();
    } while (!(statusByte & BIT(RSSI_VALID)));
#endif

    /* Write packet to the TX FIFO (footer is appended automatically) */
    writeFifo(&packetLength, 1);                    /* Packet Length */
    1974:	3e 01       	movw	r6, r28
    1976:	08 94       	sec
    1978:	61 1c       	adc	r6, r1
    197a:	71 1c       	adc	r7, r1
    writeFifo((uint8_t*)&frameControlField, 2);     /* Frame control field */
    197c:	74 e0       	ldi	r23, 0x04	; 4
    197e:	47 2e       	mov	r4, r23
    1980:	51 2c       	mov	r5, r1
    1982:	4c 0e       	add	r4, r28
    1984:	5d 1e       	adc	r5, r29
    writeFifo(&txSeqNumber, 1);                     /* Sequence Number */
    writeFifo((uint8_t*)&panId, 2);                 /* PAN ID */
    writeFifo((uint8_t*)&address, 2);               /* Destination address */
    1986:	62 e0       	ldi	r22, 0x02	; 2
    1988:	26 2e       	mov	r2, r22
    198a:	31 2c       	mov	r3, r1
    198c:	2c 0e       	add	r2, r28
    198e:	3d 1e       	adc	r3, r29
	adxl345_spi_write(0x2D,0x08);		// start measurement
	adxl345_spi_write(0x31,0x08);
	}
    for (;;) {
	
		uc_sw_MUX_BEND_EN_HI;//Interface Disabled
    1990:	aa 9a       	sbi	0x15, 2	; 21
		uc_sw_MUX_ACC_EN_HI;//Disconnect interface
    1992:	ab 9a       	sbi	0x15, 3	; 21
	
		
	//read accelerometers 
	txBuffer[0] = '-';
    1994:	2d e2       	ldi	r18, 0x2D	; 45
    1996:	20 93 28 01 	sts	0x0128, r18
	txBuffer[1] = '-';
    199a:	20 93 29 01 	sts	0x0129, r18
	
	putchar('-');
    199e:	60 91 c1 01 	lds	r22, 0x01C1
    19a2:	70 91 c2 01 	lds	r23, 0x01C2
    19a6:	8d e2       	ldi	r24, 0x2D	; 45
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	91 d4       	rcall	.+2338   	; 0x22ce <fputc>
	putchar('-');
    19ac:	60 91 c1 01 	lds	r22, 0x01C1
    19b0:	70 91 c2 01 	lds	r23, 0x01C2
    19b4:	8d e2       	ldi	r24, 0x2D	; 45
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	8a d4       	rcall	.+2324   	; 0x22ce <fputc>
	printf("%u,",timer0_ticks);
    19ba:	80 91 bc 01 	lds	r24, 0x01BC
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <main+0x26a>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <main+0x26c>
    19c2:	e1 ee       	ldi	r30, 0xE1	; 225
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	ad b7       	in	r26, 0x3d	; 61
    19c8:	be b7       	in	r27, 0x3e	; 62
    19ca:	12 96       	adiw	r26, 0x02	; 2
    19cc:	fc 93       	st	X, r31
    19ce:	ee 93       	st	-X, r30
    19d0:	11 97       	sbiw	r26, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	14 96       	adiw	r26, 0x04	; 4
    19d6:	9c 93       	st	X, r25
    19d8:	8e 93       	st	-X, r24
    19da:	13 97       	sbiw	r26, 0x03	; 3
    19dc:	a4 d4       	rcall	.+2376   	; 0x2326 <printf_P>
		for(j=2;j<5;j++)
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	80 93 9c 01 	sts	0x019C, r24
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	1c c1       	rjmp	.+568    	; 0x1c26 <main+0x4d0>
		{
			if(j&0x01)uc_sw_MUX_A0_HI;
    19ee:	0e 2f       	mov	r16, r30
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	e0 ff       	sbrs	r30, 0
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <main+0x2a4>
    19f6:	af 9a       	sbi	0x15, 7	; 21
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <main+0x2a6>
			else uc_sw_MUX_A0_LO;
    19fa:	af 98       	cbi	0x15, 7	; 21
			if(j&0x02)uc_sw_MUX_A1_HI;
    19fc:	01 ff       	sbrs	r16, 1
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <main+0x2ae>
    1a00:	ae 9a       	sbi	0x15, 6	; 21
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <main+0x2b0>
			else uc_sw_MUX_A1_LO;
    1a04:	ae 98       	cbi	0x15, 6	; 21
			if(j&0x04)uc_sw_MUX_A2_HI;
    1a06:	02 ff       	sbrs	r16, 2
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <main+0x2b8>
    1a0a:	ad 9a       	sbi	0x15, 5	; 21
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <main+0x2ba>
			else uc_sw_MUX_A2_LO;
    1a0e:	ad 98       	cbi	0x15, 5	; 21
			if(j&0x08)uc_sw_MUX_A3_HI;
    1a10:	03 ff       	sbrs	r16, 3
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <main+0x2c2>
    1a14:	ac 9a       	sbi	0x15, 4	; 21
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <main+0x2c4>
			else uc_sw_MUX_A3_LO;
    1a18:	ac 98       	cbi	0x15, 4	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a1a:	85 e0       	ldi	r24, 0x05	; 5
    1a1c:	8a 95       	dec	r24
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <main+0x2c6>
			delay_us(2);
			uc_sw_MUX_ACC_EN_LO;//Connect interface
    1a20:	ab 98       	cbi	0x15, 3	; 21
    1a22:	85 e0       	ldi	r24, 0x05	; 5
    1a24:	8a 95       	dec	r24
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <main+0x2ce>
			delay_us(2);
			
			
		txBuffer[0+6*j+3] = adxl345_spi_read(0xB2);
    1a28:	82 eb       	ldi	r24, 0xB2	; 178
    1a2a:	21 dd       	rcall	.-1470   	; 0x146e <adxl345_spi_read.1525>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	ee 0f       	add	r30, r30
    1a30:	ff 1f       	adc	r31, r31
    1a32:	e0 0f       	add	r30, r16
    1a34:	f1 1f       	adc	r31, r17
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	e8 5d       	subi	r30, 0xD8	; 216
    1a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3e:	83 83       	std	Z+3, r24	; 0x03
		txBuffer[1+6*j+3] = adxl345_spi_read(0xB3);	
    1a40:	80 91 9c 01 	lds	r24, 0x019C
    1a44:	8e 9d       	mul	r24, r14
    1a46:	80 01       	movw	r16, r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	0c 5f       	subi	r16, 0xFC	; 252
    1a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4e:	83 eb       	ldi	r24, 0xB3	; 179
    1a50:	0e dd       	rcall	.-1508   	; 0x146e <adxl345_spi_read.1525>
    1a52:	08 5d       	subi	r16, 0xD8	; 216
    1a54:	1e 4f       	sbci	r17, 0xFE	; 254
    1a56:	d8 01       	movw	r26, r16
    1a58:	8c 93       	st	X, r24
        txBuffer[2+6*j+3] = adxl345_spi_read(0xB4);
    1a5a:	80 91 9c 01 	lds	r24, 0x019C
    1a5e:	8f 9d       	mul	r24, r15
    1a60:	80 01       	movw	r16, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	00 0f       	add	r16, r16
    1a66:	11 1f       	adc	r17, r17
    1a68:	0b 5f       	subi	r16, 0xFB	; 251
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	84 eb       	ldi	r24, 0xB4	; 180
    1a6e:	ff dc       	rcall	.-1538   	; 0x146e <adxl345_spi_read.1525>
    1a70:	08 5d       	subi	r16, 0xD8	; 216
    1a72:	1e 4f       	sbci	r17, 0xFE	; 254
    1a74:	f8 01       	movw	r30, r16
    1a76:	80 83       	st	Z, r24
        txBuffer[3+6*j+3] = adxl345_spi_read(0xB5);
    1a78:	80 91 9c 01 	lds	r24, 0x019C
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	8c 01       	movw	r16, r24
    1a82:	00 0f       	add	r16, r16
    1a84:	11 1f       	adc	r17, r17
    1a86:	08 0f       	add	r16, r24
    1a88:	19 1f       	adc	r17, r25
    1a8a:	00 0f       	add	r16, r16
    1a8c:	11 1f       	adc	r17, r17
    1a8e:	85 eb       	ldi	r24, 0xB5	; 181
    1a90:	ee dc       	rcall	.-1572   	; 0x146e <adxl345_spi_read.1525>
    1a92:	08 5d       	subi	r16, 0xD8	; 216
    1a94:	1e 4f       	sbci	r17, 0xFE	; 254
    1a96:	d8 01       	movw	r26, r16
    1a98:	8c 93       	st	X, r24
        txBuffer[4+6*j+3] = adxl345_spi_read(0xB6);
    1a9a:	80 91 9c 01 	lds	r24, 0x019C
    1a9e:	8e 9d       	mul	r24, r14
    1aa0:	80 01       	movw	r16, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	09 5f       	subi	r16, 0xF9	; 249
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	86 eb       	ldi	r24, 0xB6	; 182
    1aaa:	e1 dc       	rcall	.-1598   	; 0x146e <adxl345_spi_read.1525>
    1aac:	08 5d       	subi	r16, 0xD8	; 216
    1aae:	1e 4f       	sbci	r17, 0xFE	; 254
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	80 83       	st	Z, r24
        txBuffer[5+6*j+3] = adxl345_spi_read(0xB7);
    1ab4:	80 91 9c 01 	lds	r24, 0x019C
    1ab8:	8e 9d       	mul	r24, r14
    1aba:	80 01       	movw	r16, r0
    1abc:	11 24       	eor	r1, r1
    1abe:	08 5f       	subi	r16, 0xF8	; 248
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	87 eb       	ldi	r24, 0xB7	; 183
    1ac4:	d4 dc       	rcall	.-1624   	; 0x146e <adxl345_spi_read.1525>
    1ac6:	08 5d       	subi	r16, 0xD8	; 216
    1ac8:	1e 4f       	sbci	r17, 0xFE	; 254
    1aca:	d8 01       	movw	r26, r16
    1acc:	8c 93       	st	X, r24
		uc_sw_MUX_ACC_EN_HI;//Disconnect interface
    1ace:	ab 9a       	sbi	0x15, 3	; 21
		if(DEBUGGING_ON)
		{
				for (i=0;i<3;i++)
    1ad0:	10 92 9b 01 	sts	0x019B, r1
    1ad4:	9e c0       	rjmp	.+316    	; 0x1c12 <main+0x4bc>
		{
		
		if(0x80&txBuffer[1+2*i+6*j+3])tempresult=((((txBuffer[0+2*i+6*j+3])^0xFF)+1)+256*((((txBuffer[2*i+1+6*j+3])^0xFF))))*(-1.0/256);
    1ad6:	9f 9d       	mul	r25, r15
    1ad8:	c0 01       	movw	r24, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	82 0f       	add	r24, r18
    1ade:	91 1d       	adc	r25, r1
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e4 5d       	subi	r30, 0xD4	; 212
    1ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aea:	20 81       	ld	r18, Z
    1aec:	dc 01       	movw	r26, r24
    1aee:	27 ff       	sbrs	r18, 7
    1af0:	18 c0       	rjmp	.+48     	; 0x1b22 <main+0x3cc>
    1af2:	a8 5d       	subi	r26, 0xD8	; 216
    1af4:	be 4f       	sbci	r27, 0xFE	; 254
    1af6:	13 96       	adiw	r26, 0x03	; 3
    1af8:	6c 91       	ld	r22, X
    1afa:	60 95       	com	r22
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	6f 5f       	subi	r22, 0xFF	; 255
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	20 95       	com	r18
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	32 2f       	mov	r19, r18
    1b08:	22 27       	eor	r18, r18
    1b0a:	62 0f       	add	r22, r18
    1b0c:	73 1f       	adc	r23, r19
    1b0e:	88 27       	eor	r24, r24
    1b10:	77 fd       	sbrc	r23, 7
    1b12:	80 95       	com	r24
    1b14:	98 2f       	mov	r25, r24
    1b16:	6f db       	rcall	.-2338   	; 0x11f6 <__floatsisf>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5b eb       	ldi	r21, 0xBB	; 187
    1b20:	13 c0       	rjmp	.+38     	; 0x1b48 <main+0x3f2>
		else tempresult=(txBuffer[2*i+6*j+3]+256*(txBuffer[2*i+1+6*j+3]))*(1.0/256);
    1b22:	62 2f       	mov	r22, r18
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	76 2f       	mov	r23, r22
    1b28:	66 27       	eor	r22, r22
    1b2a:	a8 5d       	subi	r26, 0xD8	; 216
    1b2c:	be 4f       	sbci	r27, 0xFE	; 254
    1b2e:	13 96       	adiw	r26, 0x03	; 3
    1b30:	2c 91       	ld	r18, X
    1b32:	62 0f       	add	r22, r18
    1b34:	71 1d       	adc	r23, r1
    1b36:	88 27       	eor	r24, r24
    1b38:	77 fd       	sbrc	r23, 7
    1b3a:	80 95       	com	r24
    1b3c:	98 2f       	mov	r25, r24
    1b3e:	5b db       	rcall	.-2378   	; 0x11f6 <__floatsisf>
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5b e3       	ldi	r21, 0x3B	; 59
    1b48:	91 db       	rcall	.-2270   	; 0x126c <__mulsf3>
    1b4a:	60 93 9d 01 	sts	0x019D, r22
    1b4e:	70 93 9e 01 	sts	0x019E, r23
    1b52:	80 93 9f 01 	sts	0x019F, r24
    1b56:	90 93 a0 01 	sts	0x01A0, r25
		snprintf(&Bdata[0],9,"%f",tempresult);
    1b5a:	ed b7       	in	r30, 0x3d	; 61
    1b5c:	fe b7       	in	r31, 0x3e	; 62
    1b5e:	3a 97       	sbiw	r30, 0x0a	; 10
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	fe bf       	out	0x3e, r31	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	ed bf       	out	0x3d, r30	; 61
    1b6a:	31 96       	adiw	r30, 0x01	; 1
    1b6c:	ad b7       	in	r26, 0x3d	; 61
    1b6e:	be b7       	in	r27, 0x3e	; 62
    1b70:	12 96       	adiw	r26, 0x02	; 2
    1b72:	dc 92       	st	X, r13
    1b74:	ce 92       	st	-X, r12
    1b76:	11 97       	sbiw	r26, 0x01	; 1
    1b78:	b3 82       	std	Z+3, r11	; 0x03
    1b7a:	a2 82       	std	Z+2, r10	; 0x02
    1b7c:	95 82       	std	Z+5, r9	; 0x05
    1b7e:	84 82       	std	Z+4, r8	; 0x04
    1b80:	80 91 9d 01 	lds	r24, 0x019D
    1b84:	90 91 9e 01 	lds	r25, 0x019E
    1b88:	a0 91 9f 01 	lds	r26, 0x019F
    1b8c:	b0 91 a0 01 	lds	r27, 0x01A0
    1b90:	86 83       	std	Z+6, r24	; 0x06
    1b92:	97 83       	std	Z+7, r25	; 0x07
    1b94:	a0 87       	std	Z+8, r26	; 0x08
    1b96:	b1 87       	std	Z+9, r27	; 0x09
    1b98:	e9 d3       	rcall	.+2002   	; 0x236c <snprintf>
			//putchar('C');
			//putchar('C');
			//putHex_JT(j);
			//putchar(' ');
			//putchar(' ');
			putchar(Bdata[0]);
    1b9a:	ed b7       	in	r30, 0x3d	; 61
    1b9c:	fe b7       	in	r31, 0x3e	; 62
    1b9e:	3a 96       	adiw	r30, 0x0a	; 10
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	fe bf       	out	0x3e, r31	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	ed bf       	out	0x3d, r30	; 61
    1baa:	80 91 a1 01 	lds	r24, 0x01A1
    1bae:	60 91 c1 01 	lds	r22, 0x01C1
    1bb2:	70 91 c2 01 	lds	r23, 0x01C2
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	8a d3       	rcall	.+1812   	; 0x22ce <fputc>
			putchar(Bdata[1]);
    1bba:	80 91 a2 01 	lds	r24, 0x01A2
    1bbe:	60 91 c1 01 	lds	r22, 0x01C1
    1bc2:	70 91 c2 01 	lds	r23, 0x01C2
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	82 d3       	rcall	.+1796   	; 0x22ce <fputc>
			putchar(Bdata[2]);
    1bca:	80 91 a3 01 	lds	r24, 0x01A3
    1bce:	60 91 c1 01 	lds	r22, 0x01C1
    1bd2:	70 91 c2 01 	lds	r23, 0x01C2
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	7a d3       	rcall	.+1780   	; 0x22ce <fputc>
			putchar(Bdata[3]);
    1bda:	80 91 a4 01 	lds	r24, 0x01A4
    1bde:	60 91 c1 01 	lds	r22, 0x01C1
    1be2:	70 91 c2 01 	lds	r23, 0x01C2
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	72 d3       	rcall	.+1764   	; 0x22ce <fputc>
			putchar(Bdata[4]);
    1bea:	80 91 a5 01 	lds	r24, 0x01A5
    1bee:	60 91 c1 01 	lds	r22, 0x01C1
    1bf2:	70 91 c2 01 	lds	r23, 0x01C2
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	6a d3       	rcall	.+1748   	; 0x22ce <fputc>
			putchar(',');
    1bfa:	60 91 c1 01 	lds	r22, 0x01C1
    1bfe:	70 91 c2 01 	lds	r23, 0x01C2
    1c02:	8c e2       	ldi	r24, 0x2C	; 44
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	63 d3       	rcall	.+1734   	; 0x22ce <fputc>
        txBuffer[4+6*j+3] = adxl345_spi_read(0xB6);
        txBuffer[5+6*j+3] = adxl345_spi_read(0xB7);
		uc_sw_MUX_ACC_EN_HI;//Disconnect interface
		if(DEBUGGING_ON)
		{
				for (i=0;i<3;i++)
    1c08:	80 91 9b 01 	lds	r24, 0x019B
    1c0c:	8f 5f       	subi	r24, 0xFF	; 255
    1c0e:	80 93 9b 01 	sts	0x019B, r24
    1c12:	20 91 9b 01 	lds	r18, 0x019B
    1c16:	90 91 9c 01 	lds	r25, 0x019C
    1c1a:	23 30       	cpi	r18, 0x03	; 3
    1c1c:	08 f4       	brcc	.+2      	; 0x1c20 <main+0x4ca>
    1c1e:	5b cf       	rjmp	.-330    	; 0x1ad6 <main+0x380>
	txBuffer[1] = '-';
	
	putchar('-');
	putchar('-');
	printf("%u,",timer0_ticks);
		for(j=2;j<5;j++)
    1c20:	9f 5f       	subi	r25, 0xFF	; 255
    1c22:	90 93 9c 01 	sts	0x019C, r25
    1c26:	e0 91 9c 01 	lds	r30, 0x019C
    1c2a:	e5 30       	cpi	r30, 0x05	; 5
    1c2c:	08 f4       	brcc	.+2      	; 0x1c30 <main+0x4da>
    1c2e:	df ce       	rjmp	.-578    	; 0x19ee <main+0x298>
		}
		}
				if(DEBUGGING_ON)
		{
		}
		rf_send(DEST_ADDR, txBuffer, 99);
    1c30:	80 e8       	ldi	r24, 0x80	; 128
    1c32:	94 e8       	ldi	r25, 0x84	; 132
    1c34:	9b 83       	std	Y+3, r25	; 0x03
    1c36:	8a 83       	std	Y+2, r24	; 0x02
}


void rf_send(uint16_t address, const uint8_t* msg, uint8_t length)
{
    uint16_t frameControlField = RF_FCF_NOACK;
    1c38:	81 e6       	ldi	r24, 0x61	; 97
    1c3a:	98 e8       	ldi	r25, 0x88	; 136
    1c3c:	9d 83       	std	Y+5, r25	; 0x05
    1c3e:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t packetLength = length + RF_PACKET_OVERHEAD_SIZE;
    1c40:	8e e6       	ldi	r24, 0x6E	; 110
    1c42:	89 83       	std	Y+1, r24	; 0x01
    if (length > RF_MAX_PAYLOAD_SIZE) {
        return;
    }

    /* Turn radio to standby mode, and save original mode */
    oldMode = rf_mode;
    1c44:	10 91 11 01 	lds	r17, 0x0111
    rf_setMode(RF_MODE_STANDBY);
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	14 dd       	rcall	.-1496   	; 0x1674 <rf_setMode.1476>

    /* Wait until the transceiver is idle */
    while (isFifop() || isSfd()) {
    1c4c:	0c 99       	sbic	0x01, 4	; 1
    1c4e:	fe cf       	rjmp	.-4      	; 0x1c4c <main+0x4f6>
    1c50:	84 99       	sbic	0x10, 4	; 16
    1c52:	fc cf       	rjmp	.-8      	; 0x1c4c <main+0x4f6>
        ;
    }

    /* Disable interrupts while accessing SPI */
    disableInterrupts();
    1c54:	f8 94       	cli

    /* Flush the TX FIFO buffer */
    sendByte(SFLUSHTX);
    1c56:	89 e0       	ldi	r24, 0x09	; 9
    1c58:	06 dd       	rcall	.-1524   	; 0x1666 <sendByte.9894>
        statusByte = getByte();
    } while (!(statusByte & BIT(RSSI_VALID)));
#endif

    /* Write packet to the TX FIFO (footer is appended automatically) */
    writeFifo(&packetLength, 1);                    /* Packet Length */
    1c5a:	c3 01       	movw	r24, r6
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	66 dd       	rcall	.-1332   	; 0x172c <writeFifo.9902>
    writeFifo((uint8_t*)&frameControlField, 2);     /* Frame control field */
    1c60:	c2 01       	movw	r24, r4
    1c62:	62 e0       	ldi	r22, 0x02	; 2
    1c64:	63 dd       	rcall	.-1338   	; 0x172c <writeFifo.9902>
    writeFifo(&txSeqNumber, 1);                     /* Sequence Number */
    1c66:	89 e1       	ldi	r24, 0x19	; 25
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	5f dd       	rcall	.-1346   	; 0x172c <writeFifo.9902>
    writeFifo((uint8_t*)&panId, 2);                 /* PAN ID */
    1c6e:	82 e1       	ldi	r24, 0x12	; 18
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	62 e0       	ldi	r22, 0x02	; 2
    1c74:	5b dd       	rcall	.-1354   	; 0x172c <writeFifo.9902>
    writeFifo((uint8_t*)&address, 2);               /* Destination address */
    1c76:	c1 01       	movw	r24, r2
    1c78:	62 e0       	ldi	r22, 0x02	; 2
    1c7a:	58 dd       	rcall	.-1360   	; 0x172c <writeFifo.9902>
    writeFifo((uint8_t*)&shortAddress, 2);          /* Source address */
    1c7c:	84 e1       	ldi	r24, 0x14	; 20
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	62 e0       	ldi	r22, 0x02	; 2
    1c82:	54 dd       	rcall	.-1368   	; 0x172c <writeFifo.9902>
    writeFifo(msg, length);                         /* Payload */
    1c84:	88 e2       	ldi	r24, 0x28	; 40
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	63 e6       	ldi	r22, 0x63	; 99
    1c8a:	50 dd       	rcall	.-1376   	; 0x172c <writeFifo.9902>

    /* Send packet */
#ifdef RF_CARRIER_DETECT
    sendByte(STXONCCA);
#else
    sendByte(STXON);
    1c8c:	84 e0       	ldi	r24, 0x04	; 4
    1c8e:	eb dc       	rcall	.-1578   	; 0x1666 <sendByte.9894>
#endif

    /* Wait until transmission starts (SFD field has been sent) */
    while (!isSfd()) {
    1c90:	84 9b       	sbis	0x10, 4	; 16
    1c92:	fe cf       	rjmp	.-4      	; 0x1c90 <main+0x53a>
        ;
    }

    /* Increment the sequence number*/
    txSeqNumber++;
    1c94:	80 91 19 01 	lds	r24, 0x0119
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	80 93 19 01 	sts	0x0119, r24
        sendByte(SRFOFF);
    }
#endif

    /* Return to original mode */
    rf_setMode(oldMode);
    1c9e:	81 2f       	mov	r24, r17
    1ca0:	e9 dc       	rcall	.-1582   	; 0x1674 <rf_setMode.1476>

    /* Turn interrupts back on */
    enableInterrupts();
    1ca2:	78 94       	sei
		//delay_ms(7);
		//rf_send(DEST_ADDR, txBuffer, 99);
		
	
			
		for(j=2;j<5;j++)
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	80 93 9c 01 	sts	0x019C, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1caa:	04 ef       	ldi	r16, 0xF4	; 244
    1cac:	11 e0       	ldi	r17, 0x01	; 1
    1cae:	06 c1       	rjmp	.+524    	; 0x1ebc <main+0x766>
		{
			if(j&0x01)uc_sw_MUX_A0_HI;
    1cb0:	80 ff       	sbrs	r24, 0
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <main+0x562>
    1cb4:	af 9a       	sbi	0x15, 7	; 21
    1cb6:	01 c0       	rjmp	.+2      	; 0x1cba <main+0x564>
			else uc_sw_MUX_A0_LO;
    1cb8:	af 98       	cbi	0x15, 7	; 21
			if(j&0x02)uc_sw_MUX_A1_HI;
    1cba:	81 ff       	sbrs	r24, 1
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <main+0x56c>
    1cbe:	ae 9a       	sbi	0x15, 6	; 21
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <main+0x56e>
			else uc_sw_MUX_A1_LO;
    1cc2:	ae 98       	cbi	0x15, 6	; 21
			if(j&0x04)uc_sw_MUX_A2_HI;
    1cc4:	82 ff       	sbrs	r24, 2
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <main+0x576>
    1cc8:	ad 9a       	sbi	0x15, 5	; 21
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <main+0x578>
			else uc_sw_MUX_A2_LO;
    1ccc:	ad 98       	cbi	0x15, 5	; 21
			if(j&0x08)uc_sw_MUX_A3_HI;
    1cce:	83 ff       	sbrs	r24, 3
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <main+0x580>
    1cd2:	ac 9a       	sbi	0x15, 4	; 21
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <main+0x582>
			else uc_sw_MUX_A3_LO;
    1cd6:	ac 98       	cbi	0x15, 4	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cd8:	8a e1       	ldi	r24, 0x1A	; 26
    1cda:	8a 95       	dec	r24
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <main+0x584>
			delay_us(10);
			uc_sw_MUX_BEND_EN_LO;//Interface Enabled
    1cde:	aa 98       	cbi	0x15, 2	; 21
    1ce0:	80 ef       	ldi	r24, 0xF0	; 240
    1ce2:	8a 95       	dec	r24
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <main+0x58c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ce6:	c8 01       	movw	r24, r16
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <main+0x592>
			delay_us(90);
			delay_us(250);
			delay_us(250);
			
			adc_init(2, 10, ADC_REF_VCC);
    1cec:	c8 01       	movw	r24, r16
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <main+0x598>
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	6a e0       	ldi	r22, 0x0A	; 10
    1cf6:	41 e0       	ldi	r20, 0x01	; 1
    1cf8:	22 dc       	rcall	.-1980   	; 0x153e <adc_init.1365>
			
			adcValue=adc_singleConversion();
    1cfa:	3c dc       	rcall	.-1928   	; 0x1574 <adc_singleConversion.1374>
    1cfc:	90 93 bb 01 	sts	0x01BB, r25
    1d00:	80 93 ba 01 	sts	0x01BA, r24
			//adcValue=adc_singleConversion();
			txBuffer[0+6*j+3] = HIGH_BYTE(adcValue);
    1d04:	20 91 9c 01 	lds	r18, 0x019C
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	f9 01       	movw	r30, r18
    1d0c:	ee 0f       	add	r30, r30
    1d0e:	ff 1f       	adc	r31, r31
    1d10:	e2 0f       	add	r30, r18
    1d12:	f3 1f       	adc	r31, r19
    1d14:	ee 0f       	add	r30, r30
    1d16:	ff 1f       	adc	r31, r31
    1d18:	e8 5d       	subi	r30, 0xD8	; 216
    1d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d1c:	29 2f       	mov	r18, r25
    1d1e:	33 27       	eor	r19, r19
    1d20:	23 83       	std	Z+3, r18	; 0x03
			txBuffer[1+6*j+3]= LOW_BYTE(adcValue);
    1d22:	84 83       	std	Z+4, r24	; 0x04
			
			
			adc_init(1, 10,ADC_REF_VCC);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	6a e0       	ldi	r22, 0x0A	; 10
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	09 dc       	rcall	.-2030   	; 0x153e <adc_init.1365>
			//delay_us(10);
			adcValue=adc_singleConversion();
    1d2c:	23 dc       	rcall	.-1978   	; 0x1574 <adc_singleConversion.1374>
    1d2e:	90 93 bb 01 	sts	0x01BB, r25
    1d32:	80 93 ba 01 	sts	0x01BA, r24
			//adcValue=adc_singleConversion();
			txBuffer[2+6*j+3] = HIGH_BYTE(adcValue);
    1d36:	20 91 9c 01 	lds	r18, 0x019C
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	f9 01       	movw	r30, r18
    1d3e:	ee 0f       	add	r30, r30
    1d40:	ff 1f       	adc	r31, r31
    1d42:	e2 0f       	add	r30, r18
    1d44:	f3 1f       	adc	r31, r19
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	e6 5d       	subi	r30, 0xD6	; 214
    1d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4e:	49 2f       	mov	r20, r25
    1d50:	55 27       	eor	r21, r21
    1d52:	43 83       	std	Z+3, r20	; 0x03
			txBuffer[3+6*j+3] = LOW_BYTE(adcValue);
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	f9 01       	movw	r30, r18
    1d5a:	ee 0f       	add	r30, r30
    1d5c:	ff 1f       	adc	r31, r31
    1d5e:	e2 0f       	add	r30, r18
    1d60:	f3 1f       	adc	r31, r19
    1d62:	ee 0f       	add	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	e8 5d       	subi	r30, 0xD8	; 216
    1d68:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6a:	80 83       	st	Z, r24
			
			adc_init(3, 10,ADC_REF_VCC);
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	6a e0       	ldi	r22, 0x0A	; 10
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	e5 db       	rcall	.-2102   	; 0x153e <adc_init.1365>
			//adc_init(3, 10,ADC_REF_INTERNAL);
			//delay_us(100);
			adcValue=adc_singleConversion();
    1d74:	ff db       	rcall	.-2050   	; 0x1574 <adc_singleConversion.1374>
    1d76:	90 93 bb 01 	sts	0x01BB, r25
    1d7a:	80 93 ba 01 	sts	0x01BA, r24

			//adcValue=adc_singleConversion();
			txBuffer[4+6*j+3] = HIGH_BYTE(adcValue);
    1d7e:	20 91 9c 01 	lds	r18, 0x019C
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	f9 01       	movw	r30, r18
    1d86:	ee 0f       	add	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	e2 0f       	add	r30, r18
    1d8c:	f3 1f       	adc	r31, r19
    1d8e:	ee 0f       	add	r30, r30
    1d90:	ff 1f       	adc	r31, r31
    1d92:	e8 5d       	subi	r30, 0xD8	; 216
    1d94:	fe 4f       	sbci	r31, 0xFE	; 254
    1d96:	29 2f       	mov	r18, r25
    1d98:	33 27       	eor	r19, r19
    1d9a:	27 83       	std	Z+7, r18	; 0x07
			txBuffer[5+6*j+3]  = LOW_BYTE(adcValue);
    1d9c:	80 87       	std	Z+8, r24	; 0x08

			
		uc_sw_MUX_BEND_EN_HI;//Disconnect interface
    1d9e:	aa 9a       	sbi	0x15, 2	; 21
		if(DEBUGGING_ON)
		{
			for (i=0;i<1;i++)
    1da0:	10 92 9b 01 	sts	0x019B, r1
    1da4:	81 c0       	rjmp	.+258    	; 0x1ea8 <main+0x752>
		{
		

		tempresult=(txBuffer[2*i+1+6*j+3]+256*((txBuffer[2*i+6*j+3])&0x03))*(3.3/1024);
    1da6:	9f 9d       	mul	r25, r15
    1da8:	f0 01       	movw	r30, r0
    1daa:	11 24       	eor	r1, r1
    1dac:	ee 0f       	add	r30, r30
    1dae:	ff 1f       	adc	r31, r31
    1db0:	df 01       	movw	r26, r30
    1db2:	a8 5d       	subi	r26, 0xD8	; 216
    1db4:	be 4f       	sbci	r27, 0xFE	; 254
    1db6:	13 96       	adiw	r26, 0x03	; 3
    1db8:	6c 91       	ld	r22, X
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	63 70       	andi	r22, 0x03	; 3
    1dbe:	70 70       	andi	r23, 0x00	; 0
    1dc0:	76 2f       	mov	r23, r22
    1dc2:	66 27       	eor	r22, r22
    1dc4:	e4 5d       	subi	r30, 0xD4	; 212
    1dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc8:	20 81       	ld	r18, Z
    1dca:	62 0f       	add	r22, r18
    1dcc:	71 1d       	adc	r23, r1
    1dce:	88 27       	eor	r24, r24
    1dd0:	77 fd       	sbrc	r23, 7
    1dd2:	80 95       	com	r24
    1dd4:	98 2f       	mov	r25, r24
    1dd6:	0f da       	rcall	.-3042   	; 0x11f6 <__floatsisf>
    1dd8:	23 e3       	ldi	r18, 0x33	; 51
    1dda:	33 e3       	ldi	r19, 0x33	; 51
    1ddc:	43 e5       	ldi	r20, 0x53	; 83
    1dde:	5b e3       	ldi	r21, 0x3B	; 59
    1de0:	45 da       	rcall	.-2934   	; 0x126c <__mulsf3>
    1de2:	60 93 9d 01 	sts	0x019D, r22
    1de6:	70 93 9e 01 	sts	0x019E, r23
    1dea:	80 93 9f 01 	sts	0x019F, r24
    1dee:	90 93 a0 01 	sts	0x01A0, r25
		snprintf(&Bdata[0],9,"%f",tempresult);
    1df2:	2d b7       	in	r18, 0x3d	; 61
    1df4:	3e b7       	in	r19, 0x3e	; 62
    1df6:	2a 50       	subi	r18, 0x0A	; 10
    1df8:	30 40       	sbci	r19, 0x00	; 0
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	3e bf       	out	0x3e, r19	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	2d bf       	out	0x3d, r18	; 61
    1e04:	ed b7       	in	r30, 0x3d	; 61
    1e06:	fe b7       	in	r31, 0x3e	; 62
    1e08:	31 96       	adiw	r30, 0x01	; 1
    1e0a:	ad b7       	in	r26, 0x3d	; 61
    1e0c:	be b7       	in	r27, 0x3e	; 62
    1e0e:	12 96       	adiw	r26, 0x02	; 2
    1e10:	dc 92       	st	X, r13
    1e12:	ce 92       	st	-X, r12
    1e14:	11 97       	sbiw	r26, 0x01	; 1
    1e16:	b3 82       	std	Z+3, r11	; 0x03
    1e18:	a2 82       	std	Z+2, r10	; 0x02
    1e1a:	95 82       	std	Z+5, r9	; 0x05
    1e1c:	84 82       	std	Z+4, r8	; 0x04
    1e1e:	66 83       	std	Z+6, r22	; 0x06
    1e20:	77 83       	std	Z+7, r23	; 0x07
    1e22:	80 87       	std	Z+8, r24	; 0x08
    1e24:	91 87       	std	Z+9, r25	; 0x09
    1e26:	a2 d2       	rcall	.+1348   	; 0x236c <snprintf>
			
			
			
			
			if(i==0)
    1e28:	ed b7       	in	r30, 0x3d	; 61
    1e2a:	fe b7       	in	r31, 0x3e	; 62
    1e2c:	3a 96       	adiw	r30, 0x0a	; 10
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	fe bf       	out	0x3e, r31	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	ed bf       	out	0x3d, r30	; 61
    1e38:	80 91 9b 01 	lds	r24, 0x019B
    1e3c:	88 23       	and	r24, r24
    1e3e:	79 f5       	brne	.+94     	; 0x1e9e <main+0x748>
			{
				
				putchar(Bdata[0]);
    1e40:	80 91 a1 01 	lds	r24, 0x01A1
    1e44:	60 91 c1 01 	lds	r22, 0x01C1
    1e48:	70 91 c2 01 	lds	r23, 0x01C2
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	3f d2       	rcall	.+1150   	; 0x22ce <fputc>
				putchar(Bdata[1]);
    1e50:	80 91 a2 01 	lds	r24, 0x01A2
    1e54:	60 91 c1 01 	lds	r22, 0x01C1
    1e58:	70 91 c2 01 	lds	r23, 0x01C2
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	37 d2       	rcall	.+1134   	; 0x22ce <fputc>
				putchar(Bdata[2]);
    1e60:	80 91 a3 01 	lds	r24, 0x01A3
    1e64:	60 91 c1 01 	lds	r22, 0x01C1
    1e68:	70 91 c2 01 	lds	r23, 0x01C2
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	2f d2       	rcall	.+1118   	; 0x22ce <fputc>
				putchar(Bdata[3]);
    1e70:	80 91 a4 01 	lds	r24, 0x01A4
    1e74:	60 91 c1 01 	lds	r22, 0x01C1
    1e78:	70 91 c2 01 	lds	r23, 0x01C2
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	27 d2       	rcall	.+1102   	; 0x22ce <fputc>
				putchar(Bdata[4]);
    1e80:	80 91 a5 01 	lds	r24, 0x01A5
    1e84:	60 91 c1 01 	lds	r22, 0x01C1
    1e88:	70 91 c2 01 	lds	r23, 0x01C2
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	1f d2       	rcall	.+1086   	; 0x22ce <fputc>
				//putchar(Bdata[5]);---
				//putchar(Bdata[6]);---
				//putchar(Bdata[7]);---
				//putchar(Bdata[8]);
				putchar(',');
    1e90:	60 91 c1 01 	lds	r22, 0x01C1
    1e94:	70 91 c2 01 	lds	r23, 0x01C2
    1e98:	8c e2       	ldi	r24, 0x2C	; 44
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	18 d2       	rcall	.+1072   	; 0x22ce <fputc>

			
		uc_sw_MUX_BEND_EN_HI;//Disconnect interface
		if(DEBUGGING_ON)
		{
			for (i=0;i<1;i++)
    1e9e:	80 91 9b 01 	lds	r24, 0x019B
    1ea2:	8f 5f       	subi	r24, 0xFF	; 255
    1ea4:	80 93 9b 01 	sts	0x019B, r24
    1ea8:	80 91 9b 01 	lds	r24, 0x019B
    1eac:	90 91 9c 01 	lds	r25, 0x019C
    1eb0:	88 23       	and	r24, r24
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <main+0x760>
    1eb4:	78 cf       	rjmp	.-272    	; 0x1da6 <main+0x650>
		//delay_ms(7);
		//rf_send(DEST_ADDR, txBuffer, 99);
		
	
			
		for(j=2;j<5;j++)
    1eb6:	9f 5f       	subi	r25, 0xFF	; 255
    1eb8:	90 93 9c 01 	sts	0x019C, r25
    1ebc:	80 91 9c 01 	lds	r24, 0x019C
    1ec0:	85 30       	cpi	r24, 0x05	; 5
    1ec2:	08 f4       	brcc	.+2      	; 0x1ec6 <main+0x770>
    1ec4:	f5 ce       	rjmp	.-534    	; 0x1cb0 <main+0x55a>
			

		//}
		//		rf_send(DEST_ADDR, txBuffer, 99);
			//delay_ms(7);
			putchar('\n');
    1ec6:	60 91 c1 01 	lds	r22, 0x01C1
    1eca:	70 91 c2 01 	lds	r23, 0x01C2
    1ece:	8a e0       	ldi	r24, 0x0A	; 10
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	fd d1       	rcall	.+1018   	; 0x22ce <fputc>
    1ed4:	5d cd       	rjmp	.-1350   	; 0x1990 <main+0x23a>

00001ed6 <getFifo.9905>:
 *
 * @param data a pointer to where to save the data that is read.
 * @param size how many bytes to read.
 **/
static void getFifo(volatile uint8_t* data, uint8_t size)
{
    1ed6:	9c 01       	movw	r18, r24

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    1ed8:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1eda:	8f e7       	ldi	r24, 0x7F	; 127
    1edc:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1ede:	77 9b       	sbis	0x0e, 7	; 14
    1ee0:	fe cf       	rjmp	.-4      	; 0x1ede <getFifo.9905+0x8>
        ;
    }
    return SPDR;
    1ee2:	8f b1       	in	r24, 0x0f	; 15
    1ee4:	f9 01       	movw	r30, r18
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	06 c0       	rjmp	.+12     	; 0x1ef6 <getFifo.9905+0x20>


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1eea:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & BIT(SPIF))) {
    1eec:	77 9b       	sbis	0x0e, 7	; 14
    1eee:	fe cf       	rjmp	.-4      	; 0x1eec <getFifo.9905+0x16>
        ;
    }
    return SPDR;
    1ef0:	8f b1       	in	r24, 0x0f	; 15
    spi_enableCsn();
    spi_readWriteByte(RXFIFO | REG_READ);
    for (uint8_t i = 0; i < size; i++) {
        data[i] = spi_readWriteByte(0);
    1ef2:	81 93       	st	Z+, r24
 **/
static void getFifo(volatile uint8_t* data, uint8_t size)
{
    spi_enableCsn();
    spi_readWriteByte(RXFIFO | REG_READ);
    for (uint8_t i = 0; i < size; i++) {
    1ef4:	9f 5f       	subi	r25, 0xFF	; 255
    1ef6:	96 17       	cp	r25, r22
    1ef8:	c0 f3       	brcs	.-16     	; 0x1eea <getFifo.9905+0x14>

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1efa:	c0 9a       	sbi	0x18, 0	; 24
        data[i] = spi_readWriteByte(0);
    }
    spi_disableCsn();
}
    1efc:	08 95       	ret

00001efe <discardFifo.9907>:
 * Read and ignore data from the RX FIFO.
 *
 * @param size how many bytes to read and discard.
 **/
static void discardFifo(uint8_t size)
{
    1efe:	98 2f       	mov	r25, r24

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    1f00:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1f02:	8f e7       	ldi	r24, 0x7F	; 127
    1f04:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1f06:	77 9b       	sbis	0x0e, 7	; 14
    1f08:	fe cf       	rjmp	.-4      	; 0x1f06 <discardFifo.9907+0x8>
        ;
    }
    return SPDR;
    1f0a:	8f b1       	in	r24, 0x0f	; 15
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	05 c0       	rjmp	.+10     	; 0x1f1a <discardFifo.9907+0x1c>


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1f10:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & BIT(SPIF))) {
    1f12:	77 9b       	sbis	0x0e, 7	; 14
    1f14:	fe cf       	rjmp	.-4      	; 0x1f12 <discardFifo.9907+0x14>
        ;
    }
    return SPDR;
    1f16:	2f b1       	in	r18, 0x0f	; 15
    spi_enableCsn();
    spi_readWriteByte(RXFIFO | REG_READ);
    for (uint8_t i = 0; ((i < size) && isFifo()); i++){
    1f18:	8f 5f       	subi	r24, 0xFF	; 255
    1f1a:	89 17       	cp	r24, r25
    1f1c:	10 f4       	brcc	.+4      	; 0x1f22 <discardFifo.9907+0x24>
    1f1e:	0d 99       	sbic	0x01, 5	; 1
    1f20:	f7 cf       	rjmp	.-18     	; 0x1f10 <discardFifo.9907+0x12>

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1f22:	c0 9a       	sbi	0x18, 0	; 24
        spi_readWriteByte(0);
    }
    spi_disableCsn();
}
    1f24:	08 95       	ret

00001f26 <__vector_5>:

/**
 * This interrupt is triggered when a full packet is received.
 **/
ISR(RF_INT_VECTOR)
{
    1f26:	1f 92       	push	r1
    1f28:	0f 92       	push	r0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	0f 92       	push	r0
    1f2e:	0b b6       	in	r0, 0x3b	; 59
    1f30:	0f 92       	push	r0
    1f32:	11 24       	eor	r1, r1
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	2f 93       	push	r18
    1f3a:	3f 93       	push	r19
    1f3c:	4f 93       	push	r20
    1f3e:	5f 93       	push	r21
    1f40:	6f 93       	push	r22
    1f42:	7f 93       	push	r23
    1f44:	8f 93       	push	r24
    1f46:	9f 93       	push	r25
    1f48:	af 93       	push	r26
    1f4a:	bf 93       	push	r27
    1f4c:	ef 93       	push	r30
    1f4e:	ff 93       	push	r31
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <__vector_5+0x30>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <__vector_5+0x32>
    1f58:	0f 92       	push	r0
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    uint16_t frameControlField;
    uint8_t length;
    uint8_t footer[2];

    /* Check if FIFO overflow has happened */
    if((isFifop()) && (!(isFifo()))) {
    1f5e:	0c 9b       	sbis	0x01, 4	; 1
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <__vector_5+0x46>
    1f62:	0d 99       	sbic	0x01, 5	; 1
    1f64:	03 c0       	rjmp	.+6      	; 0x1f6c <__vector_5+0x46>
        sendByte(SFLUSHRX);
    1f66:	88 e0       	ldi	r24, 0x08	; 8
    1f68:	7e db       	rcall	.-2308   	; 0x1666 <sendByte.9894>
    1f6a:	2e c0       	rjmp	.+92     	; 0x1fc8 <__vector_5+0xa2>
        return;
    }

    /* Payload length */
    getFifo(&length, 1);
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	b1 df       	rcall	.-158    	; 0x1ed6 <getFifo.9905>
    length &= RF_LENGTH_MASK;
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	8f 77       	andi	r24, 0x7F	; 127
    1f78:	89 83       	std	Y+1, r24	; 0x01

    /* Ignore the packet if the length is too short */
    if (length < RF_PACKET_OVERHEAD_SIZE) {
    1f7a:	8b 30       	cpi	r24, 0x0B	; 11
    1f7c:	10 f4       	brcc	.+4      	; 0x1f82 <__vector_5+0x5c>
        discardFifo(length);
    1f7e:	bf df       	rcall	.-130    	; 0x1efe <discardFifo.9907>
    1f80:	23 c0       	rjmp	.+70     	; 0x1fc8 <__vector_5+0xa2>
        return;
    }

    /* Store payload length */
    buffer->length = length - RF_PACKET_OVERHEAD_SIZE;
    1f82:	00 91 1a 01 	lds	r16, 0x011A
    1f86:	10 91 1b 01 	lds	r17, 0x011B
    1f8a:	8b 50       	subi	r24, 0x0B	; 11
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	80 83       	st	Z, r24

    /* Start reading the rest of the data */
    getFifo((uint8_t*) &frameControlField, 2);
    1f90:	ce 01       	movw	r24, r28
    1f92:	02 96       	adiw	r24, 0x02	; 2
    1f94:	62 e0       	ldi	r22, 0x02	; 2
    1f96:	9f df       	rcall	.-194    	; 0x1ed6 <getFifo.9905>
    getFifo(&buffer->seqNumber, 1);
    1f98:	c8 01       	movw	r24, r16
    1f9a:	03 96       	adiw	r24, 0x03	; 3
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	9b df       	rcall	.-202    	; 0x1ed6 <getFifo.9905>

    /* Ignore destination address */
    discardFifo(4);
    1fa0:	84 e0       	ldi	r24, 0x04	; 4
    1fa2:	ad df       	rcall	.-166    	; 0x1efe <discardFifo.9907>

    /* Read the source address */
    getFifo((volatile uint8_t*) &buffer->srcAddress, 2);
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	62 e0       	ldi	r22, 0x02	; 2
    1faa:	95 df       	rcall	.-214    	; 0x1ed6 <getFifo.9905>

    /* Read the packet payload */
    getFifo(buffer->data, length - RF_PACKET_OVERHEAD_SIZE);
    1fac:	f8 01       	movw	r30, r16
    1fae:	85 81       	ldd	r24, Z+5	; 0x05
    1fb0:	96 81       	ldd	r25, Z+6	; 0x06
    1fb2:	69 81       	ldd	r22, Y+1	; 0x01
    1fb4:	6b 50       	subi	r22, 0x0B	; 11
    1fb6:	8f df       	rcall	.-226    	; 0x1ed6 <getFifo.9905>

    /* Read the footer to get the RSSI value */
    getFifo(footer, 2);
    1fb8:	ce 01       	movw	r24, r28
    1fba:	04 96       	adiw	r24, 0x04	; 4
    1fbc:	62 e0       	ldi	r22, 0x02	; 2
    1fbe:	8b df       	rcall	.-234    	; 0x1ed6 <getFifo.9905>
    
    /* Subtracting 45 as recommended by datasheet */
    buffer->rssi = footer[0] - 45;
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	8d 52       	subi	r24, 0x2D	; 45
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	84 83       	std	Z+4, r24	; 0x04

    /* Check CRC, and call upper layer if ok */
    if (footer[1] & RF_CRC_OK_MASK) {
        rf_callback(buffer);
    }
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	ff 91       	pop	r31
    1fd8:	ef 91       	pop	r30
    1fda:	bf 91       	pop	r27
    1fdc:	af 91       	pop	r26
    1fde:	9f 91       	pop	r25
    1fe0:	8f 91       	pop	r24
    1fe2:	7f 91       	pop	r23
    1fe4:	6f 91       	pop	r22
    1fe6:	5f 91       	pop	r21
    1fe8:	4f 91       	pop	r20
    1fea:	3f 91       	pop	r19
    1fec:	2f 91       	pop	r18
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	0f 90       	pop	r0
    1ff4:	0b be       	out	0x3b, r0	; 59
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	0f 90       	pop	r0
    1ffc:	1f 90       	pop	r1
    1ffe:	18 95       	reti

00002000 <__prologue_saves__>:
    2000:	2f 92       	push	r2
    2002:	3f 92       	push	r3
    2004:	4f 92       	push	r4
    2006:	5f 92       	push	r5
    2008:	6f 92       	push	r6
    200a:	7f 92       	push	r7
    200c:	8f 92       	push	r8
    200e:	9f 92       	push	r9
    2010:	af 92       	push	r10
    2012:	bf 92       	push	r11
    2014:	cf 92       	push	r12
    2016:	df 92       	push	r13
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	ca 1b       	sub	r28, r26
    202a:	db 0b       	sbc	r29, r27
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	09 94       	ijmp

00002038 <__ftoa_engine>:
    2038:	28 30       	cpi	r18, 0x08	; 8
    203a:	08 f0       	brcs	.+2      	; 0x203e <__ftoa_engine+0x6>
    203c:	27 e0       	ldi	r18, 0x07	; 7
    203e:	33 27       	eor	r19, r19
    2040:	da 01       	movw	r26, r20
    2042:	99 0f       	add	r25, r25
    2044:	31 1d       	adc	r19, r1
    2046:	87 fd       	sbrc	r24, 7
    2048:	91 60       	ori	r25, 0x01	; 1
    204a:	00 96       	adiw	r24, 0x00	; 0
    204c:	61 05       	cpc	r22, r1
    204e:	71 05       	cpc	r23, r1
    2050:	39 f4       	brne	.+14     	; 0x2060 <__ftoa_engine+0x28>
    2052:	32 60       	ori	r19, 0x02	; 2
    2054:	2e 5f       	subi	r18, 0xFE	; 254
    2056:	3d 93       	st	X+, r19
    2058:	30 e3       	ldi	r19, 0x30	; 48
    205a:	2a 95       	dec	r18
    205c:	e1 f7       	brne	.-8      	; 0x2056 <__ftoa_engine+0x1e>
    205e:	08 95       	ret
    2060:	9f 3f       	cpi	r25, 0xFF	; 255
    2062:	30 f0       	brcs	.+12     	; 0x2070 <__ftoa_engine+0x38>
    2064:	80 38       	cpi	r24, 0x80	; 128
    2066:	71 05       	cpc	r23, r1
    2068:	61 05       	cpc	r22, r1
    206a:	09 f0       	breq	.+2      	; 0x206e <__ftoa_engine+0x36>
    206c:	3c 5f       	subi	r19, 0xFC	; 252
    206e:	3c 5f       	subi	r19, 0xFC	; 252
    2070:	3d 93       	st	X+, r19
    2072:	91 30       	cpi	r25, 0x01	; 1
    2074:	08 f0       	brcs	.+2      	; 0x2078 <__ftoa_engine+0x40>
    2076:	80 68       	ori	r24, 0x80	; 128
    2078:	91 1d       	adc	r25, r1
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	1f 93       	push	r17
    2080:	0f 93       	push	r16
    2082:	ff 92       	push	r15
    2084:	ef 92       	push	r14
    2086:	19 2f       	mov	r17, r25
    2088:	98 7f       	andi	r25, 0xF8	; 248
    208a:	96 95       	lsr	r25
    208c:	e9 2f       	mov	r30, r25
    208e:	96 95       	lsr	r25
    2090:	96 95       	lsr	r25
    2092:	e9 0f       	add	r30, r25
    2094:	ff 27       	eor	r31, r31
    2096:	e1 5c       	subi	r30, 0xC1	; 193
    2098:	fe 4f       	sbci	r31, 0xFE	; 254
    209a:	99 27       	eor	r25, r25
    209c:	33 27       	eor	r19, r19
    209e:	ee 24       	eor	r14, r14
    20a0:	ff 24       	eor	r15, r15
    20a2:	a7 01       	movw	r20, r14
    20a4:	e7 01       	movw	r28, r14
    20a6:	05 90       	lpm	r0, Z+
    20a8:	08 94       	sec
    20aa:	07 94       	ror	r0
    20ac:	28 f4       	brcc	.+10     	; 0x20b8 <__ftoa_engine+0x80>
    20ae:	36 0f       	add	r19, r22
    20b0:	e7 1e       	adc	r14, r23
    20b2:	f8 1e       	adc	r15, r24
    20b4:	49 1f       	adc	r20, r25
    20b6:	51 1d       	adc	r21, r1
    20b8:	66 0f       	add	r22, r22
    20ba:	77 1f       	adc	r23, r23
    20bc:	88 1f       	adc	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	06 94       	lsr	r0
    20c2:	a1 f7       	brne	.-24     	; 0x20ac <__ftoa_engine+0x74>
    20c4:	05 90       	lpm	r0, Z+
    20c6:	07 94       	ror	r0
    20c8:	28 f4       	brcc	.+10     	; 0x20d4 <__ftoa_engine+0x9c>
    20ca:	e7 0e       	add	r14, r23
    20cc:	f8 1e       	adc	r15, r24
    20ce:	49 1f       	adc	r20, r25
    20d0:	56 1f       	adc	r21, r22
    20d2:	c1 1d       	adc	r28, r1
    20d4:	77 0f       	add	r23, r23
    20d6:	88 1f       	adc	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	66 1f       	adc	r22, r22
    20dc:	06 94       	lsr	r0
    20de:	a1 f7       	brne	.-24     	; 0x20c8 <__ftoa_engine+0x90>
    20e0:	05 90       	lpm	r0, Z+
    20e2:	07 94       	ror	r0
    20e4:	28 f4       	brcc	.+10     	; 0x20f0 <__ftoa_engine+0xb8>
    20e6:	f8 0e       	add	r15, r24
    20e8:	49 1f       	adc	r20, r25
    20ea:	56 1f       	adc	r21, r22
    20ec:	c7 1f       	adc	r28, r23
    20ee:	d1 1d       	adc	r29, r1
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	66 1f       	adc	r22, r22
    20f6:	77 1f       	adc	r23, r23
    20f8:	06 94       	lsr	r0
    20fa:	a1 f7       	brne	.-24     	; 0x20e4 <__ftoa_engine+0xac>
    20fc:	05 90       	lpm	r0, Z+
    20fe:	07 94       	ror	r0
    2100:	20 f4       	brcc	.+8      	; 0x210a <__ftoa_engine+0xd2>
    2102:	49 0f       	add	r20, r25
    2104:	56 1f       	adc	r21, r22
    2106:	c7 1f       	adc	r28, r23
    2108:	d8 1f       	adc	r29, r24
    210a:	99 0f       	add	r25, r25
    210c:	66 1f       	adc	r22, r22
    210e:	77 1f       	adc	r23, r23
    2110:	88 1f       	adc	r24, r24
    2112:	06 94       	lsr	r0
    2114:	a9 f7       	brne	.-22     	; 0x2100 <__ftoa_engine+0xc8>
    2116:	84 91       	lpm	r24, Z+
    2118:	10 95       	com	r17
    211a:	17 70       	andi	r17, 0x07	; 7
    211c:	41 f0       	breq	.+16     	; 0x212e <__ftoa_engine+0xf6>
    211e:	d6 95       	lsr	r29
    2120:	c7 95       	ror	r28
    2122:	57 95       	ror	r21
    2124:	47 95       	ror	r20
    2126:	f7 94       	ror	r15
    2128:	e7 94       	ror	r14
    212a:	1a 95       	dec	r17
    212c:	c1 f7       	brne	.-16     	; 0x211e <__ftoa_engine+0xe6>
    212e:	e5 ee       	ldi	r30, 0xE5	; 229
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	68 94       	set
    2134:	15 90       	lpm	r1, Z+
    2136:	15 91       	lpm	r17, Z+
    2138:	35 91       	lpm	r19, Z+
    213a:	65 91       	lpm	r22, Z+
    213c:	95 91       	lpm	r25, Z+
    213e:	05 90       	lpm	r0, Z+
    2140:	7f e2       	ldi	r23, 0x2F	; 47
    2142:	73 95       	inc	r23
    2144:	e1 18       	sub	r14, r1
    2146:	f1 0a       	sbc	r15, r17
    2148:	43 0b       	sbc	r20, r19
    214a:	56 0b       	sbc	r21, r22
    214c:	c9 0b       	sbc	r28, r25
    214e:	d0 09       	sbc	r29, r0
    2150:	c0 f7       	brcc	.-16     	; 0x2142 <__ftoa_engine+0x10a>
    2152:	e1 0c       	add	r14, r1
    2154:	f1 1e       	adc	r15, r17
    2156:	43 1f       	adc	r20, r19
    2158:	56 1f       	adc	r21, r22
    215a:	c9 1f       	adc	r28, r25
    215c:	d0 1d       	adc	r29, r0
    215e:	7e f4       	brtc	.+30     	; 0x217e <__ftoa_engine+0x146>
    2160:	70 33       	cpi	r23, 0x30	; 48
    2162:	11 f4       	brne	.+4      	; 0x2168 <__ftoa_engine+0x130>
    2164:	8a 95       	dec	r24
    2166:	e6 cf       	rjmp	.-52     	; 0x2134 <__ftoa_engine+0xfc>
    2168:	e8 94       	clt
    216a:	01 50       	subi	r16, 0x01	; 1
    216c:	30 f0       	brcs	.+12     	; 0x217a <__ftoa_engine+0x142>
    216e:	08 0f       	add	r16, r24
    2170:	0a f4       	brpl	.+2      	; 0x2174 <__ftoa_engine+0x13c>
    2172:	00 27       	eor	r16, r16
    2174:	02 17       	cp	r16, r18
    2176:	08 f4       	brcc	.+2      	; 0x217a <__ftoa_engine+0x142>
    2178:	20 2f       	mov	r18, r16
    217a:	23 95       	inc	r18
    217c:	02 2f       	mov	r16, r18
    217e:	7a 33       	cpi	r23, 0x3A	; 58
    2180:	28 f0       	brcs	.+10     	; 0x218c <__ftoa_engine+0x154>
    2182:	79 e3       	ldi	r23, 0x39	; 57
    2184:	7d 93       	st	X+, r23
    2186:	2a 95       	dec	r18
    2188:	e9 f7       	brne	.-6      	; 0x2184 <__ftoa_engine+0x14c>
    218a:	10 c0       	rjmp	.+32     	; 0x21ac <__ftoa_engine+0x174>
    218c:	7d 93       	st	X+, r23
    218e:	2a 95       	dec	r18
    2190:	89 f6       	brne	.-94     	; 0x2134 <__ftoa_engine+0xfc>
    2192:	06 94       	lsr	r0
    2194:	97 95       	ror	r25
    2196:	67 95       	ror	r22
    2198:	37 95       	ror	r19
    219a:	17 95       	ror	r17
    219c:	17 94       	ror	r1
    219e:	e1 18       	sub	r14, r1
    21a0:	f1 0a       	sbc	r15, r17
    21a2:	43 0b       	sbc	r20, r19
    21a4:	56 0b       	sbc	r21, r22
    21a6:	c9 0b       	sbc	r28, r25
    21a8:	d0 09       	sbc	r29, r0
    21aa:	98 f0       	brcs	.+38     	; 0x21d2 <__ftoa_engine+0x19a>
    21ac:	23 95       	inc	r18
    21ae:	7e 91       	ld	r23, -X
    21b0:	73 95       	inc	r23
    21b2:	7a 33       	cpi	r23, 0x3A	; 58
    21b4:	08 f0       	brcs	.+2      	; 0x21b8 <__ftoa_engine+0x180>
    21b6:	70 e3       	ldi	r23, 0x30	; 48
    21b8:	7c 93       	st	X, r23
    21ba:	20 13       	cpse	r18, r16
    21bc:	b8 f7       	brcc	.-18     	; 0x21ac <__ftoa_engine+0x174>
    21be:	7e 91       	ld	r23, -X
    21c0:	70 61       	ori	r23, 0x10	; 16
    21c2:	7d 93       	st	X+, r23
    21c4:	30 f0       	brcs	.+12     	; 0x21d2 <__ftoa_engine+0x19a>
    21c6:	83 95       	inc	r24
    21c8:	71 e3       	ldi	r23, 0x31	; 49
    21ca:	7d 93       	st	X+, r23
    21cc:	70 e3       	ldi	r23, 0x30	; 48
    21ce:	2a 95       	dec	r18
    21d0:	e1 f7       	brne	.-8      	; 0x21ca <__ftoa_engine+0x192>
    21d2:	11 24       	eor	r1, r1
    21d4:	ef 90       	pop	r14
    21d6:	ff 90       	pop	r15
    21d8:	0f 91       	pop	r16
    21da:	1f 91       	pop	r17
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	99 27       	eor	r25, r25
    21e2:	87 fd       	sbrc	r24, 7
    21e4:	90 95       	com	r25
    21e6:	08 95       	ret

000021e8 <isspace>:
    21e8:	91 11       	cpse	r25, r1
    21ea:	76 c1       	rjmp	.+748    	; 0x24d8 <__ctype_isfalse>
    21ec:	80 32       	cpi	r24, 0x20	; 32
    21ee:	19 f0       	breq	.+6      	; 0x21f6 <isspace+0xe>
    21f0:	89 50       	subi	r24, 0x09	; 9
    21f2:	85 50       	subi	r24, 0x05	; 5
    21f4:	d0 f7       	brcc	.-12     	; 0x21ea <isspace+0x2>
    21f6:	08 95       	ret

000021f8 <tolower>:
    21f8:	91 11       	cpse	r25, r1
    21fa:	08 95       	ret
    21fc:	81 54       	subi	r24, 0x41	; 65
    21fe:	8a 51       	subi	r24, 0x1A	; 26
    2200:	08 f4       	brcc	.+2      	; 0x2204 <tolower+0xc>
    2202:	80 5e       	subi	r24, 0xE0	; 224
    2204:	85 5a       	subi	r24, 0xA5	; 165
    2206:	08 95       	ret

00002208 <strchr_P>:
    2208:	fc 01       	movw	r30, r24
    220a:	05 90       	lpm	r0, Z+
    220c:	06 16       	cp	r0, r22
    220e:	21 f0       	breq	.+8      	; 0x2218 <strchr_P+0x10>
    2210:	00 20       	and	r0, r0
    2212:	d9 f7       	brne	.-10     	; 0x220a <strchr_P+0x2>
    2214:	c0 01       	movw	r24, r0
    2216:	08 95       	ret
    2218:	31 97       	sbiw	r30, 0x01	; 1
    221a:	cf 01       	movw	r24, r30
    221c:	08 95       	ret

0000221e <strnlen_P>:
    221e:	fc 01       	movw	r30, r24
    2220:	05 90       	lpm	r0, Z+
    2222:	61 50       	subi	r22, 0x01	; 1
    2224:	70 40       	sbci	r23, 0x00	; 0
    2226:	01 10       	cpse	r0, r1
    2228:	d8 f7       	brcc	.-10     	; 0x2220 <strnlen_P+0x2>
    222a:	80 95       	com	r24
    222c:	90 95       	com	r25
    222e:	8e 0f       	add	r24, r30
    2230:	9f 1f       	adc	r25, r31
    2232:	08 95       	ret

00002234 <strnlen>:
    2234:	fc 01       	movw	r30, r24
    2236:	61 50       	subi	r22, 0x01	; 1
    2238:	70 40       	sbci	r23, 0x00	; 0
    223a:	01 90       	ld	r0, Z+
    223c:	01 10       	cpse	r0, r1
    223e:	d8 f7       	brcc	.-10     	; 0x2236 <strnlen+0x2>
    2240:	80 95       	com	r24
    2242:	90 95       	com	r25
    2244:	8e 0f       	add	r24, r30
    2246:	9f 1f       	adc	r25, r31
    2248:	08 95       	ret

0000224a <fgetc>:
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	ec 01       	movw	r28, r24
    2250:	4b 81       	ldd	r20, Y+3	; 0x03
    2252:	40 ff       	sbrs	r20, 0
    2254:	1a c0       	rjmp	.+52     	; 0x228a <fgetc+0x40>
    2256:	46 ff       	sbrs	r20, 6
    2258:	0a c0       	rjmp	.+20     	; 0x226e <fgetc+0x24>
    225a:	4f 7b       	andi	r20, 0xBF	; 191
    225c:	4b 83       	std	Y+3, r20	; 0x03
    225e:	8e 81       	ldd	r24, Y+6	; 0x06
    2260:	9f 81       	ldd	r25, Y+7	; 0x07
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	9f 83       	std	Y+7, r25	; 0x07
    2266:	8e 83       	std	Y+6, r24	; 0x06
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	2b c0       	rjmp	.+86     	; 0x22c4 <fgetc+0x7a>
    226e:	42 ff       	sbrs	r20, 2
    2270:	13 c0       	rjmp	.+38     	; 0x2298 <fgetc+0x4e>
    2272:	e8 81       	ld	r30, Y
    2274:	f9 81       	ldd	r31, Y+1	; 0x01
    2276:	80 81       	ld	r24, Z
    2278:	28 2f       	mov	r18, r24
    227a:	33 27       	eor	r19, r19
    227c:	27 fd       	sbrc	r18, 7
    227e:	30 95       	com	r19
    2280:	21 15       	cp	r18, r1
    2282:	31 05       	cpc	r19, r1
    2284:	29 f4       	brne	.+10     	; 0x2290 <fgetc+0x46>
    2286:	40 62       	ori	r20, 0x20	; 32
    2288:	4b 83       	std	Y+3, r20	; 0x03
    228a:	2f ef       	ldi	r18, 0xFF	; 255
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	1b c0       	rjmp	.+54     	; 0x22c6 <fgetc+0x7c>
    2290:	31 96       	adiw	r30, 0x01	; 1
    2292:	f9 83       	std	Y+1, r31	; 0x01
    2294:	e8 83       	st	Y, r30
    2296:	11 c0       	rjmp	.+34     	; 0x22ba <fgetc+0x70>
    2298:	ea 85       	ldd	r30, Y+10	; 0x0a
    229a:	fb 85       	ldd	r31, Y+11	; 0x0b
    229c:	ce 01       	movw	r24, r28
    229e:	09 95       	icall
    22a0:	9c 01       	movw	r18, r24
    22a2:	97 ff       	sbrs	r25, 7
    22a4:	0a c0       	rjmp	.+20     	; 0x22ba <fgetc+0x70>
    22a6:	9b 81       	ldd	r25, Y+3	; 0x03
    22a8:	2f 5f       	subi	r18, 0xFF	; 255
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	11 f0       	breq	.+4      	; 0x22b2 <fgetc+0x68>
    22ae:	80 e2       	ldi	r24, 0x20	; 32
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <fgetc+0x6a>
    22b2:	80 e1       	ldi	r24, 0x10	; 16
    22b4:	89 2b       	or	r24, r25
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    22b8:	e8 cf       	rjmp	.-48     	; 0x228a <fgetc+0x40>
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	9f 81       	ldd	r25, Y+7	; 0x07
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	9f 83       	std	Y+7, r25	; 0x07
    22c2:	8e 83       	std	Y+6, r24	; 0x06
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	c9 01       	movw	r24, r18
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	08 95       	ret

000022ce <fputc>:
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	8c 01       	movw	r16, r24
    22d8:	eb 01       	movw	r28, r22
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	81 ff       	sbrs	r24, 1
    22de:	1b c0       	rjmp	.+54     	; 0x2316 <fputc+0x48>
    22e0:	82 ff       	sbrs	r24, 2
    22e2:	0d c0       	rjmp	.+26     	; 0x22fe <fputc+0x30>
    22e4:	2e 81       	ldd	r18, Y+6	; 0x06
    22e6:	3f 81       	ldd	r19, Y+7	; 0x07
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	9d 81       	ldd	r25, Y+5	; 0x05
    22ec:	28 17       	cp	r18, r24
    22ee:	39 07       	cpc	r19, r25
    22f0:	64 f4       	brge	.+24     	; 0x230a <fputc+0x3c>
    22f2:	e8 81       	ld	r30, Y
    22f4:	f9 81       	ldd	r31, Y+1	; 0x01
    22f6:	01 93       	st	Z+, r16
    22f8:	f9 83       	std	Y+1, r31	; 0x01
    22fa:	e8 83       	st	Y, r30
    22fc:	06 c0       	rjmp	.+12     	; 0x230a <fputc+0x3c>
    22fe:	e8 85       	ldd	r30, Y+8	; 0x08
    2300:	f9 85       	ldd	r31, Y+9	; 0x09
    2302:	80 2f       	mov	r24, r16
    2304:	09 95       	icall
    2306:	89 2b       	or	r24, r25
    2308:	31 f4       	brne	.+12     	; 0x2316 <fputc+0x48>
    230a:	8e 81       	ldd	r24, Y+6	; 0x06
    230c:	9f 81       	ldd	r25, Y+7	; 0x07
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	9f 83       	std	Y+7, r25	; 0x07
    2312:	8e 83       	std	Y+6, r24	; 0x06
    2314:	02 c0       	rjmp	.+4      	; 0x231a <fputc+0x4c>
    2316:	0f ef       	ldi	r16, 0xFF	; 255
    2318:	1f ef       	ldi	r17, 0xFF	; 255
    231a:	c8 01       	movw	r24, r16
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	1f 91       	pop	r17
    2322:	0f 91       	pop	r16
    2324:	08 95       	ret

00002326 <printf_P>:
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	fe 01       	movw	r30, r28
    2330:	35 96       	adiw	r30, 0x05	; 5
    2332:	61 91       	ld	r22, Z+
    2334:	71 91       	ld	r23, Z+
    2336:	a0 91 c1 01 	lds	r26, 0x01C1
    233a:	b0 91 c2 01 	lds	r27, 0x01C2
    233e:	13 96       	adiw	r26, 0x03	; 3
    2340:	8c 91       	ld	r24, X
    2342:	13 97       	sbiw	r26, 0x03	; 3
    2344:	88 60       	ori	r24, 0x08	; 8
    2346:	13 96       	adiw	r26, 0x03	; 3
    2348:	8c 93       	st	X, r24
    234a:	80 91 c1 01 	lds	r24, 0x01C1
    234e:	90 91 c2 01 	lds	r25, 0x01C2
    2352:	af 01       	movw	r20, r30
    2354:	0e 94 10 01 	call	0x220	; 0x220 <vfprintf>
    2358:	e0 91 c1 01 	lds	r30, 0x01C1
    235c:	f0 91 c2 01 	lds	r31, 0x01C2
    2360:	23 81       	ldd	r18, Z+3	; 0x03
    2362:	27 7f       	andi	r18, 0xF7	; 247
    2364:	23 83       	std	Z+3, r18	; 0x03
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <snprintf>:
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	2e 97       	sbiw	r28, 0x0e	; 14
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	0d 89       	ldd	r16, Y+21	; 0x15
    2386:	1e 89       	ldd	r17, Y+22	; 0x16
    2388:	8f 89       	ldd	r24, Y+23	; 0x17
    238a:	98 8d       	ldd	r25, Y+24	; 0x18
    238c:	97 ff       	sbrs	r25, 7
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <snprintf+0x28>
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e8       	ldi	r25, 0x80	; 128
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	1a 83       	std	Y+2, r17	; 0x02
    239c:	09 83       	std	Y+1, r16	; 0x01
    239e:	86 e0       	ldi	r24, 0x06	; 6
    23a0:	8c 83       	std	Y+4, r24	; 0x04
    23a2:	9e 01       	movw	r18, r28
    23a4:	25 5e       	subi	r18, 0xE5	; 229
    23a6:	3f 4f       	sbci	r19, 0xFF	; 255
    23a8:	ce 01       	movw	r24, r28
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	69 8d       	ldd	r22, Y+25	; 0x19
    23ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b0:	a9 01       	movw	r20, r18
    23b2:	0e 94 10 01 	call	0x220	; 0x220 <vfprintf>
    23b6:	4d 81       	ldd	r20, Y+5	; 0x05
    23b8:	5e 81       	ldd	r21, Y+6	; 0x06
    23ba:	57 fd       	sbrc	r21, 7
    23bc:	0a c0       	rjmp	.+20     	; 0x23d2 <snprintf+0x66>
    23be:	2f 81       	ldd	r18, Y+7	; 0x07
    23c0:	38 85       	ldd	r19, Y+8	; 0x08
    23c2:	42 17       	cp	r20, r18
    23c4:	53 07       	cpc	r21, r19
    23c6:	0c f4       	brge	.+2      	; 0x23ca <snprintf+0x5e>
    23c8:	9a 01       	movw	r18, r20
    23ca:	02 0f       	add	r16, r18
    23cc:	13 1f       	adc	r17, r19
    23ce:	f8 01       	movw	r30, r16
    23d0:	10 82       	st	Z, r1
    23d2:	2e 96       	adiw	r28, 0x0e	; 14
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	08 95       	ret

000023e8 <ungetc>:
    23e8:	9c 01       	movw	r18, r24
    23ea:	fb 01       	movw	r30, r22
    23ec:	83 81       	ldd	r24, Z+3	; 0x03
    23ee:	80 ff       	sbrs	r24, 0
    23f0:	11 c0       	rjmp	.+34     	; 0x2414 <ungetc+0x2c>
    23f2:	86 fd       	sbrc	r24, 6
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <ungetc+0x2c>
    23f6:	9f ef       	ldi	r25, 0xFF	; 255
    23f8:	2f 3f       	cpi	r18, 0xFF	; 255
    23fa:	39 07       	cpc	r19, r25
    23fc:	59 f0       	breq	.+22     	; 0x2414 <ungetc+0x2c>
    23fe:	22 83       	std	Z+2, r18	; 0x02
    2400:	80 64       	ori	r24, 0x40	; 64
    2402:	8f 7d       	andi	r24, 0xDF	; 223
    2404:	83 83       	std	Z+3, r24	; 0x03
    2406:	86 81       	ldd	r24, Z+6	; 0x06
    2408:	97 81       	ldd	r25, Z+7	; 0x07
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	97 83       	std	Z+7, r25	; 0x07
    240e:	86 83       	std	Z+6, r24	; 0x06
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <ungetc+0x30>
    2414:	2f ef       	ldi	r18, 0xFF	; 255
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	c9 01       	movw	r24, r18
    241a:	08 95       	ret

0000241c <__ultoa_invert>:
    241c:	fa 01       	movw	r30, r20
    241e:	aa 27       	eor	r26, r26
    2420:	28 30       	cpi	r18, 0x08	; 8
    2422:	51 f1       	breq	.+84     	; 0x2478 <__ultoa_invert+0x5c>
    2424:	20 31       	cpi	r18, 0x10	; 16
    2426:	81 f1       	breq	.+96     	; 0x2488 <__ultoa_invert+0x6c>
    2428:	e8 94       	clt
    242a:	6f 93       	push	r22
    242c:	6e 7f       	andi	r22, 0xFE	; 254
    242e:	6e 5f       	subi	r22, 0xFE	; 254
    2430:	7f 4f       	sbci	r23, 0xFF	; 255
    2432:	8f 4f       	sbci	r24, 0xFF	; 255
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	af 4f       	sbci	r26, 0xFF	; 255
    2438:	b1 e0       	ldi	r27, 0x01	; 1
    243a:	3e d0       	rcall	.+124    	; 0x24b8 <__ultoa_invert+0x9c>
    243c:	b4 e0       	ldi	r27, 0x04	; 4
    243e:	3c d0       	rcall	.+120    	; 0x24b8 <__ultoa_invert+0x9c>
    2440:	67 0f       	add	r22, r23
    2442:	78 1f       	adc	r23, r24
    2444:	89 1f       	adc	r24, r25
    2446:	9a 1f       	adc	r25, r26
    2448:	a1 1d       	adc	r26, r1
    244a:	68 0f       	add	r22, r24
    244c:	79 1f       	adc	r23, r25
    244e:	8a 1f       	adc	r24, r26
    2450:	91 1d       	adc	r25, r1
    2452:	a1 1d       	adc	r26, r1
    2454:	6a 0f       	add	r22, r26
    2456:	71 1d       	adc	r23, r1
    2458:	81 1d       	adc	r24, r1
    245a:	91 1d       	adc	r25, r1
    245c:	a1 1d       	adc	r26, r1
    245e:	20 d0       	rcall	.+64     	; 0x24a0 <__ultoa_invert+0x84>
    2460:	09 f4       	brne	.+2      	; 0x2464 <__ultoa_invert+0x48>
    2462:	68 94       	set
    2464:	3f 91       	pop	r19
    2466:	2a e0       	ldi	r18, 0x0A	; 10
    2468:	26 9f       	mul	r18, r22
    246a:	11 24       	eor	r1, r1
    246c:	30 19       	sub	r19, r0
    246e:	30 5d       	subi	r19, 0xD0	; 208
    2470:	31 93       	st	Z+, r19
    2472:	de f6       	brtc	.-74     	; 0x242a <__ultoa_invert+0xe>
    2474:	cf 01       	movw	r24, r30
    2476:	08 95       	ret
    2478:	46 2f       	mov	r20, r22
    247a:	47 70       	andi	r20, 0x07	; 7
    247c:	40 5d       	subi	r20, 0xD0	; 208
    247e:	41 93       	st	Z+, r20
    2480:	b3 e0       	ldi	r27, 0x03	; 3
    2482:	0f d0       	rcall	.+30     	; 0x24a2 <__ultoa_invert+0x86>
    2484:	c9 f7       	brne	.-14     	; 0x2478 <__ultoa_invert+0x5c>
    2486:	f6 cf       	rjmp	.-20     	; 0x2474 <__ultoa_invert+0x58>
    2488:	46 2f       	mov	r20, r22
    248a:	4f 70       	andi	r20, 0x0F	; 15
    248c:	40 5d       	subi	r20, 0xD0	; 208
    248e:	4a 33       	cpi	r20, 0x3A	; 58
    2490:	18 f0       	brcs	.+6      	; 0x2498 <__ultoa_invert+0x7c>
    2492:	49 5d       	subi	r20, 0xD9	; 217
    2494:	31 fd       	sbrc	r19, 1
    2496:	40 52       	subi	r20, 0x20	; 32
    2498:	41 93       	st	Z+, r20
    249a:	02 d0       	rcall	.+4      	; 0x24a0 <__ultoa_invert+0x84>
    249c:	a9 f7       	brne	.-22     	; 0x2488 <__ultoa_invert+0x6c>
    249e:	ea cf       	rjmp	.-44     	; 0x2474 <__ultoa_invert+0x58>
    24a0:	b4 e0       	ldi	r27, 0x04	; 4
    24a2:	a6 95       	lsr	r26
    24a4:	97 95       	ror	r25
    24a6:	87 95       	ror	r24
    24a8:	77 95       	ror	r23
    24aa:	67 95       	ror	r22
    24ac:	ba 95       	dec	r27
    24ae:	c9 f7       	brne	.-14     	; 0x24a2 <__ultoa_invert+0x86>
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	61 05       	cpc	r22, r1
    24b4:	71 05       	cpc	r23, r1
    24b6:	08 95       	ret
    24b8:	9b 01       	movw	r18, r22
    24ba:	ac 01       	movw	r20, r24
    24bc:	0a 2e       	mov	r0, r26
    24be:	06 94       	lsr	r0
    24c0:	57 95       	ror	r21
    24c2:	47 95       	ror	r20
    24c4:	37 95       	ror	r19
    24c6:	27 95       	ror	r18
    24c8:	ba 95       	dec	r27
    24ca:	c9 f7       	brne	.-14     	; 0x24be <__ultoa_invert+0xa2>
    24cc:	62 0f       	add	r22, r18
    24ce:	73 1f       	adc	r23, r19
    24d0:	84 1f       	adc	r24, r20
    24d2:	95 1f       	adc	r25, r21
    24d4:	a0 1d       	adc	r26, r0
    24d6:	08 95       	ret

000024d8 <__ctype_isfalse>:
    24d8:	99 27       	eor	r25, r25
    24da:	88 27       	eor	r24, r24

000024dc <__ctype_istrue>:
    24dc:	08 95       	ret

000024de <_exit>:
    24de:	f8 94       	cli

000024e0 <__stop_program>:
    24e0:	ff cf       	rjmp	.-2      	; 0x24e0 <__stop_program>
