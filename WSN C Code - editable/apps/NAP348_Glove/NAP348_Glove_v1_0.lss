
NAP348_Glove_v1_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000023e8  0000247c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800116  00800116  00002492  2**0
                  ALLOC
  3 .debug_aranges 000000c8  00000000  00000000  00002492  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000059  00000000  00000000  0000255a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014c0  00000000  00000000  000025b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000452  00000000  00000000  00003a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010f7  00000000  00000000  00003ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00004fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  0000512c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000491  00000000  00000000  0000562c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00005abd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *
 * @return @c 0 if the strings are the same, @c 1 if the string pointed to by
 *     @a a is greater than the string pointed to by @a b, and @c -1 otherwise.
 **/
static int circBufferCmp(const void *a, const void *b)
{
       0:	ed c0       	rjmp	.+474    	; 0x1dc <__ctors_end>
       2:	00 00       	nop
       4:	0a c1       	rjmp	.+532    	; 0x21a <__bad_interrupt>
       6:	00 00       	nop
       8:	08 c1       	rjmp	.+528    	; 0x21a <__bad_interrupt>
       a:	00 00       	nop
       c:	06 c1       	rjmp	.+524    	; 0x21a <__bad_interrupt>
       e:	00 00       	nop
      10:	04 c1       	rjmp	.+520    	; 0x21a <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__vector_5>
      18:	00 c1       	rjmp	.+512    	; 0x21a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fe c0       	rjmp	.+508    	; 0x21a <__bad_interrupt>
      1e:	00 00       	nop
      20:	fc c0       	rjmp	.+504    	; 0x21a <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_9>
      28:	f8 c0       	rjmp	.+496    	; 0x21a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f6 c0       	rjmp	.+492    	; 0x21a <__bad_interrupt>
      2e:	00 00       	nop
      30:	f4 c0       	rjmp	.+488    	; 0x21a <__bad_interrupt>
      32:	00 00       	nop
      34:	f2 c0       	rjmp	.+484    	; 0x21a <__bad_interrupt>
      36:	00 00       	nop
      38:	f0 c0       	rjmp	.+480    	; 0x21a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__vector_15>
      40:	ec c0       	rjmp	.+472    	; 0x21a <__bad_interrupt>
      42:	00 00       	nop
      44:	ea c0       	rjmp	.+468    	; 0x21a <__bad_interrupt>
      46:	00 00       	nop
      48:	e8 c0       	rjmp	.+464    	; 0x21a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e6 c0       	rjmp	.+460    	; 0x21a <__bad_interrupt>
      4e:	00 00       	nop
      50:	e4 c0       	rjmp	.+456    	; 0x21a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__vector_21>
      58:	e0 c0       	rjmp	.+448    	; 0x21a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	de c0       	rjmp	.+444    	; 0x21a <__bad_interrupt>
      5e:	00 00       	nop
      60:	dc c0       	rjmp	.+440    	; 0x21a <__bad_interrupt>
      62:	00 00       	nop
      64:	da c0       	rjmp	.+436    	; 0x21a <__bad_interrupt>
      66:	00 00       	nop
      68:	d8 c0       	rjmp	.+432    	; 0x21a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d6 c0       	rjmp	.+428    	; 0x21a <__bad_interrupt>
      6e:	00 00       	nop
      70:	d4 c0       	rjmp	.+424    	; 0x21a <__bad_interrupt>
      72:	00 00       	nop
      74:	d2 c0       	rjmp	.+420    	; 0x21a <__bad_interrupt>
      76:	00 00       	nop
      78:	d0 c0       	rjmp	.+416    	; 0x21a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ce c0       	rjmp	.+412    	; 0x21a <__bad_interrupt>
      7e:	00 00       	nop
      80:	cc c0       	rjmp	.+408    	; 0x21a <__bad_interrupt>
      82:	00 00       	nop
      84:	ca c0       	rjmp	.+404    	; 0x21a <__bad_interrupt>
      86:	00 00       	nop
      88:	c8 c0       	rjmp	.+400    	; 0x21a <__bad_interrupt>
      8a:	00 00       	nop

0000008c <__c.1790>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.1788>:
      90:	69 6e 66 00                                         inf.

00000094 <__c.2085>:
      94:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      a4:	47 00                                               G.

000000a6 <pstr_an>:
      a6:	61 6e 00                                            an.

000000a9 <pstr_nfinity>:
      a9:	6e 66 69 6e 69 74 79 00                             nfinity.

000000b1 <pwr_m10>:
      b1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      c1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000c9 <pwr_p10>:
      c9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      d9:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      e9:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      f9:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     109:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     119:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     129:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     139:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     149:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     159:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     169:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     179:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     189:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     199:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     1a9:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1b9:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1c9:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1d9:	3d 27 00                                            ='.

000001dc <__ctors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	d0 e1       	ldi	r29, 0x10	; 16
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	e8 ee       	ldi	r30, 0xE8	; 232
     1f0:	f3 e2       	ldi	r31, 0x23	; 35
     1f2:	00 e0       	ldi	r16, 0x00	; 0
     1f4:	0b bf       	out	0x3b, r16	; 59
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <__do_copy_data+0x14>
     1f8:	07 90       	elpm	r0, Z+
     1fa:	0d 92       	st	X+, r0
     1fc:	a6 31       	cpi	r26, 0x16	; 22
     1fe:	b1 07       	cpc	r27, r17
     200:	d9 f7       	brne	.-10     	; 0x1f8 <__do_copy_data+0x10>

00000202 <__do_clear_bss>:
     202:	11 e0       	ldi	r17, 0x01	; 1
     204:	a6 e1       	ldi	r26, 0x16	; 22
     206:	b1 e0       	ldi	r27, 0x01	; 1
     208:	01 c0       	rjmp	.+2      	; 0x20c <.do_clear_bss_start>

0000020a <.do_clear_bss_loop>:
     20a:	1d 92       	st	X+, r1

0000020c <.do_clear_bss_start>:
     20c:	a2 3c       	cpi	r26, 0xC2	; 194
     20e:	b1 07       	cpc	r27, r17
     210:	e1 f7       	brne	.-8      	; 0x20a <.do_clear_bss_loop>
     212:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <main>
     216:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <_exit>

0000021a <__bad_interrupt>:
     21a:	f2 ce       	rjmp	.-540    	; 0x0 <__vectors>

0000021c <vfprintf>:
     21c:	2f 92       	push	r2
     21e:	3f 92       	push	r3
     220:	4f 92       	push	r4
     222:	5f 92       	push	r5
     224:	6f 92       	push	r6
     226:	7f 92       	push	r7
     228:	8f 92       	push	r8
     22a:	9f 92       	push	r9
     22c:	af 92       	push	r10
     22e:	bf 92       	push	r11
     230:	cf 92       	push	r12
     232:	df 92       	push	r13
     234:	ef 92       	push	r14
     236:	ff 92       	push	r15
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	61 97       	sbiw	r28, 0x11	; 17
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	3c 01       	movw	r6, r24
     252:	7f 87       	std	Y+15, r23	; 0x0f
     254:	6e 87       	std	Y+14, r22	; 0x0e
     256:	6a 01       	movw	r12, r20
     258:	fc 01       	movw	r30, r24
     25a:	17 82       	std	Z+7, r1	; 0x07
     25c:	16 82       	std	Z+6, r1	; 0x06
     25e:	83 81       	ldd	r24, Z+3	; 0x03
     260:	81 fd       	sbrc	r24, 1
     262:	03 c0       	rjmp	.+6      	; 0x26a <vfprintf+0x4e>
     264:	6f ef       	ldi	r22, 0xFF	; 255
     266:	7f ef       	ldi	r23, 0xFF	; 255
     268:	6f c3       	rjmp	.+1758   	; 0x948 <vfprintf+0x72c>
     26a:	9e 01       	movw	r18, r28
     26c:	2f 5f       	subi	r18, 0xFF	; 255
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	39 8b       	std	Y+17, r19	; 0x11
     272:	28 8b       	std	Y+16, r18	; 0x10
     274:	f3 01       	movw	r30, r6
     276:	23 81       	ldd	r18, Z+3	; 0x03
     278:	ee 85       	ldd	r30, Y+14	; 0x0e
     27a:	ff 85       	ldd	r31, Y+15	; 0x0f
     27c:	23 fd       	sbrc	r18, 3
     27e:	85 91       	lpm	r24, Z+
     280:	23 ff       	sbrs	r18, 3
     282:	81 91       	ld	r24, Z+
     284:	ff 87       	std	Y+15, r31	; 0x0f
     286:	ee 87       	std	Y+14, r30	; 0x0e
     288:	88 23       	and	r24, r24
     28a:	09 f4       	brne	.+2      	; 0x28e <vfprintf+0x72>
     28c:	5a c3       	rjmp	.+1716   	; 0x942 <vfprintf+0x726>
     28e:	85 32       	cpi	r24, 0x25	; 37
     290:	51 f4       	brne	.+20     	; 0x2a6 <vfprintf+0x8a>
     292:	ee 85       	ldd	r30, Y+14	; 0x0e
     294:	ff 85       	ldd	r31, Y+15	; 0x0f
     296:	23 fd       	sbrc	r18, 3
     298:	85 91       	lpm	r24, Z+
     29a:	23 ff       	sbrs	r18, 3
     29c:	81 91       	ld	r24, Z+
     29e:	ff 87       	std	Y+15, r31	; 0x0f
     2a0:	ee 87       	std	Y+14, r30	; 0x0e
     2a2:	85 32       	cpi	r24, 0x25	; 37
     2a4:	29 f4       	brne	.+10     	; 0x2b0 <vfprintf+0x94>
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	b3 01       	movw	r22, r6
     2aa:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     2ae:	e2 cf       	rjmp	.-60     	; 0x274 <vfprintf+0x58>
     2b0:	98 2f       	mov	r25, r24
     2b2:	10 e0       	ldi	r17, 0x00	; 0
     2b4:	88 24       	eor	r8, r8
     2b6:	99 24       	eor	r9, r9
     2b8:	10 32       	cpi	r17, 0x20	; 32
     2ba:	b0 f4       	brcc	.+44     	; 0x2e8 <vfprintf+0xcc>
     2bc:	9b 32       	cpi	r25, 0x2B	; 43
     2be:	69 f0       	breq	.+26     	; 0x2da <vfprintf+0xbe>
     2c0:	9c 32       	cpi	r25, 0x2C	; 44
     2c2:	28 f4       	brcc	.+10     	; 0x2ce <vfprintf+0xb2>
     2c4:	90 32       	cpi	r25, 0x20	; 32
     2c6:	51 f0       	breq	.+20     	; 0x2dc <vfprintf+0xc0>
     2c8:	93 32       	cpi	r25, 0x23	; 35
     2ca:	71 f4       	brne	.+28     	; 0x2e8 <vfprintf+0xcc>
     2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <vfprintf+0xc8>
     2ce:	9d 32       	cpi	r25, 0x2D	; 45
     2d0:	39 f0       	breq	.+14     	; 0x2e0 <vfprintf+0xc4>
     2d2:	90 33       	cpi	r25, 0x30	; 48
     2d4:	49 f4       	brne	.+18     	; 0x2e8 <vfprintf+0xcc>
     2d6:	11 60       	ori	r17, 0x01	; 1
     2d8:	28 c0       	rjmp	.+80     	; 0x32a <vfprintf+0x10e>
     2da:	12 60       	ori	r17, 0x02	; 2
     2dc:	14 60       	ori	r17, 0x04	; 4
     2de:	25 c0       	rjmp	.+74     	; 0x32a <vfprintf+0x10e>
     2e0:	18 60       	ori	r17, 0x08	; 8
     2e2:	23 c0       	rjmp	.+70     	; 0x32a <vfprintf+0x10e>
     2e4:	10 61       	ori	r17, 0x10	; 16
     2e6:	21 c0       	rjmp	.+66     	; 0x32a <vfprintf+0x10e>
     2e8:	17 fd       	sbrc	r17, 7
     2ea:	2a c0       	rjmp	.+84     	; 0x340 <vfprintf+0x124>
     2ec:	89 2f       	mov	r24, r25
     2ee:	80 53       	subi	r24, 0x30	; 48
     2f0:	8a 30       	cpi	r24, 0x0A	; 10
     2f2:	78 f4       	brcc	.+30     	; 0x312 <vfprintf+0xf6>
     2f4:	16 ff       	sbrs	r17, 6
     2f6:	06 c0       	rjmp	.+12     	; 0x304 <vfprintf+0xe8>
     2f8:	fa e0       	ldi	r31, 0x0A	; 10
     2fa:	9f 9e       	mul	r9, r31
     2fc:	90 2c       	mov	r9, r0
     2fe:	11 24       	eor	r1, r1
     300:	98 0e       	add	r9, r24
     302:	13 c0       	rjmp	.+38     	; 0x32a <vfprintf+0x10e>
     304:	3a e0       	ldi	r19, 0x0A	; 10
     306:	83 9e       	mul	r8, r19
     308:	80 2c       	mov	r8, r0
     30a:	11 24       	eor	r1, r1
     30c:	88 0e       	add	r8, r24
     30e:	10 62       	ori	r17, 0x20	; 32
     310:	0c c0       	rjmp	.+24     	; 0x32a <vfprintf+0x10e>
     312:	9e 32       	cpi	r25, 0x2E	; 46
     314:	21 f4       	brne	.+8      	; 0x31e <vfprintf+0x102>
     316:	16 fd       	sbrc	r17, 6
     318:	14 c3       	rjmp	.+1576   	; 0x942 <vfprintf+0x726>
     31a:	10 64       	ori	r17, 0x40	; 64
     31c:	06 c0       	rjmp	.+12     	; 0x32a <vfprintf+0x10e>
     31e:	9c 36       	cpi	r25, 0x6C	; 108
     320:	11 f4       	brne	.+4      	; 0x326 <vfprintf+0x10a>
     322:	10 68       	ori	r17, 0x80	; 128
     324:	02 c0       	rjmp	.+4      	; 0x32a <vfprintf+0x10e>
     326:	98 36       	cpi	r25, 0x68	; 104
     328:	59 f4       	brne	.+22     	; 0x340 <vfprintf+0x124>
     32a:	ee 85       	ldd	r30, Y+14	; 0x0e
     32c:	ff 85       	ldd	r31, Y+15	; 0x0f
     32e:	23 fd       	sbrc	r18, 3
     330:	95 91       	lpm	r25, Z+
     332:	23 ff       	sbrs	r18, 3
     334:	91 91       	ld	r25, Z+
     336:	ff 87       	std	Y+15, r31	; 0x0f
     338:	ee 87       	std	Y+14, r30	; 0x0e
     33a:	99 23       	and	r25, r25
     33c:	09 f0       	breq	.+2      	; 0x340 <vfprintf+0x124>
     33e:	bc cf       	rjmp	.-136    	; 0x2b8 <vfprintf+0x9c>
     340:	89 2f       	mov	r24, r25
     342:	85 54       	subi	r24, 0x45	; 69
     344:	83 30       	cpi	r24, 0x03	; 3
     346:	20 f4       	brcc	.+8      	; 0x350 <vfprintf+0x134>
     348:	81 2f       	mov	r24, r17
     34a:	80 61       	ori	r24, 0x10	; 16
     34c:	90 5e       	subi	r25, 0xE0	; 224
     34e:	07 c0       	rjmp	.+14     	; 0x35e <vfprintf+0x142>
     350:	89 2f       	mov	r24, r25
     352:	85 56       	subi	r24, 0x65	; 101
     354:	83 30       	cpi	r24, 0x03	; 3
     356:	08 f0       	brcs	.+2      	; 0x35a <vfprintf+0x13e>
     358:	9f c1       	rjmp	.+830    	; 0x698 <vfprintf+0x47c>
     35a:	81 2f       	mov	r24, r17
     35c:	8f 7e       	andi	r24, 0xEF	; 239
     35e:	86 fd       	sbrc	r24, 6
     360:	02 c0       	rjmp	.+4      	; 0x366 <vfprintf+0x14a>
     362:	76 e0       	ldi	r23, 0x06	; 6
     364:	97 2e       	mov	r9, r23
     366:	6f e3       	ldi	r22, 0x3F	; 63
     368:	f6 2e       	mov	r15, r22
     36a:	f8 22       	and	r15, r24
     36c:	95 36       	cpi	r25, 0x65	; 101
     36e:	19 f4       	brne	.+6      	; 0x376 <vfprintf+0x15a>
     370:	f0 e4       	ldi	r31, 0x40	; 64
     372:	ff 2a       	or	r15, r31
     374:	07 c0       	rjmp	.+14     	; 0x384 <vfprintf+0x168>
     376:	96 36       	cpi	r25, 0x66	; 102
     378:	19 f4       	brne	.+6      	; 0x380 <vfprintf+0x164>
     37a:	20 e8       	ldi	r18, 0x80	; 128
     37c:	f2 2a       	or	r15, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <vfprintf+0x168>
     380:	91 10       	cpse	r9, r1
     382:	9a 94       	dec	r9
     384:	f7 fe       	sbrs	r15, 7
     386:	0a c0       	rjmp	.+20     	; 0x39c <vfprintf+0x180>
     388:	3b e3       	ldi	r19, 0x3B	; 59
     38a:	39 15       	cp	r19, r9
     38c:	18 f4       	brcc	.+6      	; 0x394 <vfprintf+0x178>
     38e:	5c e3       	ldi	r21, 0x3C	; 60
     390:	b5 2e       	mov	r11, r21
     392:	02 c0       	rjmp	.+4      	; 0x398 <vfprintf+0x17c>
     394:	b9 2c       	mov	r11, r9
     396:	b3 94       	inc	r11
     398:	27 e0       	ldi	r18, 0x07	; 7
     39a:	09 c0       	rjmp	.+18     	; 0x3ae <vfprintf+0x192>
     39c:	47 e0       	ldi	r20, 0x07	; 7
     39e:	49 15       	cp	r20, r9
     3a0:	20 f4       	brcc	.+8      	; 0x3aa <vfprintf+0x18e>
     3a2:	bb 24       	eor	r11, r11
     3a4:	47 e0       	ldi	r20, 0x07	; 7
     3a6:	94 2e       	mov	r9, r20
     3a8:	f7 cf       	rjmp	.-18     	; 0x398 <vfprintf+0x17c>
     3aa:	29 2d       	mov	r18, r9
     3ac:	bb 24       	eor	r11, r11
     3ae:	c6 01       	movw	r24, r12
     3b0:	04 96       	adiw	r24, 0x04	; 4
     3b2:	9d 87       	std	Y+13, r25	; 0x0d
     3b4:	8c 87       	std	Y+12, r24	; 0x0c
     3b6:	f6 01       	movw	r30, r12
     3b8:	60 81       	ld	r22, Z
     3ba:	71 81       	ldd	r23, Z+1	; 0x01
     3bc:	82 81       	ldd	r24, Z+2	; 0x02
     3be:	93 81       	ldd	r25, Z+3	; 0x03
     3c0:	ae 01       	movw	r20, r28
     3c2:	4f 5f       	subi	r20, 0xFF	; 255
     3c4:	5f 4f       	sbci	r21, 0xFF	; 255
     3c6:	0b 2d       	mov	r16, r11
     3c8:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__ftoa_engine>
     3cc:	6c 01       	movw	r12, r24
     3ce:	09 81       	ldd	r16, Y+1	; 0x01
     3d0:	20 2e       	mov	r2, r16
     3d2:	33 24       	eor	r3, r3
     3d4:	00 ff       	sbrs	r16, 0
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <vfprintf+0x1c4>
     3d8:	03 fd       	sbrc	r16, 3
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <vfprintf+0x1c4>
     3dc:	1d e2       	ldi	r17, 0x2D	; 45
     3de:	09 c0       	rjmp	.+18     	; 0x3f2 <vfprintf+0x1d6>
     3e0:	f1 fe       	sbrs	r15, 1
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <vfprintf+0x1cc>
     3e4:	1b e2       	ldi	r17, 0x2B	; 43
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <vfprintf+0x1d6>
     3e8:	f2 fc       	sbrc	r15, 2
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <vfprintf+0x1d4>
     3ec:	10 e0       	ldi	r17, 0x00	; 0
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <vfprintf+0x1d6>
     3f0:	10 e2       	ldi	r17, 0x20	; 32
     3f2:	c1 01       	movw	r24, r2
     3f4:	8c 70       	andi	r24, 0x0C	; 12
     3f6:	90 70       	andi	r25, 0x00	; 0
     3f8:	89 2b       	or	r24, r25
     3fa:	b9 f1       	breq	.+110    	; 0x46a <vfprintf+0x24e>
     3fc:	11 23       	and	r17, r17
     3fe:	11 f4       	brne	.+4      	; 0x404 <vfprintf+0x1e8>
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	01 c0       	rjmp	.+2      	; 0x406 <vfprintf+0x1ea>
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	88 15       	cp	r24, r8
     408:	10 f0       	brcs	.+4      	; 0x40e <vfprintf+0x1f2>
     40a:	88 24       	eor	r8, r8
     40c:	0a c0       	rjmp	.+20     	; 0x422 <vfprintf+0x206>
     40e:	88 1a       	sub	r8, r24
     410:	f3 fc       	sbrc	r15, 3
     412:	07 c0       	rjmp	.+14     	; 0x422 <vfprintf+0x206>
     414:	80 e2       	ldi	r24, 0x20	; 32
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	b3 01       	movw	r22, r6
     41a:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     41e:	8a 94       	dec	r8
     420:	c9 f7       	brne	.-14     	; 0x414 <vfprintf+0x1f8>
     422:	11 23       	and	r17, r17
     424:	29 f0       	breq	.+10     	; 0x430 <vfprintf+0x214>
     426:	81 2f       	mov	r24, r17
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	b3 01       	movw	r22, r6
     42c:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     430:	23 fe       	sbrs	r2, 3
     432:	03 c0       	rjmp	.+6      	; 0x43a <vfprintf+0x21e>
     434:	0c e8       	ldi	r16, 0x8C	; 140
     436:	10 e0       	ldi	r17, 0x00	; 0
     438:	0e c0       	rjmp	.+28     	; 0x456 <vfprintf+0x23a>
     43a:	00 e9       	ldi	r16, 0x90	; 144
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	0b c0       	rjmp	.+22     	; 0x456 <vfprintf+0x23a>
     440:	e1 14       	cp	r14, r1
     442:	f1 04       	cpc	r15, r1
     444:	09 f0       	breq	.+2      	; 0x448 <vfprintf+0x22c>
     446:	80 52       	subi	r24, 0x20	; 32
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	b3 01       	movw	r22, r6
     44c:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     450:	0f 5f       	subi	r16, 0xFF	; 255
     452:	1f 4f       	sbci	r17, 0xFF	; 255
     454:	05 c0       	rjmp	.+10     	; 0x460 <vfprintf+0x244>
     456:	ef 2c       	mov	r14, r15
     458:	ff 24       	eor	r15, r15
     45a:	f0 e1       	ldi	r31, 0x10	; 16
     45c:	ef 22       	and	r14, r31
     45e:	ff 24       	eor	r15, r15
     460:	f8 01       	movw	r30, r16
     462:	84 91       	lpm	r24, Z+
     464:	88 23       	and	r24, r24
     466:	61 f7       	brne	.-40     	; 0x440 <vfprintf+0x224>
     468:	14 c1       	rjmp	.+552    	; 0x692 <vfprintf+0x476>
     46a:	f7 fe       	sbrs	r15, 7
     46c:	12 c0       	rjmp	.+36     	; 0x492 <vfprintf+0x276>
     46e:	bc 0c       	add	r11, r12
     470:	24 fe       	sbrs	r2, 4
     472:	04 c0       	rjmp	.+8      	; 0x47c <vfprintf+0x260>
     474:	8a 81       	ldd	r24, Y+2	; 0x02
     476:	81 33       	cpi	r24, 0x31	; 49
     478:	09 f4       	brne	.+2      	; 0x47c <vfprintf+0x260>
     47a:	ba 94       	dec	r11
     47c:	1b 14       	cp	r1, r11
     47e:	1c f0       	brlt	.+6      	; 0x486 <vfprintf+0x26a>
     480:	bb 24       	eor	r11, r11
     482:	b3 94       	inc	r11
     484:	2d c0       	rjmp	.+90     	; 0x4e0 <vfprintf+0x2c4>
     486:	f8 e0       	ldi	r31, 0x08	; 8
     488:	fb 15       	cp	r31, r11
     48a:	50 f5       	brcc	.+84     	; 0x4e0 <vfprintf+0x2c4>
     48c:	38 e0       	ldi	r19, 0x08	; 8
     48e:	b3 2e       	mov	r11, r19
     490:	27 c0       	rjmp	.+78     	; 0x4e0 <vfprintf+0x2c4>
     492:	f6 fc       	sbrc	r15, 6
     494:	25 c0       	rjmp	.+74     	; 0x4e0 <vfprintf+0x2c4>
     496:	89 2d       	mov	r24, r9
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	8c 15       	cp	r24, r12
     49c:	9d 05       	cpc	r25, r13
     49e:	4c f0       	brlt	.+18     	; 0x4b2 <vfprintf+0x296>
     4a0:	2c ef       	ldi	r18, 0xFC	; 252
     4a2:	c2 16       	cp	r12, r18
     4a4:	2f ef       	ldi	r18, 0xFF	; 255
     4a6:	d2 06       	cpc	r13, r18
     4a8:	24 f0       	brlt	.+8      	; 0x4b2 <vfprintf+0x296>
     4aa:	30 e8       	ldi	r19, 0x80	; 128
     4ac:	f3 2a       	or	r15, r19
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <vfprintf+0x296>
     4b0:	9a 94       	dec	r9
     4b2:	99 20       	and	r9, r9
     4b4:	49 f0       	breq	.+18     	; 0x4c8 <vfprintf+0x2ac>
     4b6:	e2 e0       	ldi	r30, 0x02	; 2
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	ec 0f       	add	r30, r28
     4bc:	fd 1f       	adc	r31, r29
     4be:	e9 0d       	add	r30, r9
     4c0:	f1 1d       	adc	r31, r1
     4c2:	80 81       	ld	r24, Z
     4c4:	80 33       	cpi	r24, 0x30	; 48
     4c6:	a1 f3       	breq	.-24     	; 0x4b0 <vfprintf+0x294>
     4c8:	f7 fe       	sbrs	r15, 7
     4ca:	0a c0       	rjmp	.+20     	; 0x4e0 <vfprintf+0x2c4>
     4cc:	b9 2c       	mov	r11, r9
     4ce:	b3 94       	inc	r11
     4d0:	89 2d       	mov	r24, r9
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	c8 16       	cp	r12, r24
     4d6:	d9 06       	cpc	r13, r25
     4d8:	14 f0       	brlt	.+4      	; 0x4de <vfprintf+0x2c2>
     4da:	99 24       	eor	r9, r9
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <vfprintf+0x2c4>
     4de:	9c 18       	sub	r9, r12
     4e0:	f7 fc       	sbrc	r15, 7
     4e2:	03 c0       	rjmp	.+6      	; 0x4ea <vfprintf+0x2ce>
     4e4:	25 e0       	ldi	r18, 0x05	; 5
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	09 c0       	rjmp	.+18     	; 0x4fc <vfprintf+0x2e0>
     4ea:	1c 14       	cp	r1, r12
     4ec:	1d 04       	cpc	r1, r13
     4ee:	1c f0       	brlt	.+6      	; 0x4f6 <vfprintf+0x2da>
     4f0:	21 e0       	ldi	r18, 0x01	; 1
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	03 c0       	rjmp	.+6      	; 0x4fc <vfprintf+0x2e0>
     4f6:	96 01       	movw	r18, r12
     4f8:	2f 5f       	subi	r18, 0xFF	; 255
     4fa:	3f 4f       	sbci	r19, 0xFF	; 255
     4fc:	11 23       	and	r17, r17
     4fe:	11 f0       	breq	.+4      	; 0x504 <vfprintf+0x2e8>
     500:	2f 5f       	subi	r18, 0xFF	; 255
     502:	3f 4f       	sbci	r19, 0xFF	; 255
     504:	99 20       	and	r9, r9
     506:	29 f0       	breq	.+10     	; 0x512 <vfprintf+0x2f6>
     508:	89 2d       	mov	r24, r9
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	28 0f       	add	r18, r24
     510:	39 1f       	adc	r19, r25
     512:	88 2d       	mov	r24, r8
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	28 17       	cp	r18, r24
     518:	39 07       	cpc	r19, r25
     51a:	14 f0       	brlt	.+4      	; 0x520 <vfprintf+0x304>
     51c:	88 24       	eor	r8, r8
     51e:	01 c0       	rjmp	.+2      	; 0x522 <vfprintf+0x306>
     520:	82 1a       	sub	r8, r18
     522:	4f 2c       	mov	r4, r15
     524:	55 24       	eor	r5, r5
     526:	c2 01       	movw	r24, r4
     528:	89 70       	andi	r24, 0x09	; 9
     52a:	90 70       	andi	r25, 0x00	; 0
     52c:	89 2b       	or	r24, r25
     52e:	39 f0       	breq	.+14     	; 0x53e <vfprintf+0x322>
     530:	08 c0       	rjmp	.+16     	; 0x542 <vfprintf+0x326>
     532:	80 e2       	ldi	r24, 0x20	; 32
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	b3 01       	movw	r22, r6
     538:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     53c:	8a 94       	dec	r8
     53e:	88 20       	and	r8, r8
     540:	c1 f7       	brne	.-16     	; 0x532 <vfprintf+0x316>
     542:	11 23       	and	r17, r17
     544:	29 f0       	breq	.+10     	; 0x550 <vfprintf+0x334>
     546:	81 2f       	mov	r24, r17
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	b3 01       	movw	r22, r6
     54c:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     550:	43 fe       	sbrs	r4, 3
     552:	07 c0       	rjmp	.+14     	; 0x562 <vfprintf+0x346>
     554:	08 c0       	rjmp	.+16     	; 0x566 <vfprintf+0x34a>
     556:	80 e3       	ldi	r24, 0x30	; 48
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	b3 01       	movw	r22, r6
     55c:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     560:	8a 94       	dec	r8
     562:	88 20       	and	r8, r8
     564:	c1 f7       	brne	.-16     	; 0x556 <vfprintf+0x33a>
     566:	f7 fe       	sbrs	r15, 7
     568:	46 c0       	rjmp	.+140    	; 0x5f6 <vfprintf+0x3da>
     56a:	86 01       	movw	r16, r12
     56c:	d7 fe       	sbrs	r13, 7
     56e:	02 c0       	rjmp	.+4      	; 0x574 <vfprintf+0x358>
     570:	00 e0       	ldi	r16, 0x00	; 0
     572:	10 e0       	ldi	r17, 0x00	; 0
     574:	76 01       	movw	r14, r12
     576:	08 94       	sec
     578:	e1 1c       	adc	r14, r1
     57a:	f1 1c       	adc	r15, r1
     57c:	e0 1a       	sub	r14, r16
     57e:	f1 0a       	sbc	r15, r17
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	4c 0f       	add	r20, r28
     586:	5d 1f       	adc	r21, r29
     588:	e4 0e       	add	r14, r20
     58a:	f5 1e       	adc	r15, r21
     58c:	26 01       	movw	r4, r12
     58e:	4b 18       	sub	r4, r11
     590:	51 08       	sbc	r5, r1
     592:	89 2d       	mov	r24, r9
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	aa 24       	eor	r10, r10
     598:	bb 24       	eor	r11, r11
     59a:	a8 1a       	sub	r10, r24
     59c:	b9 0a       	sbc	r11, r25
     59e:	5f ef       	ldi	r21, 0xFF	; 255
     5a0:	0f 3f       	cpi	r16, 0xFF	; 255
     5a2:	15 07       	cpc	r17, r21
     5a4:	29 f4       	brne	.+10     	; 0x5b0 <vfprintf+0x394>
     5a6:	8e e2       	ldi	r24, 0x2E	; 46
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	b3 01       	movw	r22, r6
     5ac:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     5b0:	c0 16       	cp	r12, r16
     5b2:	d1 06       	cpc	r13, r17
     5b4:	34 f0       	brlt	.+12     	; 0x5c2 <vfprintf+0x3a6>
     5b6:	40 16       	cp	r4, r16
     5b8:	51 06       	cpc	r5, r17
     5ba:	1c f4       	brge	.+6      	; 0x5c2 <vfprintf+0x3a6>
     5bc:	f7 01       	movw	r30, r14
     5be:	80 81       	ld	r24, Z
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <vfprintf+0x3a8>
     5c2:	80 e3       	ldi	r24, 0x30	; 48
     5c4:	01 50       	subi	r16, 0x01	; 1
     5c6:	10 40       	sbci	r17, 0x00	; 0
     5c8:	08 94       	sec
     5ca:	e1 1c       	adc	r14, r1
     5cc:	f1 1c       	adc	r15, r1
     5ce:	0a 15       	cp	r16, r10
     5d0:	1b 05       	cpc	r17, r11
     5d2:	2c f0       	brlt	.+10     	; 0x5de <vfprintf+0x3c2>
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	b3 01       	movw	r22, r6
     5d8:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     5dc:	e0 cf       	rjmp	.-64     	; 0x59e <vfprintf+0x382>
     5de:	0c 15       	cp	r16, r12
     5e0:	1d 05       	cpc	r17, r13
     5e2:	39 f4       	brne	.+14     	; 0x5f2 <vfprintf+0x3d6>
     5e4:	9a 81       	ldd	r25, Y+2	; 0x02
     5e6:	96 33       	cpi	r25, 0x36	; 54
     5e8:	18 f4       	brcc	.+6      	; 0x5f0 <vfprintf+0x3d4>
     5ea:	95 33       	cpi	r25, 0x35	; 53
     5ec:	11 f4       	brne	.+4      	; 0x5f2 <vfprintf+0x3d6>
     5ee:	24 fe       	sbrs	r2, 4
     5f0:	81 e3       	ldi	r24, 0x31	; 49
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	4b c0       	rjmp	.+150    	; 0x68c <vfprintf+0x470>
     5f6:	8a 81       	ldd	r24, Y+2	; 0x02
     5f8:	81 33       	cpi	r24, 0x31	; 49
     5fa:	09 f0       	breq	.+2      	; 0x5fe <vfprintf+0x3e2>
     5fc:	0f 7e       	andi	r16, 0xEF	; 239
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	b3 01       	movw	r22, r6
     602:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     606:	99 20       	and	r9, r9
     608:	a1 f0       	breq	.+40     	; 0x632 <vfprintf+0x416>
     60a:	8e e2       	ldi	r24, 0x2E	; 46
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	b3 01       	movw	r22, r6
     610:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     614:	12 e0       	ldi	r17, 0x02	; 2
     616:	e1 e0       	ldi	r30, 0x01	; 1
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	ec 0f       	add	r30, r28
     61c:	fd 1f       	adc	r31, r29
     61e:	e1 0f       	add	r30, r17
     620:	f1 1d       	adc	r31, r1
     622:	1f 5f       	subi	r17, 0xFF	; 255
     624:	80 81       	ld	r24, Z
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	b3 01       	movw	r22, r6
     62a:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     62e:	9a 94       	dec	r9
     630:	91 f7       	brne	.-28     	; 0x616 <vfprintf+0x3fa>
     632:	44 fc       	sbrc	r4, 4
     634:	03 c0       	rjmp	.+6      	; 0x63c <vfprintf+0x420>
     636:	85 e6       	ldi	r24, 0x65	; 101
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	02 c0       	rjmp	.+4      	; 0x640 <vfprintf+0x424>
     63c:	85 e4       	ldi	r24, 0x45	; 69
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	b3 01       	movw	r22, r6
     642:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     646:	d7 fc       	sbrc	r13, 7
     648:	05 c0       	rjmp	.+10     	; 0x654 <vfprintf+0x438>
     64a:	c1 14       	cp	r12, r1
     64c:	d1 04       	cpc	r13, r1
     64e:	41 f4       	brne	.+16     	; 0x660 <vfprintf+0x444>
     650:	04 ff       	sbrs	r16, 4
     652:	06 c0       	rjmp	.+12     	; 0x660 <vfprintf+0x444>
     654:	d0 94       	com	r13
     656:	c1 94       	neg	r12
     658:	d1 08       	sbc	r13, r1
     65a:	d3 94       	inc	r13
     65c:	8d e2       	ldi	r24, 0x2D	; 45
     65e:	01 c0       	rjmp	.+2      	; 0x662 <vfprintf+0x446>
     660:	8b e2       	ldi	r24, 0x2B	; 43
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	b3 01       	movw	r22, r6
     666:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     66a:	80 e3       	ldi	r24, 0x30	; 48
     66c:	05 c0       	rjmp	.+10     	; 0x678 <vfprintf+0x45c>
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	26 ef       	ldi	r18, 0xF6	; 246
     672:	3f ef       	ldi	r19, 0xFF	; 255
     674:	c2 0e       	add	r12, r18
     676:	d3 1e       	adc	r13, r19
     678:	3a e0       	ldi	r19, 0x0A	; 10
     67a:	c3 16       	cp	r12, r19
     67c:	d1 04       	cpc	r13, r1
     67e:	bc f7       	brge	.-18     	; 0x66e <vfprintf+0x452>
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	b3 01       	movw	r22, r6
     684:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     688:	c6 01       	movw	r24, r12
     68a:	c0 96       	adiw	r24, 0x30	; 48
     68c:	b3 01       	movw	r22, r6
     68e:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     692:	cc 84       	ldd	r12, Y+12	; 0x0c
     694:	dd 84       	ldd	r13, Y+13	; 0x0d
     696:	52 c1       	rjmp	.+676    	; 0x93c <vfprintf+0x720>
     698:	93 36       	cpi	r25, 0x63	; 99
     69a:	31 f0       	breq	.+12     	; 0x6a8 <vfprintf+0x48c>
     69c:	93 37       	cpi	r25, 0x73	; 115
     69e:	99 f0       	breq	.+38     	; 0x6c6 <vfprintf+0x4aa>
     6a0:	93 35       	cpi	r25, 0x53	; 83
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <vfprintf+0x48a>
     6a4:	59 c0       	rjmp	.+178    	; 0x758 <vfprintf+0x53c>
     6a6:	23 c0       	rjmp	.+70     	; 0x6ee <vfprintf+0x4d2>
     6a8:	f6 01       	movw	r30, r12
     6aa:	80 81       	ld	r24, Z
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	5e 01       	movw	r10, r28
     6b0:	08 94       	sec
     6b2:	a1 1c       	adc	r10, r1
     6b4:	b1 1c       	adc	r11, r1
     6b6:	22 e0       	ldi	r18, 0x02	; 2
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	c2 0e       	add	r12, r18
     6bc:	d3 1e       	adc	r13, r19
     6be:	21 e0       	ldi	r18, 0x01	; 1
     6c0:	e2 2e       	mov	r14, r18
     6c2:	f1 2c       	mov	r15, r1
     6c4:	12 c0       	rjmp	.+36     	; 0x6ea <vfprintf+0x4ce>
     6c6:	f6 01       	movw	r30, r12
     6c8:	a0 80       	ld	r10, Z
     6ca:	b1 80       	ldd	r11, Z+1	; 0x01
     6cc:	16 fd       	sbrc	r17, 6
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <vfprintf+0x4ba>
     6d0:	6f ef       	ldi	r22, 0xFF	; 255
     6d2:	7f ef       	ldi	r23, 0xFF	; 255
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <vfprintf+0x4be>
     6d6:	69 2d       	mov	r22, r9
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	22 e0       	ldi	r18, 0x02	; 2
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	c2 0e       	add	r12, r18
     6e0:	d3 1e       	adc	r13, r19
     6e2:	c5 01       	movw	r24, r10
     6e4:	0e 94 c0 10 	call	0x2180	; 0x2180 <strnlen>
     6e8:	7c 01       	movw	r14, r24
     6ea:	1f 77       	andi	r17, 0x7F	; 127
     6ec:	13 c0       	rjmp	.+38     	; 0x714 <vfprintf+0x4f8>
     6ee:	f6 01       	movw	r30, r12
     6f0:	a0 80       	ld	r10, Z
     6f2:	b1 80       	ldd	r11, Z+1	; 0x01
     6f4:	16 fd       	sbrc	r17, 6
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <vfprintf+0x4e2>
     6f8:	6f ef       	ldi	r22, 0xFF	; 255
     6fa:	7f ef       	ldi	r23, 0xFF	; 255
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <vfprintf+0x4e6>
     6fe:	69 2d       	mov	r22, r9
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	22 e0       	ldi	r18, 0x02	; 2
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	c2 0e       	add	r12, r18
     708:	d3 1e       	adc	r13, r19
     70a:	c5 01       	movw	r24, r10
     70c:	0e 94 b5 10 	call	0x216a	; 0x216a <strnlen_P>
     710:	7c 01       	movw	r14, r24
     712:	10 68       	ori	r17, 0x80	; 128
     714:	13 ff       	sbrs	r17, 3
     716:	07 c0       	rjmp	.+14     	; 0x726 <vfprintf+0x50a>
     718:	1b c0       	rjmp	.+54     	; 0x750 <vfprintf+0x534>
     71a:	80 e2       	ldi	r24, 0x20	; 32
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	b3 01       	movw	r22, r6
     720:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     724:	8a 94       	dec	r8
     726:	88 2d       	mov	r24, r8
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	e8 16       	cp	r14, r24
     72c:	f9 06       	cpc	r15, r25
     72e:	a8 f3       	brcs	.-22     	; 0x71a <vfprintf+0x4fe>
     730:	0f c0       	rjmp	.+30     	; 0x750 <vfprintf+0x534>
     732:	f5 01       	movw	r30, r10
     734:	17 fd       	sbrc	r17, 7
     736:	85 91       	lpm	r24, Z+
     738:	17 ff       	sbrs	r17, 7
     73a:	81 91       	ld	r24, Z+
     73c:	5f 01       	movw	r10, r30
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	b3 01       	movw	r22, r6
     742:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     746:	81 10       	cpse	r8, r1
     748:	8a 94       	dec	r8
     74a:	08 94       	sec
     74c:	e1 08       	sbc	r14, r1
     74e:	f1 08       	sbc	r15, r1
     750:	e1 14       	cp	r14, r1
     752:	f1 04       	cpc	r15, r1
     754:	71 f7       	brne	.-36     	; 0x732 <vfprintf+0x516>
     756:	f2 c0       	rjmp	.+484    	; 0x93c <vfprintf+0x720>
     758:	94 36       	cpi	r25, 0x64	; 100
     75a:	11 f0       	breq	.+4      	; 0x760 <vfprintf+0x544>
     75c:	99 36       	cpi	r25, 0x69	; 105
     75e:	89 f5       	brne	.+98     	; 0x7c2 <vfprintf+0x5a6>
     760:	17 ff       	sbrs	r17, 7
     762:	08 c0       	rjmp	.+16     	; 0x774 <vfprintf+0x558>
     764:	f6 01       	movw	r30, r12
     766:	20 81       	ld	r18, Z
     768:	31 81       	ldd	r19, Z+1	; 0x01
     76a:	42 81       	ldd	r20, Z+2	; 0x02
     76c:	53 81       	ldd	r21, Z+3	; 0x03
     76e:	84 e0       	ldi	r24, 0x04	; 4
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0a c0       	rjmp	.+20     	; 0x788 <vfprintf+0x56c>
     774:	f6 01       	movw	r30, r12
     776:	80 81       	ld	r24, Z
     778:	91 81       	ldd	r25, Z+1	; 0x01
     77a:	9c 01       	movw	r18, r24
     77c:	44 27       	eor	r20, r20
     77e:	37 fd       	sbrc	r19, 7
     780:	40 95       	com	r20
     782:	54 2f       	mov	r21, r20
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	c8 0e       	add	r12, r24
     78a:	d9 1e       	adc	r13, r25
     78c:	9f e6       	ldi	r25, 0x6F	; 111
     78e:	f9 2e       	mov	r15, r25
     790:	f1 22       	and	r15, r17
     792:	57 ff       	sbrs	r21, 7
     794:	09 c0       	rjmp	.+18     	; 0x7a8 <vfprintf+0x58c>
     796:	50 95       	com	r21
     798:	40 95       	com	r20
     79a:	30 95       	com	r19
     79c:	21 95       	neg	r18
     79e:	3f 4f       	sbci	r19, 0xFF	; 255
     7a0:	4f 4f       	sbci	r20, 0xFF	; 255
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	90 e8       	ldi	r25, 0x80	; 128
     7a6:	f9 2a       	or	r15, r25
     7a8:	ca 01       	movw	r24, r20
     7aa:	b9 01       	movw	r22, r18
     7ac:	ae 01       	movw	r20, r28
     7ae:	4f 5f       	subi	r20, 0xFF	; 255
     7b0:	5f 4f       	sbci	r21, 0xFF	; 255
     7b2:	2a e0       	ldi	r18, 0x0A	; 10
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	0e 94 91 11 	call	0x2322	; 0x2322 <__ultoa_invert>
     7ba:	e8 2e       	mov	r14, r24
     7bc:	e8 89       	ldd	r30, Y+16	; 0x10
     7be:	ee 1a       	sub	r14, r30
     7c0:	41 c0       	rjmp	.+130    	; 0x844 <vfprintf+0x628>
     7c2:	95 37       	cpi	r25, 0x75	; 117
     7c4:	21 f4       	brne	.+8      	; 0x7ce <vfprintf+0x5b2>
     7c6:	1f 7e       	andi	r17, 0xEF	; 239
     7c8:	2a e0       	ldi	r18, 0x0A	; 10
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	1c c0       	rjmp	.+56     	; 0x806 <vfprintf+0x5ea>
     7ce:	19 7f       	andi	r17, 0xF9	; 249
     7d0:	9f 36       	cpi	r25, 0x6F	; 111
     7d2:	61 f0       	breq	.+24     	; 0x7ec <vfprintf+0x5d0>
     7d4:	90 37       	cpi	r25, 0x70	; 112
     7d6:	20 f4       	brcc	.+8      	; 0x7e0 <vfprintf+0x5c4>
     7d8:	98 35       	cpi	r25, 0x58	; 88
     7da:	09 f0       	breq	.+2      	; 0x7de <vfprintf+0x5c2>
     7dc:	b2 c0       	rjmp	.+356    	; 0x942 <vfprintf+0x726>
     7de:	0f c0       	rjmp	.+30     	; 0x7fe <vfprintf+0x5e2>
     7e0:	90 37       	cpi	r25, 0x70	; 112
     7e2:	39 f0       	breq	.+14     	; 0x7f2 <vfprintf+0x5d6>
     7e4:	98 37       	cpi	r25, 0x78	; 120
     7e6:	09 f0       	breq	.+2      	; 0x7ea <vfprintf+0x5ce>
     7e8:	ac c0       	rjmp	.+344    	; 0x942 <vfprintf+0x726>
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <vfprintf+0x5d8>
     7ec:	28 e0       	ldi	r18, 0x08	; 8
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	0a c0       	rjmp	.+20     	; 0x806 <vfprintf+0x5ea>
     7f2:	10 61       	ori	r17, 0x10	; 16
     7f4:	14 fd       	sbrc	r17, 4
     7f6:	14 60       	ori	r17, 0x04	; 4
     7f8:	20 e1       	ldi	r18, 0x10	; 16
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <vfprintf+0x5ea>
     7fe:	14 fd       	sbrc	r17, 4
     800:	16 60       	ori	r17, 0x06	; 6
     802:	20 e1       	ldi	r18, 0x10	; 16
     804:	32 e0       	ldi	r19, 0x02	; 2
     806:	17 ff       	sbrs	r17, 7
     808:	08 c0       	rjmp	.+16     	; 0x81a <vfprintf+0x5fe>
     80a:	f6 01       	movw	r30, r12
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	44 e0       	ldi	r20, 0x04	; 4
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	08 c0       	rjmp	.+16     	; 0x82a <vfprintf+0x60e>
     81a:	f6 01       	movw	r30, r12
     81c:	80 81       	ld	r24, Z
     81e:	91 81       	ldd	r25, Z+1	; 0x01
     820:	bc 01       	movw	r22, r24
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	42 e0       	ldi	r20, 0x02	; 2
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	c4 0e       	add	r12, r20
     82c:	d5 1e       	adc	r13, r21
     82e:	ae 01       	movw	r20, r28
     830:	4f 5f       	subi	r20, 0xFF	; 255
     832:	5f 4f       	sbci	r21, 0xFF	; 255
     834:	0e 94 91 11 	call	0x2322	; 0x2322 <__ultoa_invert>
     838:	e8 2e       	mov	r14, r24
     83a:	58 89       	ldd	r21, Y+16	; 0x10
     83c:	e5 1a       	sub	r14, r21
     83e:	8f e7       	ldi	r24, 0x7F	; 127
     840:	f8 2e       	mov	r15, r24
     842:	f1 22       	and	r15, r17
     844:	f6 fe       	sbrs	r15, 6
     846:	0b c0       	rjmp	.+22     	; 0x85e <vfprintf+0x642>
     848:	8e ef       	ldi	r24, 0xFE	; 254
     84a:	f8 22       	and	r15, r24
     84c:	e9 14       	cp	r14, r9
     84e:	38 f4       	brcc	.+14     	; 0x85e <vfprintf+0x642>
     850:	f4 fe       	sbrs	r15, 4
     852:	07 c0       	rjmp	.+14     	; 0x862 <vfprintf+0x646>
     854:	f2 fc       	sbrc	r15, 2
     856:	05 c0       	rjmp	.+10     	; 0x862 <vfprintf+0x646>
     858:	9f ee       	ldi	r25, 0xEF	; 239
     85a:	f9 22       	and	r15, r25
     85c:	02 c0       	rjmp	.+4      	; 0x862 <vfprintf+0x646>
     85e:	1e 2d       	mov	r17, r14
     860:	01 c0       	rjmp	.+2      	; 0x864 <vfprintf+0x648>
     862:	19 2d       	mov	r17, r9
     864:	f4 fe       	sbrs	r15, 4
     866:	0d c0       	rjmp	.+26     	; 0x882 <vfprintf+0x666>
     868:	fe 01       	movw	r30, r28
     86a:	ee 0d       	add	r30, r14
     86c:	f1 1d       	adc	r31, r1
     86e:	80 81       	ld	r24, Z
     870:	80 33       	cpi	r24, 0x30	; 48
     872:	19 f4       	brne	.+6      	; 0x87a <vfprintf+0x65e>
     874:	e9 ee       	ldi	r30, 0xE9	; 233
     876:	fe 22       	and	r15, r30
     878:	08 c0       	rjmp	.+16     	; 0x88a <vfprintf+0x66e>
     87a:	1f 5f       	subi	r17, 0xFF	; 255
     87c:	f2 fe       	sbrs	r15, 2
     87e:	05 c0       	rjmp	.+10     	; 0x88a <vfprintf+0x66e>
     880:	03 c0       	rjmp	.+6      	; 0x888 <vfprintf+0x66c>
     882:	8f 2d       	mov	r24, r15
     884:	86 78       	andi	r24, 0x86	; 134
     886:	09 f0       	breq	.+2      	; 0x88a <vfprintf+0x66e>
     888:	1f 5f       	subi	r17, 0xFF	; 255
     88a:	0f 2d       	mov	r16, r15
     88c:	f3 fc       	sbrc	r15, 3
     88e:	14 c0       	rjmp	.+40     	; 0x8b8 <vfprintf+0x69c>
     890:	f0 fe       	sbrs	r15, 0
     892:	0f c0       	rjmp	.+30     	; 0x8b2 <vfprintf+0x696>
     894:	18 15       	cp	r17, r8
     896:	10 f0       	brcs	.+4      	; 0x89c <vfprintf+0x680>
     898:	9e 2c       	mov	r9, r14
     89a:	0b c0       	rjmp	.+22     	; 0x8b2 <vfprintf+0x696>
     89c:	9e 2c       	mov	r9, r14
     89e:	98 0c       	add	r9, r8
     8a0:	91 1a       	sub	r9, r17
     8a2:	18 2d       	mov	r17, r8
     8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <vfprintf+0x696>
     8a6:	80 e2       	ldi	r24, 0x20	; 32
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	b3 01       	movw	r22, r6
     8ac:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     8b0:	1f 5f       	subi	r17, 0xFF	; 255
     8b2:	18 15       	cp	r17, r8
     8b4:	c0 f3       	brcs	.-16     	; 0x8a6 <vfprintf+0x68a>
     8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <vfprintf+0x6a4>
     8b8:	18 15       	cp	r17, r8
     8ba:	10 f4       	brcc	.+4      	; 0x8c0 <vfprintf+0x6a4>
     8bc:	81 1a       	sub	r8, r17
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <vfprintf+0x6a6>
     8c0:	88 24       	eor	r8, r8
     8c2:	04 ff       	sbrs	r16, 4
     8c4:	0f c0       	rjmp	.+30     	; 0x8e4 <vfprintf+0x6c8>
     8c6:	80 e3       	ldi	r24, 0x30	; 48
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	b3 01       	movw	r22, r6
     8cc:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     8d0:	02 ff       	sbrs	r16, 2
     8d2:	1d c0       	rjmp	.+58     	; 0x90e <vfprintf+0x6f2>
     8d4:	01 fd       	sbrc	r16, 1
     8d6:	03 c0       	rjmp	.+6      	; 0x8de <vfprintf+0x6c2>
     8d8:	88 e7       	ldi	r24, 0x78	; 120
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e c0       	rjmp	.+28     	; 0x8fa <vfprintf+0x6de>
     8de:	88 e5       	ldi	r24, 0x58	; 88
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0b c0       	rjmp	.+22     	; 0x8fa <vfprintf+0x6de>
     8e4:	80 2f       	mov	r24, r16
     8e6:	86 78       	andi	r24, 0x86	; 134
     8e8:	91 f0       	breq	.+36     	; 0x90e <vfprintf+0x6f2>
     8ea:	01 ff       	sbrs	r16, 1
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <vfprintf+0x6d6>
     8ee:	8b e2       	ldi	r24, 0x2B	; 43
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <vfprintf+0x6d8>
     8f2:	80 e2       	ldi	r24, 0x20	; 32
     8f4:	f7 fc       	sbrc	r15, 7
     8f6:	8d e2       	ldi	r24, 0x2D	; 45
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	b3 01       	movw	r22, r6
     8fc:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     900:	06 c0       	rjmp	.+12     	; 0x90e <vfprintf+0x6f2>
     902:	80 e3       	ldi	r24, 0x30	; 48
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	b3 01       	movw	r22, r6
     908:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     90c:	9a 94       	dec	r9
     90e:	e9 14       	cp	r14, r9
     910:	c0 f3       	brcs	.-16     	; 0x902 <vfprintf+0x6e6>
     912:	ea 94       	dec	r14
     914:	e1 e0       	ldi	r30, 0x01	; 1
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	ec 0f       	add	r30, r28
     91a:	fd 1f       	adc	r31, r29
     91c:	ee 0d       	add	r30, r14
     91e:	f1 1d       	adc	r31, r1
     920:	80 81       	ld	r24, Z
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	b3 01       	movw	r22, r6
     926:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     92a:	ee 20       	and	r14, r14
     92c:	91 f7       	brne	.-28     	; 0x912 <vfprintf+0x6f6>
     92e:	06 c0       	rjmp	.+12     	; 0x93c <vfprintf+0x720>
     930:	80 e2       	ldi	r24, 0x20	; 32
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	b3 01       	movw	r22, r6
     936:	0e 94 0d 11 	call	0x221a	; 0x221a <fputc>
     93a:	8a 94       	dec	r8
     93c:	88 20       	and	r8, r8
     93e:	c1 f7       	brne	.-16     	; 0x930 <vfprintf+0x714>
     940:	99 cc       	rjmp	.-1742   	; 0x274 <vfprintf+0x58>
     942:	f3 01       	movw	r30, r6
     944:	66 81       	ldd	r22, Z+6	; 0x06
     946:	77 81       	ldd	r23, Z+7	; 0x07
     948:	cb 01       	movw	r24, r22
     94a:	61 96       	adiw	r28, 0x11	; 17
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	af 90       	pop	r10
     96a:	9f 90       	pop	r9
     96c:	8f 90       	pop	r8
     96e:	7f 90       	pop	r7
     970:	6f 90       	pop	r6
     972:	5f 90       	pop	r5
     974:	4f 90       	pop	r4
     976:	3f 90       	pop	r3
     978:	2f 90       	pop	r2
     97a:	08 95       	ret

0000097c <putval>:
     97c:	fc 01       	movw	r30, r24
     97e:	20 fd       	sbrc	r18, 0
     980:	08 c0       	rjmp	.+16     	; 0x992 <putval+0x16>
     982:	23 fd       	sbrc	r18, 3
     984:	05 c0       	rjmp	.+10     	; 0x990 <putval+0x14>
     986:	22 ff       	sbrs	r18, 2
     988:	02 c0       	rjmp	.+4      	; 0x98e <putval+0x12>
     98a:	73 83       	std	Z+3, r23	; 0x03
     98c:	62 83       	std	Z+2, r22	; 0x02
     98e:	51 83       	std	Z+1, r21	; 0x01
     990:	40 83       	st	Z, r20
     992:	08 95       	ret

00000994 <mulacc>:
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	44 ff       	sbrs	r20, 4
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <mulacc+0x10>
     9a0:	33 e0       	ldi	r19, 0x03	; 3
     9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <mulacc+0x32>
     9a4:	46 ff       	sbrs	r20, 6
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <mulacc+0x18>
     9a8:	34 e0       	ldi	r19, 0x04	; 4
     9aa:	0d c0       	rjmp	.+26     	; 0x9c6 <mulacc+0x32>
     9ac:	db 01       	movw	r26, r22
     9ae:	fc 01       	movw	r30, r24
     9b0:	aa 0f       	add	r26, r26
     9b2:	bb 1f       	adc	r27, r27
     9b4:	ee 1f       	adc	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	10 94       	com	r1
     9ba:	d1 f7       	brne	.-12     	; 0x9b0 <mulacc+0x1c>
     9bc:	6a 0f       	add	r22, r26
     9be:	7b 1f       	adc	r23, r27
     9c0:	8e 1f       	adc	r24, r30
     9c2:	9f 1f       	adc	r25, r31
     9c4:	31 e0       	ldi	r19, 0x01	; 1
     9c6:	66 0f       	add	r22, r22
     9c8:	77 1f       	adc	r23, r23
     9ca:	88 1f       	adc	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	31 50       	subi	r19, 0x01	; 1
     9d0:	d1 f7       	brne	.-12     	; 0x9c6 <mulacc+0x32>
     9d2:	7b 01       	movw	r14, r22
     9d4:	8c 01       	movw	r16, r24
     9d6:	e2 0e       	add	r14, r18
     9d8:	f1 1c       	adc	r15, r1
     9da:	01 1d       	adc	r16, r1
     9dc:	11 1d       	adc	r17, r1
     9de:	a8 01       	movw	r20, r16
     9e0:	97 01       	movw	r18, r14
     9e2:	b7 01       	movw	r22, r14
     9e4:	ca 01       	movw	r24, r20
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	08 95       	ret

000009f0 <skip_spaces>:
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	8c 01       	movw	r16, r24
     9fa:	c8 01       	movw	r24, r16
     9fc:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     a00:	ec 01       	movw	r28, r24
     a02:	97 fd       	sbrc	r25, 7
     a04:	08 c0       	rjmp	.+16     	; 0xa16 <skip_spaces+0x26>
     a06:	0e 94 9a 10 	call	0x2134	; 0x2134 <isspace>
     a0a:	89 2b       	or	r24, r25
     a0c:	b1 f7       	brne	.-20     	; 0x9fa <skip_spaces+0xa>
     a0e:	ce 01       	movw	r24, r28
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 77 11 	call	0x22ee	; 0x22ee <ungetc>
     a16:	ce 01       	movw	r24, r28
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	08 95       	ret

00000a22 <conv_int>:
     a22:	8f 92       	push	r8
     a24:	9f 92       	push	r9
     a26:	af 92       	push	r10
     a28:	bf 92       	push	r11
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	5c 01       	movw	r10, r24
     a3a:	eb 01       	movw	r28, r22
     a3c:	4a 01       	movw	r8, r20
     a3e:	12 2f       	mov	r17, r18
     a40:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     a44:	ac 01       	movw	r20, r24
     a46:	8b 32       	cpi	r24, 0x2B	; 43
     a48:	19 f0       	breq	.+6      	; 0xa50 <conv_int+0x2e>
     a4a:	8d 32       	cpi	r24, 0x2D	; 45
     a4c:	51 f4       	brne	.+20     	; 0xa62 <conv_int+0x40>
     a4e:	10 68       	ori	r17, 0x80	; 128
     a50:	21 97       	sbiw	r28, 0x01	; 1
     a52:	09 f4       	brne	.+2      	; 0xa56 <conv_int+0x34>
     a54:	6b c0       	rjmp	.+214    	; 0xb2c <conv_int+0x10a>
     a56:	c5 01       	movw	r24, r10
     a58:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     a5c:	ac 01       	movw	r20, r24
     a5e:	97 fd       	sbrc	r25, 7
     a60:	65 c0       	rjmp	.+202    	; 0xb2c <conv_int+0x10a>
     a62:	6d ef       	ldi	r22, 0xFD	; 253
     a64:	d6 2e       	mov	r13, r22
     a66:	d1 22       	and	r13, r17
     a68:	8d 2d       	mov	r24, r13
     a6a:	80 73       	andi	r24, 0x30	; 48
     a6c:	01 f5       	brne	.+64     	; 0xaae <conv_int+0x8c>
     a6e:	40 33       	cpi	r20, 0x30	; 48
     a70:	f1 f4       	brne	.+60     	; 0xaae <conv_int+0x8c>
     a72:	21 97       	sbiw	r28, 0x01	; 1
     a74:	09 f4       	brne	.+2      	; 0xa78 <conv_int+0x56>
     a76:	46 c0       	rjmp	.+140    	; 0xb04 <conv_int+0xe2>
     a78:	c5 01       	movw	r24, r10
     a7a:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     a7e:	ac 01       	movw	r20, r24
     a80:	97 fd       	sbrc	r25, 7
     a82:	40 c0       	rjmp	.+128    	; 0xb04 <conv_int+0xe2>
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	d8 2a       	or	r13, r24
     a88:	48 37       	cpi	r20, 0x78	; 120
     a8a:	11 f0       	breq	.+4      	; 0xa90 <conv_int+0x6e>
     a8c:	48 35       	cpi	r20, 0x58	; 88
     a8e:	59 f4       	brne	.+22     	; 0xaa6 <conv_int+0x84>
     a90:	80 e4       	ldi	r24, 0x40	; 64
     a92:	d8 2a       	or	r13, r24
     a94:	21 97       	sbiw	r28, 0x01	; 1
     a96:	b1 f1       	breq	.+108    	; 0xb04 <conv_int+0xe2>
     a98:	c5 01       	movw	r24, r10
     a9a:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     a9e:	ac 01       	movw	r20, r24
     aa0:	99 23       	and	r25, r25
     aa2:	2c f4       	brge	.+10     	; 0xaae <conv_int+0x8c>
     aa4:	2f c0       	rjmp	.+94     	; 0xb04 <conv_int+0xe2>
     aa6:	d6 fc       	sbrc	r13, 6
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <conv_int+0x8c>
     aaa:	80 e1       	ldi	r24, 0x10	; 16
     aac:	d8 2a       	or	r13, r24
     aae:	ee 24       	eor	r14, r14
     ab0:	ff 24       	eor	r15, r15
     ab2:	87 01       	movw	r16, r14
     ab4:	24 2f       	mov	r18, r20
     ab6:	20 53       	subi	r18, 0x30	; 48
     ab8:	28 30       	cpi	r18, 0x08	; 8
     aba:	88 f0       	brcs	.+34     	; 0xade <conv_int+0xbc>
     abc:	d4 fc       	sbrc	r13, 4
     abe:	09 c0       	rjmp	.+18     	; 0xad2 <conv_int+0xb0>
     ac0:	2a 30       	cpi	r18, 0x0A	; 10
     ac2:	68 f0       	brcs	.+26     	; 0xade <conv_int+0xbc>
     ac4:	d6 fe       	sbrs	r13, 6
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <conv_int+0xb0>
     ac8:	2f 7d       	andi	r18, 0xDF	; 223
     aca:	82 2f       	mov	r24, r18
     acc:	81 51       	subi	r24, 0x11	; 17
     ace:	86 30       	cpi	r24, 0x06	; 6
     ad0:	28 f0       	brcs	.+10     	; 0xadc <conv_int+0xba>
     ad2:	ca 01       	movw	r24, r20
     ad4:	b5 01       	movw	r22, r10
     ad6:	0e 94 77 11 	call	0x22ee	; 0x22ee <ungetc>
     ada:	11 c0       	rjmp	.+34     	; 0xafe <conv_int+0xdc>
     adc:	27 50       	subi	r18, 0x07	; 7
     ade:	c8 01       	movw	r24, r16
     ae0:	b7 01       	movw	r22, r14
     ae2:	4d 2d       	mov	r20, r13
     ae4:	57 df       	rcall	.-338    	; 0x994 <mulacc>
     ae6:	7b 01       	movw	r14, r22
     ae8:	8c 01       	movw	r16, r24
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	d8 2a       	or	r13, r24
     aee:	21 97       	sbiw	r28, 0x01	; 1
     af0:	61 f0       	breq	.+24     	; 0xb0a <conv_int+0xe8>
     af2:	c5 01       	movw	r24, r10
     af4:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     af8:	ac 01       	movw	r20, r24
     afa:	97 ff       	sbrs	r25, 7
     afc:	db cf       	rjmp	.-74     	; 0xab4 <conv_int+0x92>
     afe:	d1 fc       	sbrc	r13, 1
     b00:	04 c0       	rjmp	.+8      	; 0xb0a <conv_int+0xe8>
     b02:	14 c0       	rjmp	.+40     	; 0xb2c <conv_int+0x10a>
     b04:	ee 24       	eor	r14, r14
     b06:	ff 24       	eor	r15, r15
     b08:	87 01       	movw	r16, r14
     b0a:	d7 fe       	sbrs	r13, 7
     b0c:	08 c0       	rjmp	.+16     	; 0xb1e <conv_int+0xfc>
     b0e:	10 95       	com	r17
     b10:	00 95       	com	r16
     b12:	f0 94       	com	r15
     b14:	e0 94       	com	r14
     b16:	e1 1c       	adc	r14, r1
     b18:	f1 1c       	adc	r15, r1
     b1a:	01 1d       	adc	r16, r1
     b1c:	11 1d       	adc	r17, r1
     b1e:	c4 01       	movw	r24, r8
     b20:	b8 01       	movw	r22, r16
     b22:	a7 01       	movw	r20, r14
     b24:	2d 2d       	mov	r18, r13
     b26:	2a df       	rcall	.-428    	; 0x97c <putval>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <conv_int+0x10c>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	bf 90       	pop	r11
     b3e:	af 90       	pop	r10
     b40:	9f 90       	pop	r9
     b42:	8f 90       	pop	r8
     b44:	08 95       	ret

00000b46 <conv_brk>:
     b46:	6f 92       	push	r6
     b48:	7f 92       	push	r7
     b4a:	8f 92       	push	r8
     b4c:	9f 92       	push	r9
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	a0 97       	sbiw	r28, 0x20	; 32
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	5c 01       	movw	r10, r24
     b74:	6b 01       	movw	r12, r22
     b76:	8a 01       	movw	r16, r20
     b78:	79 01       	movw	r14, r18
     b7a:	fe 01       	movw	r30, r28
     b7c:	31 96       	adiw	r30, 0x01	; 1
     b7e:	80 e2       	ldi	r24, 0x20	; 32
     b80:	df 01       	movw	r26, r30
     b82:	1d 92       	st	X+, r1
     b84:	8a 95       	dec	r24
     b86:	e9 f7       	brne	.-6      	; 0xb82 <conv_brk+0x3c>
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	3f 01       	movw	r6, r30
     b94:	a1 e0       	ldi	r26, 0x01	; 1
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	f5 01       	movw	r30, r10
     b9a:	83 81       	ldd	r24, Z+3	; 0x03
     b9c:	f7 01       	movw	r30, r14
     b9e:	83 fd       	sbrc	r24, 3
     ba0:	25 91       	lpm	r18, Z+
     ba2:	83 ff       	sbrs	r24, 3
     ba4:	21 91       	ld	r18, Z+
     ba6:	7f 01       	movw	r14, r30
     ba8:	22 23       	and	r18, r18
     baa:	09 f4       	brne	.+2      	; 0xbae <conv_brk+0x68>
     bac:	81 c0       	rjmp	.+258    	; 0xcb0 <conv_brk+0x16a>
     bae:	2e 35       	cpi	r18, 0x5E	; 94
     bb0:	19 f4       	brne	.+6      	; 0xbb8 <conv_brk+0x72>
     bb2:	41 15       	cp	r20, r1
     bb4:	51 05       	cpc	r21, r1
     bb6:	69 f1       	breq	.+90     	; 0xc12 <conv_brk+0xcc>
     bb8:	87 2f       	mov	r24, r23
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	84 17       	cp	r24, r20
     bbe:	95 07       	cpc	r25, r21
     bc0:	44 f4       	brge	.+16     	; 0xbd2 <conv_brk+0x8c>
     bc2:	2d 35       	cpi	r18, 0x5D	; 93
     bc4:	51 f1       	breq	.+84     	; 0xc1a <conv_brk+0xd4>
     bc6:	2d 32       	cpi	r18, 0x2D	; 45
     bc8:	21 f4       	brne	.+8      	; 0xbd2 <conv_brk+0x8c>
     bca:	33 23       	and	r19, r19
     bcc:	29 f4       	brne	.+10     	; 0xbd8 <conv_brk+0x92>
     bce:	31 e0       	ldi	r19, 0x01	; 1
     bd0:	21 c0       	rjmp	.+66     	; 0xc14 <conv_brk+0xce>
     bd2:	33 23       	and	r19, r19
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <conv_brk+0x92>
     bd6:	62 2f       	mov	r22, r18
     bd8:	32 2f       	mov	r19, r18
     bda:	83 2f       	mov	r24, r19
     bdc:	86 95       	lsr	r24
     bde:	86 95       	lsr	r24
     be0:	86 95       	lsr	r24
     be2:	f3 01       	movw	r30, r6
     be4:	e8 0f       	add	r30, r24
     be6:	f1 1d       	adc	r31, r1
     be8:	83 2f       	mov	r24, r19
     bea:	87 70       	andi	r24, 0x07	; 7
     bec:	4d 01       	movw	r8, r26
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <conv_brk+0xae>
     bf0:	88 0c       	add	r8, r8
     bf2:	99 1c       	adc	r9, r9
     bf4:	8a 95       	dec	r24
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <conv_brk+0xaa>
     bf8:	20 81       	ld	r18, Z
     bfa:	28 29       	or	r18, r8
     bfc:	20 83       	st	Z, r18
     bfe:	36 17       	cp	r19, r22
     c00:	11 f4       	brne	.+4      	; 0xc06 <conv_brk+0xc0>
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	07 c0       	rjmp	.+14     	; 0xc14 <conv_brk+0xce>
     c06:	36 17       	cp	r19, r22
     c08:	10 f4       	brcc	.+4      	; 0xc0e <conv_brk+0xc8>
     c0a:	3f 5f       	subi	r19, 0xFF	; 255
     c0c:	e6 cf       	rjmp	.-52     	; 0xbda <conv_brk+0x94>
     c0e:	31 50       	subi	r19, 0x01	; 1
     c10:	e4 cf       	rjmp	.-56     	; 0xbda <conv_brk+0x94>
     c12:	71 e0       	ldi	r23, 0x01	; 1
     c14:	4f 5f       	subi	r20, 0xFF	; 255
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	bf cf       	rjmp	.-130    	; 0xb98 <conv_brk+0x52>
     c1a:	33 23       	and	r19, r19
     c1c:	19 f0       	breq	.+6      	; 0xc24 <conv_brk+0xde>
     c1e:	8e 81       	ldd	r24, Y+6	; 0x06
     c20:	80 62       	ori	r24, 0x20	; 32
     c22:	8e 83       	std	Y+6, r24	; 0x06
     c24:	77 23       	and	r23, r23
     c26:	59 f0       	breq	.+22     	; 0xc3e <conv_brk+0xf8>
     c28:	fe 01       	movw	r30, r28
     c2a:	31 96       	adiw	r30, 0x01	; 1
     c2c:	9e 01       	movw	r18, r28
     c2e:	2f 5d       	subi	r18, 0xDF	; 223
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	80 81       	ld	r24, Z
     c34:	80 95       	com	r24
     c36:	81 93       	st	Z+, r24
     c38:	e2 17       	cp	r30, r18
     c3a:	f3 07       	cpc	r31, r19
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <conv_brk+0xec>
     c3e:	99 24       	eor	r9, r9
     c40:	93 94       	inc	r9
     c42:	3e 01       	movw	r6, r28
     c44:	08 94       	sec
     c46:	61 1c       	adc	r6, r1
     c48:	71 1c       	adc	r7, r1
     c4a:	c5 01       	movw	r24, r10
     c4c:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     c50:	ac 01       	movw	r20, r24
     c52:	97 fd       	sbrc	r25, 7
     c54:	25 c0       	rjmp	.+74     	; 0xca0 <conv_brk+0x15a>
     c56:	86 95       	lsr	r24
     c58:	86 95       	lsr	r24
     c5a:	86 95       	lsr	r24
     c5c:	f3 01       	movw	r30, r6
     c5e:	e8 0f       	add	r30, r24
     c60:	f1 1d       	adc	r31, r1
     c62:	80 81       	ld	r24, Z
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9a 01       	movw	r18, r20
     c68:	27 70       	andi	r18, 0x07	; 7
     c6a:	30 70       	andi	r19, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <conv_brk+0x12c>
     c6e:	95 95       	asr	r25
     c70:	87 95       	ror	r24
     c72:	2a 95       	dec	r18
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <conv_brk+0x128>
     c76:	80 fd       	sbrc	r24, 0
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <conv_brk+0x13e>
     c7a:	ca 01       	movw	r24, r20
     c7c:	b5 01       	movw	r22, r10
     c7e:	0e 94 77 11 	call	0x22ee	; 0x22ee <ungetc>
     c82:	0e c0       	rjmp	.+28     	; 0xca0 <conv_brk+0x15a>
     c84:	01 15       	cp	r16, r1
     c86:	11 05       	cpc	r17, r1
     c88:	19 f0       	breq	.+6      	; 0xc90 <conv_brk+0x14a>
     c8a:	d8 01       	movw	r26, r16
     c8c:	4d 93       	st	X+, r20
     c8e:	8d 01       	movw	r16, r26
     c90:	08 94       	sec
     c92:	c1 08       	sbc	r12, r1
     c94:	d1 08       	sbc	r13, r1
     c96:	99 24       	eor	r9, r9
     c98:	c1 14       	cp	r12, r1
     c9a:	d1 04       	cpc	r13, r1
     c9c:	b1 f6       	brne	.-84     	; 0xc4a <conv_brk+0x104>
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <conv_brk+0x15e>
     ca0:	99 20       	and	r9, r9
     ca2:	31 f4       	brne	.+12     	; 0xcb0 <conv_brk+0x16a>
     ca4:	01 15       	cp	r16, r1
     ca6:	11 05       	cpc	r17, r1
     ca8:	29 f0       	breq	.+10     	; 0xcb4 <conv_brk+0x16e>
     caa:	f8 01       	movw	r30, r16
     cac:	10 82       	st	Z, r1
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <conv_brk+0x16e>
     cb0:	ee 24       	eor	r14, r14
     cb2:	ff 24       	eor	r15, r15
     cb4:	c7 01       	movw	r24, r14
     cb6:	a0 96       	adiw	r28, 0x20	; 32
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	bf 90       	pop	r11
     cd4:	af 90       	pop	r10
     cd6:	9f 90       	pop	r9
     cd8:	8f 90       	pop	r8
     cda:	7f 90       	pop	r7
     cdc:	6f 90       	pop	r6
     cde:	08 95       	ret

00000ce0 <conv_flt>:
     ce0:	2f 92       	push	r2
     ce2:	3f 92       	push	r3
     ce4:	5f 92       	push	r5
     ce6:	6f 92       	push	r6
     ce8:	7f 92       	push	r7
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	3c 01       	movw	r6, r24
     d04:	7b 01       	movw	r14, r22
     d06:	1a 01       	movw	r2, r20
     d08:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     d0c:	ec 01       	movw	r28, r24
     d0e:	8b 32       	cpi	r24, 0x2B	; 43
     d10:	39 f0       	breq	.+14     	; 0xd20 <conv_flt+0x40>
     d12:	8d 32       	cpi	r24, 0x2D	; 45
     d14:	11 f0       	breq	.+4      	; 0xd1a <conv_flt+0x3a>
     d16:	55 24       	eor	r5, r5
     d18:	11 c0       	rjmp	.+34     	; 0xd3c <conv_flt+0x5c>
     d1a:	b0 e8       	ldi	r27, 0x80	; 128
     d1c:	5b 2e       	mov	r5, r27
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <conv_flt+0x42>
     d20:	55 24       	eor	r5, r5
     d22:	08 94       	sec
     d24:	e1 08       	sbc	r14, r1
     d26:	f1 08       	sbc	r15, r1
     d28:	e1 14       	cp	r14, r1
     d2a:	f1 04       	cpc	r15, r1
     d2c:	09 f4       	brne	.+2      	; 0xd30 <conv_flt+0x50>
     d2e:	14 c1       	rjmp	.+552    	; 0xf58 <conv_flt+0x278>
     d30:	c3 01       	movw	r24, r6
     d32:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     d36:	ec 01       	movw	r28, r24
     d38:	97 fd       	sbrc	r25, 7
     d3a:	0e c1       	rjmp	.+540    	; 0xf58 <conv_flt+0x278>
     d3c:	ce 01       	movw	r24, r28
     d3e:	0e 94 a2 10 	call	0x2144	; 0x2144 <tolower>
     d42:	89 36       	cpi	r24, 0x69	; 105
     d44:	91 05       	cpc	r25, r1
     d46:	21 f0       	breq	.+8      	; 0xd50 <conv_flt+0x70>
     d48:	8e 36       	cpi	r24, 0x6E	; 110
     d4a:	91 05       	cpc	r25, r1
     d4c:	99 f5       	brne	.+102    	; 0xdb4 <conv_flt+0xd4>
     d4e:	1d c0       	rjmp	.+58     	; 0xd8a <conv_flt+0xaa>
     d50:	09 ea       	ldi	r16, 0xA9	; 169
     d52:	10 e0       	ldi	r17, 0x00	; 0
     d54:	1c c0       	rjmp	.+56     	; 0xd8e <conv_flt+0xae>
     d56:	08 94       	sec
     d58:	e1 08       	sbc	r14, r1
     d5a:	f1 08       	sbc	r15, r1
     d5c:	e1 14       	cp	r14, r1
     d5e:	f1 04       	cpc	r15, r1
     d60:	71 f0       	breq	.+28     	; 0xd7e <conv_flt+0x9e>
     d62:	c3 01       	movw	r24, r6
     d64:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     d68:	ec 01       	movw	r28, r24
     d6a:	97 fd       	sbrc	r25, 7
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <conv_flt+0x9e>
     d6e:	0e 94 a2 10 	call	0x2144	; 0x2144 <tolower>
     d72:	d8 16       	cp	r13, r24
     d74:	61 f0       	breq	.+24     	; 0xd8e <conv_flt+0xae>
     d76:	ce 01       	movw	r24, r28
     d78:	b3 01       	movw	r22, r6
     d7a:	0e 94 77 11 	call	0x22ee	; 0x22ee <ungetc>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	0c 3a       	cpi	r16, 0xAC	; 172
     d82:	12 07       	cpc	r17, r18
     d84:	09 f0       	breq	.+2      	; 0xd88 <conv_flt+0xa8>
     d86:	e8 c0       	rjmp	.+464    	; 0xf58 <conv_flt+0x278>
     d88:	08 c0       	rjmp	.+16     	; 0xd9a <conv_flt+0xba>
     d8a:	06 ea       	ldi	r16, 0xA6	; 166
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	f8 01       	movw	r30, r16
     d90:	0f 5f       	subi	r16, 0xFF	; 255
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	d4 90       	lpm	r13, Z+
     d96:	dd 20       	and	r13, r13
     d98:	f1 f6       	brne	.-68     	; 0xd56 <conv_flt+0x76>
     d9a:	09 5a       	subi	r16, 0xA9	; 169
     d9c:	10 40       	sbci	r17, 0x00	; 0
     d9e:	29 f0       	breq	.+10     	; 0xdaa <conv_flt+0xca>
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	a0 e8       	ldi	r26, 0x80	; 128
     da6:	bf e7       	ldi	r27, 0x7F	; 127
     da8:	cb c0       	rjmp	.+406    	; 0xf40 <conv_flt+0x260>
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 ec       	ldi	r26, 0xC0	; 192
     db0:	bf e7       	ldi	r27, 0x7F	; 127
     db2:	c6 c0       	rjmp	.+396    	; 0xf40 <conv_flt+0x260>
     db4:	cc 24       	eor	r12, r12
     db6:	dd 24       	eor	r13, r13
     db8:	88 24       	eor	r8, r8
     dba:	99 24       	eor	r9, r9
     dbc:	54 01       	movw	r10, r8
     dbe:	ae 01       	movw	r20, r28
     dc0:	40 53       	subi	r20, 0x30	; 48
     dc2:	24 2f       	mov	r18, r20
     dc4:	4a 30       	cpi	r20, 0x0A	; 10
     dc6:	30 f5       	brcc	.+76     	; 0xe14 <conv_flt+0x134>
     dc8:	52 e0       	ldi	r21, 0x02	; 2
     dca:	55 2a       	or	r5, r21
     dcc:	85 2d       	mov	r24, r5
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	ac 01       	movw	r20, r24
     dd2:	48 70       	andi	r20, 0x08	; 8
     dd4:	50 70       	andi	r21, 0x00	; 0
     dd6:	52 fe       	sbrs	r5, 2
     dd8:	06 c0       	rjmp	.+12     	; 0xde6 <conv_flt+0x106>
     dda:	45 2b       	or	r20, r21
     ddc:	09 f5       	brne	.+66     	; 0xe20 <conv_flt+0x140>
     dde:	08 94       	sec
     de0:	c1 1c       	adc	r12, r1
     de2:	d1 1c       	adc	r13, r1
     de4:	1d c0       	rjmp	.+58     	; 0xe20 <conv_flt+0x140>
     de6:	45 2b       	or	r20, r21
     de8:	19 f0       	breq	.+6      	; 0xdf0 <conv_flt+0x110>
     dea:	08 94       	sec
     dec:	c1 08       	sbc	r12, r1
     dee:	d1 08       	sbc	r13, r1
     df0:	c5 01       	movw	r24, r10
     df2:	b4 01       	movw	r22, r8
     df4:	40 e2       	ldi	r20, 0x20	; 32
     df6:	ce dd       	rcall	.-1124   	; 0x994 <mulacc>
     df8:	4b 01       	movw	r8, r22
     dfa:	5c 01       	movw	r10, r24
     dfc:	88 e9       	ldi	r24, 0x98	; 152
     dfe:	88 16       	cp	r8, r24
     e00:	89 e9       	ldi	r24, 0x99	; 153
     e02:	98 06       	cpc	r9, r24
     e04:	89 e9       	ldi	r24, 0x99	; 153
     e06:	a8 06       	cpc	r10, r24
     e08:	89 e1       	ldi	r24, 0x19	; 25
     e0a:	b8 06       	cpc	r11, r24
     e0c:	48 f0       	brcs	.+18     	; 0xe20 <conv_flt+0x140>
     e0e:	94 e0       	ldi	r25, 0x04	; 4
     e10:	59 2a       	or	r5, r25
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <conv_flt+0x140>
     e14:	4e 3f       	cpi	r20, 0xFE	; 254
     e16:	81 f4       	brne	.+32     	; 0xe38 <conv_flt+0x158>
     e18:	53 fc       	sbrc	r5, 3
     e1a:	0e c0       	rjmp	.+28     	; 0xe38 <conv_flt+0x158>
     e1c:	e8 e0       	ldi	r30, 0x08	; 8
     e1e:	5e 2a       	or	r5, r30
     e20:	08 94       	sec
     e22:	e1 08       	sbc	r14, r1
     e24:	f1 08       	sbc	r15, r1
     e26:	e1 14       	cp	r14, r1
     e28:	f1 04       	cpc	r15, r1
     e2a:	31 f0       	breq	.+12     	; 0xe38 <conv_flt+0x158>
     e2c:	c3 01       	movw	r24, r6
     e2e:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     e32:	ec 01       	movw	r28, r24
     e34:	97 ff       	sbrs	r25, 7
     e36:	c3 cf       	rjmp	.-122    	; 0xdbe <conv_flt+0xde>
     e38:	51 fe       	sbrs	r5, 1
     e3a:	8e c0       	rjmp	.+284    	; 0xf58 <conv_flt+0x278>
     e3c:	c5 36       	cpi	r28, 0x65	; 101
     e3e:	19 f0       	breq	.+6      	; 0xe46 <conv_flt+0x166>
     e40:	c5 34       	cpi	r28, 0x45	; 69
     e42:	09 f0       	breq	.+2      	; 0xe46 <conv_flt+0x166>
     e44:	45 c0       	rjmp	.+138    	; 0xed0 <conv_flt+0x1f0>
     e46:	08 94       	sec
     e48:	e1 08       	sbc	r14, r1
     e4a:	f1 08       	sbc	r15, r1
     e4c:	e1 14       	cp	r14, r1
     e4e:	f1 04       	cpc	r15, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <conv_flt+0x174>
     e52:	82 c0       	rjmp	.+260    	; 0xf58 <conv_flt+0x278>
     e54:	c3 01       	movw	r24, r6
     e56:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     e5a:	ec 01       	movw	r28, r24
     e5c:	97 fd       	sbrc	r25, 7
     e5e:	7c c0       	rjmp	.+248    	; 0xf58 <conv_flt+0x278>
     e60:	8b 32       	cpi	r24, 0x2B	; 43
     e62:	21 f0       	breq	.+8      	; 0xe6c <conv_flt+0x18c>
     e64:	8d 32       	cpi	r24, 0x2D	; 45
     e66:	69 f4       	brne	.+26     	; 0xe82 <conv_flt+0x1a2>
     e68:	f0 e1       	ldi	r31, 0x10	; 16
     e6a:	5f 2a       	or	r5, r31
     e6c:	08 94       	sec
     e6e:	e1 08       	sbc	r14, r1
     e70:	f1 08       	sbc	r15, r1
     e72:	e1 14       	cp	r14, r1
     e74:	f1 04       	cpc	r15, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <conv_flt+0x19a>
     e78:	6f c0       	rjmp	.+222    	; 0xf58 <conv_flt+0x278>
     e7a:	c3 01       	movw	r24, r6
     e7c:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     e80:	ec 01       	movw	r28, r24
     e82:	ce 01       	movw	r24, r28
     e84:	c0 97       	sbiw	r24, 0x30	; 48
     e86:	0a 97       	sbiw	r24, 0x0a	; 10
     e88:	08 f0       	brcs	.+2      	; 0xe8c <conv_flt+0x1ac>
     e8a:	66 c0       	rjmp	.+204    	; 0xf58 <conv_flt+0x278>
     e8c:	00 e0       	ldi	r16, 0x00	; 0
     e8e:	10 e0       	ldi	r17, 0x00	; 0
     e90:	b8 01       	movw	r22, r16
     e92:	88 27       	eor	r24, r24
     e94:	77 fd       	sbrc	r23, 7
     e96:	80 95       	com	r24
     e98:	98 2f       	mov	r25, r24
     e9a:	ae 01       	movw	r20, r28
     e9c:	40 53       	subi	r20, 0x30	; 48
     e9e:	24 2f       	mov	r18, r20
     ea0:	40 e2       	ldi	r20, 0x20	; 32
     ea2:	78 dd       	rcall	.-1296   	; 0x994 <mulacc>
     ea4:	8b 01       	movw	r16, r22
     ea6:	08 94       	sec
     ea8:	e1 08       	sbc	r14, r1
     eaa:	f1 08       	sbc	r15, r1
     eac:	e1 14       	cp	r14, r1
     eae:	f1 04       	cpc	r15, r1
     eb0:	39 f0       	breq	.+14     	; 0xec0 <conv_flt+0x1e0>
     eb2:	c3 01       	movw	r24, r6
     eb4:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     eb8:	ec 01       	movw	r28, r24
     eba:	c0 97       	sbiw	r24, 0x30	; 48
     ebc:	0a 97       	sbiw	r24, 0x0a	; 10
     ebe:	40 f3       	brcs	.-48     	; 0xe90 <conv_flt+0x1b0>
     ec0:	b8 01       	movw	r22, r16
     ec2:	54 fe       	sbrs	r5, 4
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <conv_flt+0x1ec>
     ec6:	70 95       	com	r23
     ec8:	61 95       	neg	r22
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	c6 0e       	add	r12, r22
     ece:	d7 1e       	adc	r13, r23
     ed0:	ef 28       	or	r14, r15
     ed2:	31 f0       	breq	.+12     	; 0xee0 <conv_flt+0x200>
     ed4:	d7 fd       	sbrc	r29, 7
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <conv_flt+0x200>
     ed8:	ce 01       	movw	r24, r28
     eda:	b3 01       	movw	r22, r6
     edc:	0e 94 77 11 	call	0x22ee	; 0x22ee <ungetc>
     ee0:	c5 01       	movw	r24, r10
     ee2:	b4 01       	movw	r22, r8
     ee4:	83 d1       	rcall	.+774    	; 0x11ec <__floatunsisf>
     ee6:	d7 fe       	sbrs	r13, 7
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <conv_flt+0x224>
     eea:	a5 ec       	ldi	r26, 0xC5	; 197
     eec:	ea 2e       	mov	r14, r26
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	fa 2e       	mov	r15, r26
     ef2:	d0 94       	com	r13
     ef4:	c1 94       	neg	r12
     ef6:	d1 08       	sbc	r13, r1
     ef8:	d3 94       	inc	r13
     efa:	c0 e2       	ldi	r28, 0x20	; 32
     efc:	d0 e0       	ldi	r29, 0x00	; 0
     efe:	00 e0       	ldi	r16, 0x00	; 0
     f00:	10 e0       	ldi	r17, 0x00	; 0
     f02:	0d c0       	rjmp	.+26     	; 0xf1e <conv_flt+0x23e>
     f04:	fd ed       	ldi	r31, 0xDD	; 221
     f06:	ef 2e       	mov	r14, r31
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	ff 2e       	mov	r15, r31
     f0c:	f6 cf       	rjmp	.-20     	; 0xefa <conv_flt+0x21a>
     f0e:	f7 01       	movw	r30, r14
     f10:	25 91       	lpm	r18, Z+
     f12:	35 91       	lpm	r19, Z+
     f14:	45 91       	lpm	r20, Z+
     f16:	54 91       	lpm	r21, Z+
     f18:	a6 d1       	rcall	.+844    	; 0x1266 <__mulsf3>
     f1a:	cc 1a       	sub	r12, r28
     f1c:	dd 0a       	sbc	r13, r29
     f1e:	cc 16       	cp	r12, r28
     f20:	dd 06       	cpc	r13, r29
     f22:	a8 f7       	brcc	.-22     	; 0xf0e <conv_flt+0x22e>
     f24:	d6 95       	lsr	r29
     f26:	c7 95       	ror	r28
     f28:	0f 5f       	subi	r16, 0xFF	; 255
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	06 30       	cpi	r16, 0x06	; 6
     f2e:	11 05       	cpc	r17, r1
     f30:	29 f0       	breq	.+10     	; 0xf3c <conv_flt+0x25c>
     f32:	ec ef       	ldi	r30, 0xFC	; 252
     f34:	ff ef       	ldi	r31, 0xFF	; 255
     f36:	ee 0e       	add	r14, r30
     f38:	ff 1e       	adc	r15, r31
     f3a:	f1 cf       	rjmp	.-30     	; 0xf1e <conv_flt+0x23e>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	57 fc       	sbrc	r5, 7
     f42:	b0 58       	subi	r27, 0x80	; 128
     f44:	21 14       	cp	r2, r1
     f46:	31 04       	cpc	r3, r1
     f48:	29 f0       	breq	.+10     	; 0xf54 <conv_flt+0x274>
     f4a:	f1 01       	movw	r30, r2
     f4c:	80 83       	st	Z, r24
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	a2 83       	std	Z+2, r26	; 0x02
     f52:	b3 83       	std	Z+3, r27	; 0x03
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <conv_flt+0x27a>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	bf 90       	pop	r11
     f6c:	af 90       	pop	r10
     f6e:	9f 90       	pop	r9
     f70:	8f 90       	pop	r8
     f72:	7f 90       	pop	r7
     f74:	6f 90       	pop	r6
     f76:	5f 90       	pop	r5
     f78:	3f 90       	pop	r3
     f7a:	2f 90       	pop	r2
     f7c:	08 95       	ret

00000f7e <vfscanf>:
     f7e:	5f 92       	push	r5
     f80:	6f 92       	push	r6
     f82:	7f 92       	push	r7
     f84:	8f 92       	push	r8
     f86:	9f 92       	push	r9
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	4c 01       	movw	r8, r24
     f9e:	5b 01       	movw	r10, r22
     fa0:	3a 01       	movw	r6, r20
     fa2:	fc 01       	movw	r30, r24
     fa4:	17 82       	std	Z+7, r1	; 0x07
     fa6:	16 82       	std	Z+6, r1	; 0x06
     fa8:	55 24       	eor	r5, r5
     faa:	fc c0       	rjmp	.+504    	; 0x11a4 <__stack+0xa5>
     fac:	81 2f       	mov	r24, r17
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 9a 10 	call	0x2134	; 0x2134 <isspace>
     fb4:	89 2b       	or	r24, r25
     fb6:	19 f0       	breq	.+6      	; 0xfbe <vfscanf+0x40>
     fb8:	c4 01       	movw	r24, r8
     fba:	1a dd       	rcall	.-1484   	; 0x9f0 <skip_spaces>
     fbc:	f3 c0       	rjmp	.+486    	; 0x11a4 <__stack+0xa5>
     fbe:	15 32       	cpi	r17, 0x25	; 37
     fc0:	49 f4       	brne	.+18     	; 0xfd4 <vfscanf+0x56>
     fc2:	f5 01       	movw	r30, r10
     fc4:	f3 fc       	sbrc	r15, 3
     fc6:	65 91       	lpm	r22, Z+
     fc8:	f3 fe       	sbrs	r15, 3
     fca:	61 91       	ld	r22, Z+
     fcc:	5f 01       	movw	r10, r30
     fce:	65 32       	cpi	r22, 0x25	; 37
     fd0:	69 f4       	brne	.+26     	; 0xfec <vfscanf+0x6e>
     fd2:	15 e2       	ldi	r17, 0x25	; 37
     fd4:	c4 01       	movw	r24, r8
     fd6:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
     fda:	97 fd       	sbrc	r25, 7
     fdc:	ef c0       	rjmp	.+478    	; 0x11bc <__stack+0xbd>
     fde:	18 17       	cp	r17, r24
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <vfscanf+0x66>
     fe2:	e0 c0       	rjmp	.+448    	; 0x11a4 <__stack+0xa5>
     fe4:	b4 01       	movw	r22, r8
     fe6:	0e 94 77 11 	call	0x22ee	; 0x22ee <ungetc>
     fea:	ed c0       	rjmp	.+474    	; 0x11c6 <__stack+0xc7>
     fec:	6a 32       	cpi	r22, 0x2A	; 42
     fee:	19 f0       	breq	.+6      	; 0xff6 <vfscanf+0x78>
     ff0:	16 2f       	mov	r17, r22
     ff2:	00 e0       	ldi	r16, 0x00	; 0
     ff4:	06 c0       	rjmp	.+12     	; 0x1002 <vfscanf+0x84>
     ff6:	f3 fc       	sbrc	r15, 3
     ff8:	15 91       	lpm	r17, Z+
     ffa:	f3 fe       	sbrs	r15, 3
     ffc:	11 91       	ld	r17, Z+
     ffe:	5f 01       	movw	r10, r30
    1000:	01 e0       	ldi	r16, 0x01	; 1
    1002:	cc 24       	eor	r12, r12
    1004:	dd 24       	eor	r13, r13
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <vfscanf+0xa4>
    1008:	02 60       	ori	r16, 0x02	; 2
    100a:	b6 01       	movw	r22, r12
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	c0 dc       	rcall	.-1664   	; 0x994 <mulacc>
    1014:	6b 01       	movw	r12, r22
    1016:	f5 01       	movw	r30, r10
    1018:	f3 fc       	sbrc	r15, 3
    101a:	15 91       	lpm	r17, Z+
    101c:	f3 fe       	sbrs	r15, 3
    101e:	11 91       	ld	r17, Z+
    1020:	5f 01       	movw	r10, r30
    1022:	21 2f       	mov	r18, r17
    1024:	20 53       	subi	r18, 0x30	; 48
    1026:	2a 30       	cpi	r18, 0x0A	; 10
    1028:	78 f3       	brcs	.-34     	; 0x1008 <vfscanf+0x8a>
    102a:	01 fd       	sbrc	r16, 1
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <vfscanf+0xb8>
    102e:	cc 24       	eor	r12, r12
    1030:	ca 94       	dec	r12
    1032:	dc 2c       	mov	r13, r12
    1034:	04 c0       	rjmp	.+8      	; 0x103e <vfscanf+0xc0>
    1036:	c1 14       	cp	r12, r1
    1038:	d1 04       	cpc	r13, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <vfscanf+0xc0>
    103c:	c4 c0       	rjmp	.+392    	; 0x11c6 <__stack+0xc7>
    103e:	18 36       	cpi	r17, 0x68	; 104
    1040:	21 f0       	breq	.+8      	; 0x104a <vfscanf+0xcc>
    1042:	1c 36       	cpi	r17, 0x6C	; 108
    1044:	99 f4       	brne	.+38     	; 0x106c <vfscanf+0xee>
    1046:	f5 01       	movw	r30, r10
    1048:	0b c0       	rjmp	.+22     	; 0x1060 <vfscanf+0xe2>
    104a:	f5 01       	movw	r30, r10
    104c:	f3 fc       	sbrc	r15, 3
    104e:	65 91       	lpm	r22, Z+
    1050:	f3 fe       	sbrs	r15, 3
    1052:	61 91       	ld	r22, Z+
    1054:	68 36       	cpi	r22, 0x68	; 104
    1056:	19 f0       	breq	.+6      	; 0x105e <vfscanf+0xe0>
    1058:	5f 01       	movw	r10, r30
    105a:	16 2f       	mov	r17, r22
    105c:	07 c0       	rjmp	.+14     	; 0x106c <vfscanf+0xee>
    105e:	08 60       	ori	r16, 0x08	; 8
    1060:	04 60       	ori	r16, 0x04	; 4
    1062:	f3 fc       	sbrc	r15, 3
    1064:	15 91       	lpm	r17, Z+
    1066:	f3 fe       	sbrs	r15, 3
    1068:	11 91       	ld	r17, Z+
    106a:	5f 01       	movw	r10, r30
    106c:	11 23       	and	r17, r17
    106e:	09 f4       	brne	.+2      	; 0x1072 <vfscanf+0xf4>
    1070:	aa c0       	rjmp	.+340    	; 0x11c6 <__stack+0xc7>
    1072:	84 e9       	ldi	r24, 0x94	; 148
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	61 2f       	mov	r22, r17
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	0e 94 aa 10 	call	0x2154	; 0x2154 <strchr_P>
    107e:	89 2b       	or	r24, r25
    1080:	09 f4       	brne	.+2      	; 0x1084 <vfscanf+0x106>
    1082:	a1 c0       	rjmp	.+322    	; 0x11c6 <__stack+0xc7>
    1084:	80 2f       	mov	r24, r16
    1086:	00 ff       	sbrs	r16, 0
    1088:	03 c0       	rjmp	.+6      	; 0x1090 <vfscanf+0x112>
    108a:	ee 24       	eor	r14, r14
    108c:	ff 24       	eor	r15, r15
    108e:	07 c0       	rjmp	.+14     	; 0x109e <vfscanf+0x120>
    1090:	f3 01       	movw	r30, r6
    1092:	e0 80       	ld	r14, Z
    1094:	f1 80       	ldd	r15, Z+1	; 0x01
    1096:	22 e0       	ldi	r18, 0x02	; 2
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	62 0e       	add	r6, r18
    109c:	73 1e       	adc	r7, r19
    109e:	1e 36       	cpi	r17, 0x6E	; 110
    10a0:	49 f4       	brne	.+18     	; 0x10b4 <vfscanf+0x136>
    10a2:	f4 01       	movw	r30, r8
    10a4:	46 81       	ldd	r20, Z+6	; 0x06
    10a6:	57 81       	ldd	r21, Z+7	; 0x07
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	c7 01       	movw	r24, r14
    10ae:	20 2f       	mov	r18, r16
    10b0:	65 dc       	rcall	.-1846   	; 0x97c <putval>
    10b2:	78 c0       	rjmp	.+240    	; 0x11a4 <__stack+0xa5>
    10b4:	13 36       	cpi	r17, 0x63	; 99
    10b6:	b9 f4       	brne	.+46     	; 0x10e6 <vfscanf+0x168>
    10b8:	81 fd       	sbrc	r24, 1
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <vfscanf+0x144>
    10bc:	11 e0       	ldi	r17, 0x01	; 1
    10be:	c1 2e       	mov	r12, r17
    10c0:	d1 2c       	mov	r13, r1
    10c2:	c4 01       	movw	r24, r8
    10c4:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
    10c8:	97 fd       	sbrc	r25, 7
    10ca:	78 c0       	rjmp	.+240    	; 0x11bc <__stack+0xbd>
    10cc:	e1 14       	cp	r14, r1
    10ce:	f1 04       	cpc	r15, r1
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <vfscanf+0x15a>
    10d2:	f7 01       	movw	r30, r14
    10d4:	81 93       	st	Z+, r24
    10d6:	7f 01       	movw	r14, r30
    10d8:	08 94       	sec
    10da:	c1 08       	sbc	r12, r1
    10dc:	d1 08       	sbc	r13, r1
    10de:	c1 14       	cp	r12, r1
    10e0:	d1 04       	cpc	r13, r1
    10e2:	79 f7       	brne	.-34     	; 0x10c2 <vfscanf+0x144>
    10e4:	5d c0       	rjmp	.+186    	; 0x11a0 <__stack+0xa1>
    10e6:	1b 35       	cpi	r17, 0x5B	; 91
    10e8:	51 f4       	brne	.+20     	; 0x10fe <vfscanf+0x180>
    10ea:	c4 01       	movw	r24, r8
    10ec:	b6 01       	movw	r22, r12
    10ee:	a7 01       	movw	r20, r14
    10f0:	95 01       	movw	r18, r10
    10f2:	29 dd       	rcall	.-1454   	; 0xb46 <conv_brk>
    10f4:	5c 01       	movw	r10, r24
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	09 f0       	breq	.+2      	; 0x10fc <vfscanf+0x17e>
    10fa:	52 c0       	rjmp	.+164    	; 0x11a0 <__stack+0xa1>
    10fc:	4c c0       	rjmp	.+152    	; 0x1196 <__stack+0x97>
    10fe:	c4 01       	movw	r24, r8
    1100:	77 dc       	rcall	.-1810   	; 0x9f0 <skip_spaces>
    1102:	97 fd       	sbrc	r25, 7
    1104:	5b c0       	rjmp	.+182    	; 0x11bc <__stack+0xbd>
    1106:	1f 36       	cpi	r17, 0x6F	; 111
    1108:	c9 f1       	breq	.+114    	; 0x117c <__stack+0x7d>
    110a:	10 37       	cpi	r17, 0x70	; 112
    110c:	38 f4       	brcc	.+14     	; 0x111c <__stack+0x1d>
    110e:	14 36       	cpi	r17, 0x64	; 100
    1110:	99 f1       	breq	.+102    	; 0x1178 <__stack+0x79>
    1112:	19 36       	cpi	r17, 0x69	; 105
    1114:	a1 f1       	breq	.+104    	; 0x117e <__stack+0x7f>
    1116:	18 35       	cpi	r17, 0x58	; 88
    1118:	c1 f5       	brne	.+112    	; 0x118a <__stack+0x8b>
    111a:	2c c0       	rjmp	.+88     	; 0x1174 <__stack+0x75>
    111c:	13 37       	cpi	r17, 0x73	; 115
    111e:	51 f0       	breq	.+20     	; 0x1134 <__stack+0x35>
    1120:	14 37       	cpi	r17, 0x74	; 116
    1122:	18 f4       	brcc	.+6      	; 0x112a <__stack+0x2b>
    1124:	10 37       	cpi	r17, 0x70	; 112
    1126:	89 f5       	brne	.+98     	; 0x118a <__stack+0x8b>
    1128:	25 c0       	rjmp	.+74     	; 0x1174 <__stack+0x75>
    112a:	15 37       	cpi	r17, 0x75	; 117
    112c:	29 f1       	breq	.+74     	; 0x1178 <__stack+0x79>
    112e:	18 37       	cpi	r17, 0x78	; 120
    1130:	61 f5       	brne	.+88     	; 0x118a <__stack+0x8b>
    1132:	20 c0       	rjmp	.+64     	; 0x1174 <__stack+0x75>
    1134:	c4 01       	movw	r24, r8
    1136:	0e 94 cb 10 	call	0x2196	; 0x2196 <fgetc>
    113a:	ec 01       	movw	r28, r24
    113c:	97 fd       	sbrc	r25, 7
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <__stack+0x69>
    1140:	f9 d7       	rcall	.+4082   	; 0x2134 <isspace>
    1142:	89 2b       	or	r24, r25
    1144:	29 f0       	breq	.+10     	; 0x1150 <__stack+0x51>
    1146:	ce 01       	movw	r24, r28
    1148:	b4 01       	movw	r22, r8
    114a:	0e 94 77 11 	call	0x22ee	; 0x22ee <ungetc>
    114e:	0c c0       	rjmp	.+24     	; 0x1168 <__stack+0x69>
    1150:	e1 14       	cp	r14, r1
    1152:	f1 04       	cpc	r15, r1
    1154:	19 f0       	breq	.+6      	; 0x115c <__stack+0x5d>
    1156:	f7 01       	movw	r30, r14
    1158:	c1 93       	st	Z+, r28
    115a:	7f 01       	movw	r14, r30
    115c:	08 94       	sec
    115e:	c1 08       	sbc	r12, r1
    1160:	d1 08       	sbc	r13, r1
    1162:	c1 14       	cp	r12, r1
    1164:	d1 04       	cpc	r13, r1
    1166:	31 f7       	brne	.-52     	; 0x1134 <__stack+0x35>
    1168:	e1 14       	cp	r14, r1
    116a:	f1 04       	cpc	r15, r1
    116c:	c9 f0       	breq	.+50     	; 0x11a0 <__stack+0xa1>
    116e:	f7 01       	movw	r30, r14
    1170:	10 82       	st	Z, r1
    1172:	16 c0       	rjmp	.+44     	; 0x11a0 <__stack+0xa1>
    1174:	00 64       	ori	r16, 0x40	; 64
    1176:	03 c0       	rjmp	.+6      	; 0x117e <__stack+0x7f>
    1178:	00 62       	ori	r16, 0x20	; 32
    117a:	01 c0       	rjmp	.+2      	; 0x117e <__stack+0x7f>
    117c:	00 61       	ori	r16, 0x10	; 16
    117e:	c4 01       	movw	r24, r8
    1180:	b6 01       	movw	r22, r12
    1182:	a7 01       	movw	r20, r14
    1184:	20 2f       	mov	r18, r16
    1186:	4d dc       	rcall	.-1894   	; 0xa22 <conv_int>
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <__stack+0x93>
    118a:	c4 01       	movw	r24, r8
    118c:	b6 01       	movw	r22, r12
    118e:	a7 01       	movw	r20, r14
    1190:	a7 dd       	rcall	.-1202   	; 0xce0 <conv_flt>
    1192:	88 23       	and	r24, r24
    1194:	29 f4       	brne	.+10     	; 0x11a0 <__stack+0xa1>
    1196:	f4 01       	movw	r30, r8
    1198:	83 81       	ldd	r24, Z+3	; 0x03
    119a:	80 73       	andi	r24, 0x30	; 48
    119c:	79 f4       	brne	.+30     	; 0x11bc <__stack+0xbd>
    119e:	13 c0       	rjmp	.+38     	; 0x11c6 <__stack+0xc7>
    11a0:	00 ff       	sbrs	r16, 0
    11a2:	53 94       	inc	r5
    11a4:	f4 01       	movw	r30, r8
    11a6:	f3 80       	ldd	r15, Z+3	; 0x03
    11a8:	f5 01       	movw	r30, r10
    11aa:	f3 fc       	sbrc	r15, 3
    11ac:	15 91       	lpm	r17, Z+
    11ae:	f3 fe       	sbrs	r15, 3
    11b0:	11 91       	ld	r17, Z+
    11b2:	5f 01       	movw	r10, r30
    11b4:	11 23       	and	r17, r17
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__stack+0xbb>
    11b8:	f9 ce       	rjmp	.-526    	; 0xfac <vfscanf+0x2e>
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <__stack+0xc7>
    11bc:	55 20       	and	r5, r5
    11be:	19 f4       	brne	.+6      	; 0x11c6 <__stack+0xc7>
    11c0:	2f ef       	ldi	r18, 0xFF	; 255
    11c2:	3f ef       	ldi	r19, 0xFF	; 255
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <__stack+0xcb>
    11c6:	25 2d       	mov	r18, r5
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	c9 01       	movw	r24, r18
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	bf 90       	pop	r11
    11de:	af 90       	pop	r10
    11e0:	9f 90       	pop	r9
    11e2:	8f 90       	pop	r8
    11e4:	7f 90       	pop	r7
    11e6:	6f 90       	pop	r6
    11e8:	5f 90       	pop	r5
    11ea:	08 95       	ret

000011ec <__floatunsisf>:
    11ec:	e8 94       	clt
    11ee:	09 c0       	rjmp	.+18     	; 0x1202 <__floatsisf+0x12>

000011f0 <__floatsisf>:
    11f0:	97 fb       	bst	r25, 7
    11f2:	3e f4       	brtc	.+14     	; 0x1202 <__floatsisf+0x12>
    11f4:	90 95       	com	r25
    11f6:	80 95       	com	r24
    11f8:	70 95       	com	r23
    11fa:	61 95       	neg	r22
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1200:	9f 4f       	sbci	r25, 0xFF	; 255
    1202:	99 23       	and	r25, r25
    1204:	a9 f0       	breq	.+42     	; 0x1230 <__floatsisf+0x40>
    1206:	f9 2f       	mov	r31, r25
    1208:	96 e9       	ldi	r25, 0x96	; 150
    120a:	bb 27       	eor	r27, r27
    120c:	93 95       	inc	r25
    120e:	f6 95       	lsr	r31
    1210:	87 95       	ror	r24
    1212:	77 95       	ror	r23
    1214:	67 95       	ror	r22
    1216:	b7 95       	ror	r27
    1218:	f1 11       	cpse	r31, r1
    121a:	f8 cf       	rjmp	.-16     	; 0x120c <__floatsisf+0x1c>
    121c:	fa f4       	brpl	.+62     	; 0x125c <__floatsisf+0x6c>
    121e:	bb 0f       	add	r27, r27
    1220:	11 f4       	brne	.+4      	; 0x1226 <__floatsisf+0x36>
    1222:	60 ff       	sbrs	r22, 0
    1224:	1b c0       	rjmp	.+54     	; 0x125c <__floatsisf+0x6c>
    1226:	6f 5f       	subi	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	16 c0       	rjmp	.+44     	; 0x125c <__floatsisf+0x6c>
    1230:	88 23       	and	r24, r24
    1232:	11 f0       	breq	.+4      	; 0x1238 <__floatsisf+0x48>
    1234:	96 e9       	ldi	r25, 0x96	; 150
    1236:	11 c0       	rjmp	.+34     	; 0x125a <__floatsisf+0x6a>
    1238:	77 23       	and	r23, r23
    123a:	21 f0       	breq	.+8      	; 0x1244 <__floatsisf+0x54>
    123c:	9e e8       	ldi	r25, 0x8E	; 142
    123e:	87 2f       	mov	r24, r23
    1240:	76 2f       	mov	r23, r22
    1242:	05 c0       	rjmp	.+10     	; 0x124e <__floatsisf+0x5e>
    1244:	66 23       	and	r22, r22
    1246:	71 f0       	breq	.+28     	; 0x1264 <__floatsisf+0x74>
    1248:	96 e8       	ldi	r25, 0x86	; 134
    124a:	86 2f       	mov	r24, r22
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	2a f0       	brmi	.+10     	; 0x125c <__floatsisf+0x6c>
    1252:	9a 95       	dec	r25
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	da f7       	brpl	.-10     	; 0x1252 <__floatsisf+0x62>
    125c:	88 0f       	add	r24, r24
    125e:	96 95       	lsr	r25
    1260:	87 95       	ror	r24
    1262:	97 f9       	bld	r25, 7
    1264:	08 95       	ret

00001266 <__mulsf3>:
    1266:	0b d0       	rcall	.+22     	; 0x127e <__mulsf3x>
    1268:	78 c0       	rjmp	.+240    	; 0x135a <__fp_round>
    126a:	69 d0       	rcall	.+210    	; 0x133e <__fp_pscA>
    126c:	28 f0       	brcs	.+10     	; 0x1278 <__mulsf3+0x12>
    126e:	6e d0       	rcall	.+220    	; 0x134c <__fp_pscB>
    1270:	18 f0       	brcs	.+6      	; 0x1278 <__mulsf3+0x12>
    1272:	95 23       	and	r25, r21
    1274:	09 f0       	breq	.+2      	; 0x1278 <__mulsf3+0x12>
    1276:	5a c0       	rjmp	.+180    	; 0x132c <__fp_inf>
    1278:	5f c0       	rjmp	.+190    	; 0x1338 <__fp_nan>
    127a:	11 24       	eor	r1, r1
    127c:	a2 c0       	rjmp	.+324    	; 0x13c2 <__fp_szero>

0000127e <__mulsf3x>:
    127e:	7e d0       	rcall	.+252    	; 0x137c <__fp_split3>
    1280:	a0 f3       	brcs	.-24     	; 0x126a <__mulsf3+0x4>

00001282 <__mulsf3_pse>:
    1282:	95 9f       	mul	r25, r21
    1284:	d1 f3       	breq	.-12     	; 0x127a <__mulsf3+0x14>
    1286:	95 0f       	add	r25, r21
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	55 1f       	adc	r21, r21
    128c:	62 9f       	mul	r22, r18
    128e:	f0 01       	movw	r30, r0
    1290:	72 9f       	mul	r23, r18
    1292:	bb 27       	eor	r27, r27
    1294:	f0 0d       	add	r31, r0
    1296:	b1 1d       	adc	r27, r1
    1298:	63 9f       	mul	r22, r19
    129a:	aa 27       	eor	r26, r26
    129c:	f0 0d       	add	r31, r0
    129e:	b1 1d       	adc	r27, r1
    12a0:	aa 1f       	adc	r26, r26
    12a2:	64 9f       	mul	r22, r20
    12a4:	66 27       	eor	r22, r22
    12a6:	b0 0d       	add	r27, r0
    12a8:	a1 1d       	adc	r26, r1
    12aa:	66 1f       	adc	r22, r22
    12ac:	82 9f       	mul	r24, r18
    12ae:	22 27       	eor	r18, r18
    12b0:	b0 0d       	add	r27, r0
    12b2:	a1 1d       	adc	r26, r1
    12b4:	62 1f       	adc	r22, r18
    12b6:	73 9f       	mul	r23, r19
    12b8:	b0 0d       	add	r27, r0
    12ba:	a1 1d       	adc	r26, r1
    12bc:	62 1f       	adc	r22, r18
    12be:	83 9f       	mul	r24, r19
    12c0:	a0 0d       	add	r26, r0
    12c2:	61 1d       	adc	r22, r1
    12c4:	22 1f       	adc	r18, r18
    12c6:	74 9f       	mul	r23, r20
    12c8:	33 27       	eor	r19, r19
    12ca:	a0 0d       	add	r26, r0
    12cc:	61 1d       	adc	r22, r1
    12ce:	23 1f       	adc	r18, r19
    12d0:	84 9f       	mul	r24, r20
    12d2:	60 0d       	add	r22, r0
    12d4:	21 1d       	adc	r18, r1
    12d6:	82 2f       	mov	r24, r18
    12d8:	76 2f       	mov	r23, r22
    12da:	6a 2f       	mov	r22, r26
    12dc:	11 24       	eor	r1, r1
    12de:	9f 57       	subi	r25, 0x7F	; 127
    12e0:	50 40       	sbci	r21, 0x00	; 0
    12e2:	8a f0       	brmi	.+34     	; 0x1306 <__mulsf3_pse+0x84>
    12e4:	e1 f0       	breq	.+56     	; 0x131e <__mulsf3_pse+0x9c>
    12e6:	88 23       	and	r24, r24
    12e8:	4a f0       	brmi	.+18     	; 0x12fc <__mulsf3_pse+0x7a>
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	bb 1f       	adc	r27, r27
    12f0:	66 1f       	adc	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	91 50       	subi	r25, 0x01	; 1
    12f8:	50 40       	sbci	r21, 0x00	; 0
    12fa:	a9 f7       	brne	.-22     	; 0x12e6 <__mulsf3_pse+0x64>
    12fc:	9e 3f       	cpi	r25, 0xFE	; 254
    12fe:	51 05       	cpc	r21, r1
    1300:	70 f0       	brcs	.+28     	; 0x131e <__mulsf3_pse+0x9c>
    1302:	14 c0       	rjmp	.+40     	; 0x132c <__fp_inf>
    1304:	5e c0       	rjmp	.+188    	; 0x13c2 <__fp_szero>
    1306:	5f 3f       	cpi	r21, 0xFF	; 255
    1308:	ec f3       	brlt	.-6      	; 0x1304 <__mulsf3_pse+0x82>
    130a:	98 3e       	cpi	r25, 0xE8	; 232
    130c:	dc f3       	brlt	.-10     	; 0x1304 <__mulsf3_pse+0x82>
    130e:	86 95       	lsr	r24
    1310:	77 95       	ror	r23
    1312:	67 95       	ror	r22
    1314:	b7 95       	ror	r27
    1316:	f7 95       	ror	r31
    1318:	e7 95       	ror	r30
    131a:	9f 5f       	subi	r25, 0xFF	; 255
    131c:	c1 f7       	brne	.-16     	; 0x130e <__mulsf3_pse+0x8c>
    131e:	fe 2b       	or	r31, r30
    1320:	88 0f       	add	r24, r24
    1322:	91 1d       	adc	r25, r1
    1324:	96 95       	lsr	r25
    1326:	87 95       	ror	r24
    1328:	97 f9       	bld	r25, 7
    132a:	08 95       	ret

0000132c <__fp_inf>:
    132c:	97 f9       	bld	r25, 7
    132e:	9f 67       	ori	r25, 0x7F	; 127
    1330:	80 e8       	ldi	r24, 0x80	; 128
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	08 95       	ret

00001338 <__fp_nan>:
    1338:	9f ef       	ldi	r25, 0xFF	; 255
    133a:	80 ec       	ldi	r24, 0xC0	; 192
    133c:	08 95       	ret

0000133e <__fp_pscA>:
    133e:	00 24       	eor	r0, r0
    1340:	0a 94       	dec	r0
    1342:	16 16       	cp	r1, r22
    1344:	17 06       	cpc	r1, r23
    1346:	18 06       	cpc	r1, r24
    1348:	09 06       	cpc	r0, r25
    134a:	08 95       	ret

0000134c <__fp_pscB>:
    134c:	00 24       	eor	r0, r0
    134e:	0a 94       	dec	r0
    1350:	12 16       	cp	r1, r18
    1352:	13 06       	cpc	r1, r19
    1354:	14 06       	cpc	r1, r20
    1356:	05 06       	cpc	r0, r21
    1358:	08 95       	ret

0000135a <__fp_round>:
    135a:	09 2e       	mov	r0, r25
    135c:	03 94       	inc	r0
    135e:	00 0c       	add	r0, r0
    1360:	11 f4       	brne	.+4      	; 0x1366 <__fp_round+0xc>
    1362:	88 23       	and	r24, r24
    1364:	52 f0       	brmi	.+20     	; 0x137a <__fp_round+0x20>
    1366:	bb 0f       	add	r27, r27
    1368:	40 f4       	brcc	.+16     	; 0x137a <__fp_round+0x20>
    136a:	bf 2b       	or	r27, r31
    136c:	11 f4       	brne	.+4      	; 0x1372 <__fp_round+0x18>
    136e:	60 ff       	sbrs	r22, 0
    1370:	04 c0       	rjmp	.+8      	; 0x137a <__fp_round+0x20>
    1372:	6f 5f       	subi	r22, 0xFF	; 255
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	8f 4f       	sbci	r24, 0xFF	; 255
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	08 95       	ret

0000137c <__fp_split3>:
    137c:	57 fd       	sbrc	r21, 7
    137e:	90 58       	subi	r25, 0x80	; 128
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	59 f0       	breq	.+22     	; 0x139c <__fp_splitA+0x10>
    1386:	5f 3f       	cpi	r21, 0xFF	; 255
    1388:	71 f0       	breq	.+28     	; 0x13a6 <__fp_splitA+0x1a>
    138a:	47 95       	ror	r20

0000138c <__fp_splitA>:
    138c:	88 0f       	add	r24, r24
    138e:	97 fb       	bst	r25, 7
    1390:	99 1f       	adc	r25, r25
    1392:	61 f0       	breq	.+24     	; 0x13ac <__fp_splitA+0x20>
    1394:	9f 3f       	cpi	r25, 0xFF	; 255
    1396:	79 f0       	breq	.+30     	; 0x13b6 <__fp_splitA+0x2a>
    1398:	87 95       	ror	r24
    139a:	08 95       	ret
    139c:	12 16       	cp	r1, r18
    139e:	13 06       	cpc	r1, r19
    13a0:	14 06       	cpc	r1, r20
    13a2:	55 1f       	adc	r21, r21
    13a4:	f2 cf       	rjmp	.-28     	; 0x138a <__fp_split3+0xe>
    13a6:	46 95       	lsr	r20
    13a8:	f1 df       	rcall	.-30     	; 0x138c <__fp_splitA>
    13aa:	08 c0       	rjmp	.+16     	; 0x13bc <__fp_splitA+0x30>
    13ac:	16 16       	cp	r1, r22
    13ae:	17 06       	cpc	r1, r23
    13b0:	18 06       	cpc	r1, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	f1 cf       	rjmp	.-30     	; 0x1398 <__fp_splitA+0xc>
    13b6:	86 95       	lsr	r24
    13b8:	71 05       	cpc	r23, r1
    13ba:	61 05       	cpc	r22, r1
    13bc:	08 94       	sec
    13be:	08 95       	ret

000013c0 <__fp_zero>:
    13c0:	e8 94       	clt

000013c2 <__fp_szero>:
    13c2:	bb 27       	eor	r27, r27
    13c4:	66 27       	eor	r22, r22
    13c6:	77 27       	eor	r23, r23
    13c8:	cb 01       	movw	r24, r22
    13ca:	97 f9       	bld	r25, 7
    13cc:	08 95       	ret

000013ce <adxl345_spi_init>:
#include "spi_adxl345.h" 
#include "delay.h"
void adxl345_spi_init(void)
{

	uc_sw_cs_LO;
    13ce:	dd 98       	cbi	0x1b, 5	; 27
	uc_sw_cs_OUT;
    13d0:	d5 9a       	sbi	0x1a, 5	; 26
 
	uc_sw_SCLK_HI;
    13d2:	de 9a       	sbi	0x1b, 6	; 27
	uc_sw_SCLK_OUT;
    13d4:	d6 9a       	sbi	0x1a, 6	; 26
	
    uc_sw_SDI_LO;
    13d6:	df 98       	cbi	0x1b, 7	; 27
    uc_sw_SDI_OUT;
    13d8:	d7 9a       	sbi	0x1a, 7	; 26
 
    uc_sw_SDO_LO; 
    13da:	e5 e6       	ldi	r30, 0x65	; 101
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8b 7f       	andi	r24, 0xFB	; 251
    13e2:	80 83       	st	Z, r24
    uc_sw_SDO_IN;
    13e4:	e4 e6       	ldi	r30, 0x64	; 100
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	8b 7f       	andi	r24, 0xFB	; 251
    13ec:	80 83       	st	Z, r24
}
    13ee:	08 95       	ret

000013f0 <getDOUT.1527>:

char getDOUT(void)
{
	if (PING & (1<<2)) return 1; 	// read PA7
    13f0:	80 91 63 00 	lds	r24, 0x0063
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	96 95       	lsr	r25
    13f8:	87 95       	ror	r24
    13fa:	96 95       	lsr	r25
    13fc:	87 95       	ror	r24
	else return 0; 
}
    13fe:	81 70       	andi	r24, 0x01	; 1
    1400:	08 95       	ret

00001402 <adxl345_spi_write.1523>:
	
	temp_set = 1;		// 10
	temp_clr = 1;		// 10
	// want to change this variable, please use oscilloscope
	
	uc_sw_SCLK_HI;
    1402:	de 9a       	sbi	0x1b, 6	; 27
	uc_sw_cs_LO;		// enable /CS_ADC
    1404:	dd 98       	cbi	0x1b, 5	; 27
    1406:	27 e0       	ldi	r18, 0x07	; 7
    1408:	30 e0       	ldi	r19, 0x00	; 0
	
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
		data_in = address >> (i-1);
		if(data_in & 0x01) uc_sw_SDI_HI;
    140a:	48 2f       	mov	r20, r24
    140c:	50 e0       	ldi	r21, 0x00	; 0
			
	// Send command
	
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
    140e:	de 98       	cbi	0x1b, 6	; 27
		data_in = address >> (i-1);
		if(data_in & 0x01) uc_sw_SDI_HI;
    1410:	ca 01       	movw	r24, r20
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <adxl345_spi_write.1523+0x18>
    1416:	95 95       	asr	r25
    1418:	87 95       	ror	r24
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <adxl345_spi_write.1523+0x14>
    141e:	80 ff       	sbrs	r24, 0
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <adxl345_spi_write.1523+0x24>
    1422:	df 9a       	sbi	0x1b, 7	; 27
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <adxl345_spi_write.1523+0x26>
		else uc_sw_SDI_LO;
    1426:	df 98       	cbi	0x1b, 7	; 27
		//for(j=0;j<temp_clr;j++) delay_us(1);
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
    1428:	de 9a       	sbi	0x1b, 6	; 27
    142a:	21 50       	subi	r18, 0x01	; 1
    142c:	30 40       	sbci	r19, 0x00	; 0
	
	//for(j=0;j<temp_clr;j++) delay_us(1);		//=12us
			
	// Send command
	
	for (i=8;i>0;i--)
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	2f 3f       	cpi	r18, 0xFF	; 255
    1432:	38 07       	cpc	r19, r24
    1434:	61 f7       	brne	.-40     	; 0x140e <adxl345_spi_write.1523+0xc>
    1436:	27 e0       	ldi	r18, 0x07	; 7
    1438:	30 e0       	ldi	r19, 0x00	; 0
	// send data
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
		data_in = data >> (i-1);
		if(data_in & 0x01) uc_sw_SDI_HI;
    143a:	70 e0       	ldi	r23, 0x00	; 0
	
	
	// send data
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
    143c:	de 98       	cbi	0x1b, 6	; 27
		data_in = data >> (i-1);
		if(data_in & 0x01) uc_sw_SDI_HI;
    143e:	cb 01       	movw	r24, r22
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <adxl345_spi_write.1523+0x46>
    1444:	95 95       	asr	r25
    1446:	87 95       	ror	r24
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <adxl345_spi_write.1523+0x42>
    144c:	80 ff       	sbrs	r24, 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <adxl345_spi_write.1523+0x52>
    1450:	df 9a       	sbi	0x1b, 7	; 27
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <adxl345_spi_write.1523+0x54>
		else uc_sw_SDI_LO;
    1454:	df 98       	cbi	0x1b, 7	; 27
		//for(j=0;j<temp_clr;j++) delay_us(1);
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
    1456:	de 9a       	sbi	0x1b, 6	; 27
    1458:	21 50       	subi	r18, 0x01	; 1
    145a:	30 40       	sbci	r19, 0x00	; 0
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
	}
	
	
	// send data
	for (i=8;i>0;i--)
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	2f 3f       	cpi	r18, 0xFF	; 255
    1460:	38 07       	cpc	r19, r24
    1462:	61 f7       	brne	.-40     	; 0x143c <adxl345_spi_write.1523+0x3a>
	}
	
	
	// end of transmission
	
	uc_sw_cs_HI;		// disable /CS_ADC
    1464:	dd 9a       	sbi	0x1b, 5	; 27
}
    1466:	08 95       	ret

00001468 <adxl345_spi_read.1525>:
	
uint8_t adxl345_spi_read(uint8_t data)
{
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
	temp_set = 1;		// 10
	temp_clr = 1;		// 10

	// want to change this variable, please use oscilloscope
	
	uc_sw_SCLK_HI;
    146c:	de 9a       	sbi	0x1b, 6	; 27
	uc_sw_cs_LO;		// enable /uc_sw_cs
    146e:	dd 98       	cbi	0x1b, 5	; 27
    1470:	27 e0       	ldi	r18, 0x07	; 7
    1472:	30 e0       	ldi	r19, 0x00	; 0
	
	// Send command
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
		data_in = data >> (i-1);
    1474:	48 2f       	mov	r20, r24
    1476:	50 e0       	ldi	r21, 0x00	; 0
//	for(j=0;j<temp_clr;j++) ;
	
	// Send command
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
    1478:	de 98       	cbi	0x1b, 6	; 27
		data_in = data >> (i-1);
		if(i == 8) data_in = 0x01; // read byte
    147a:	27 30       	cpi	r18, 0x07	; 7
    147c:	11 f4       	brne	.+4      	; 0x1482 <adxl345_spi_read.1525+0x1a>
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <adxl345_spi_read.1525+0x28>
	
	// Send command
	for (i=8;i>0;i--)
	{
		uc_sw_SCLK_LO; 
		data_in = data >> (i-1);
    1482:	ca 01       	movw	r24, r20
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <adxl345_spi_read.1525+0x24>
    1488:	95 95       	asr	r25
    148a:	87 95       	ror	r24
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <adxl345_spi_read.1525+0x20>
		if(i == 8) data_in = 0x01; // read byte
		if(data_in & 0x01) uc_sw_SDI_HI;
    1490:	80 ff       	sbrs	r24, 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <adxl345_spi_read.1525+0x30>
    1494:	df 9a       	sbi	0x1b, 7	; 27
    1496:	01 c0       	rjmp	.+2      	; 0x149a <adxl345_spi_read.1525+0x32>
		else uc_sw_SDI_LO;
    1498:	df 98       	cbi	0x1b, 7	; 27
		//for(j=0;j<temp_clr;j++) delay_us(1);
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
    149a:	de 9a       	sbi	0x1b, 6	; 27
    149c:	21 50       	subi	r18, 0x01	; 1
    149e:	30 40       	sbci	r19, 0x00	; 0
	uc_sw_cs_LO;		// enable /uc_sw_cs
	
//	for(j=0;j<temp_clr;j++) ;
	
	// Send command
	for (i=8;i>0;i--)
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	2f 3f       	cpi	r18, 0xFF	; 255
    14a4:	38 07       	cpc	r19, r24
    14a6:	41 f7       	brne	.-48     	; 0x1478 <adxl345_spi_read.1525+0x10>
    14a8:	00 e0       	ldi	r16, 0x00	; 0
    14aa:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Read data
	for (i=0;i<8;i++)
	{
		uc_sw_SCLK_LO; //for(j=0;j<temp_clr;j++) delay_us(1);
    14ac:	de 98       	cbi	0x1b, 6	; 27
		data_out |= getDOUT();
    14ae:	a0 df       	rcall	.-192    	; 0x13f0 <getDOUT.1527>
    14b0:	08 2b       	or	r16, r24
		if(i != 7) data_out <<= 1;  // do not shift data if this is the late bit
    14b2:	17 30       	cpi	r17, 0x07	; 7
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <adxl345_spi_read.1525+0x50>
    14b6:	00 0f       	add	r16, r16
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
    14b8:	de 9a       	sbi	0x1b, 6	; 27
		//for(j=0;j<temp_clr;j++) delay_us(1);
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);
	}
	
	// Read data
	for (i=0;i<8;i++)
    14ba:	1f 5f       	subi	r17, 0xFF	; 255
    14bc:	18 30       	cpi	r17, 0x08	; 8
    14be:	b1 f7       	brne	.-20     	; 0x14ac <adxl345_spi_read.1525+0x44>
		uc_sw_SCLK_HI; //for(j=0;j<temp_set;j++) delay_us(1);

	} 
	// end of transmission
	
	uc_sw_cs_HI;		// disable /uc_sw_cs
    14c0:	dd 9a       	sbi	0x1b, 5	; 27
	return data_out;
    14c2:	80 2f       	mov	r24, r16
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <adc_init.1365>:
/******************************************************************************\
 * See adc.h for documentation of these functions.
\******************************************************************************/

void adc_init(uint8_t channel, uint8_t bits, uint8_t voltageRef)
{
    14ca:	98 2f       	mov	r25, r24
    /* Check parameters */
    bits = ADC_BITS_10;
    if (channel > ADC_MAX_CHANNEL) {
        channel = ADC_MAX_CHANNEL;  /* GND reference */
    }
    if (voltageRef > ADC_REF_INTERNAL) {
    14cc:	44 30       	cpi	r20, 0x04	; 4
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <adc_init.1365+0x8>
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    else if (adcPrescaler < 32) { adcPrescaler = PRESCALER_DIV32; }
    else if (adcPrescaler < 64) { adcPrescaler = PRESCALER_DIV64; }
    else                        { adcPrescaler = PRESCALER_DIV128; }

    /* Set clock */
    ADCSRA = (ADCSRA & ~0x03) | (adcPrescaler);
    14d2:	86 b1       	in	r24, 0x06	; 6
    14d4:	8c 7f       	andi	r24, 0xFC	; 252
    14d6:	86 60       	ori	r24, 0x06	; 6
    14d8:	86 b9       	out	0x06, r24	; 6

    /* Set channel, voltage reference and right justification */
    ADMUX = (voltageRef << REFS0) | channel;
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	36 e0       	ldi	r19, 0x06	; 6
    14de:	44 0f       	add	r20, r20
    14e0:	55 1f       	adc	r21, r21
    14e2:	3a 95       	dec	r19
    14e4:	e1 f7       	brne	.-8      	; 0x14de <adc_init.1365+0x14>
    14e6:	89 2f       	mov	r24, r25
    14e8:	90 32       	cpi	r25, 0x20	; 32
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <adc_init.1365+0x24>
    14ec:	8f e1       	ldi	r24, 0x1F	; 31
    14ee:	84 2b       	or	r24, r20
    14f0:	87 b9       	out	0x07, r24	; 7

    /* Enable ADC */
    ADCSRA |= BIT(ADEN) | BIT(ADIE);
    14f2:	86 b1       	in	r24, 0x06	; 6
    14f4:	88 68       	ori	r24, 0x88	; 136
    14f6:	86 b9       	out	0x06, r24	; 6
    isNewValue = false;
    14f8:	10 92 18 01 	sts	0x0118, r1
    enableInterrupts();
    14fc:	78 94       	sei
}
    14fe:	08 95       	ret

00001500 <adc_singleConversion.1374>:
uint16_t adc_singleConversion(void)
{
    uint16_t result;
        
    /* Check that ADC is enabled */
    if ( !(ADCSRA & BIT(ADEN))) {
    1500:	37 99       	sbic	0x06, 7	; 6
    1502:	03 c0       	rjmp	.+6      	; 0x150a <adc_singleConversion.1374+0xa>
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	9f ef       	ldi	r25, 0xFF	; 255
    1508:	08 95       	ret
        return 0xFFFF;
    }

    /* Start single conversion */
    ADCSRA &= ~BIT(ADFR);
    150a:	35 98       	cbi	0x06, 5	; 6
    ADCSRA |= BIT(ADSC);
    150c:	36 9a       	sbi	0x06, 6	; 6
    
#ifndef ADC_USE_CALLBACK
    /* Wait for conversion to complete */
    while (!isNewValue) {
    150e:	80 91 18 01 	lds	r24, 0x0118
    1512:	88 23       	and	r24, r24
    1514:	e1 f3       	breq	.-8      	; 0x150e <adc_singleConversion.1374+0xe>
        ;
    }
    disableInterrupts();
    1516:	f8 94       	cli
    isNewValue = false;
    1518:	10 92 18 01 	sts	0x0118, r1
    result = result_local;
    151c:	80 91 16 01 	lds	r24, 0x0116
    1520:	90 91 17 01 	lds	r25, 0x0117
    enableInterrupts();
    1524:	78 94       	sei
    return result;
#else
    return 0;
#endif
}
    1526:	08 95       	ret

00001528 <__vector_21>:
 * Interrupt service routine that is signalled when an ADC conversion has
 * finished. The resulting value is stored locally, and a flag set to indicate
 * that a new value has been generated.
 **/
ISR(ADC_vect)
{
    1528:	1f 92       	push	r1
    152a:	0f 92       	push	r0
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	0f 92       	push	r0
    1530:	11 24       	eor	r1, r1
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	8f 93       	push	r24
    1538:	9f 93       	push	r25
    uint8_t resultLowByte;

    /* Must read ADCL before ADCH */
    resultLowByte = ADCL;
    153a:	84 b1       	in	r24, 0x04	; 4
    result_local = TO_UINT16(ADCH, resultLowByte);
    153c:	25 b1       	in	r18, 0x05	; 5
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	32 2f       	mov	r19, r18
    1542:	22 27       	eor	r18, r18
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	28 2b       	or	r18, r24
    1548:	39 2b       	or	r19, r25
    154a:	30 93 17 01 	sts	0x0117, r19
    154e:	20 93 16 01 	sts	0x0116, r18
    isNewValue = true;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 93 18 01 	sts	0x0118, r24
    
#ifdef ADC_USE_CALLBACK
    adc_callback(result_local);
#endif
}
    1558:	9f 91       	pop	r25
    155a:	8f 91       	pop	r24
    155c:	3f 91       	pop	r19
    155e:	2f 91       	pop	r18
    1560:	0f 90       	pop	r0
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	0f 90       	pop	r0
    1566:	1f 90       	pop	r1
    1568:	18 95       	reti

0000156a <__vector_15>:
 */
 
#ifndef BOARD_HAS_NO_TOSC1_CRYSTAL
/* Signalled every 8 seconds */
ISR(TIMER0_COMP_vect)
{
    156a:	1f 92       	push	r1
    156c:	0f 92       	push	r0
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	0f 92       	push	r0
    1572:	11 24       	eor	r1, r1
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    TCCR0 = PRESCALE_T0_DIV_1024;
    1578:	87 e0       	ldi	r24, 0x07	; 7
    157a:	83 bf       	out	0x33, r24	; 51

    timerInterruptCount[TIMER_SECOND]++;
    157c:	80 91 1d 01 	lds	r24, 0x011D
    1580:	90 91 1e 01 	lds	r25, 0x011E
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	90 93 1e 01 	sts	0x011E, r25
    158a:	80 93 1d 01 	sts	0x011D, r24
        TCNT0 = 0;
        isTimerInt[TIMER_SECOND] = 0;
    }
#endif
    /* Use update busy flag to know when interrupt logic is reset */
    while (ASSR & BIT(TCR0UB)) {
    158e:	00 b6       	in	r0, 0x30	; 48
    1590:	00 fc       	sbrc	r0, 0
    1592:	fd cf       	rjmp	.-6      	; 0x158e <__vector_15+0x24>
        ;
    }
}
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_9>:
}

#endif
/* Signalled every millisecond */
ISR(TIMER2_COMP_vect)
{
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	8f 93       	push	r24
    15ae:	9f 93       	push	r25
    timerInterruptCount[TIMER_MILLISECOND]++;
    15b0:	80 91 1f 01 	lds	r24, 0x011F
    15b4:	90 91 20 01 	lds	r25, 0x0120
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	90 93 20 01 	sts	0x0120, r25
    15be:	80 93 1f 01 	sts	0x011F, r24
        }
        timerInterruptCount[TIMER_MILLISECOND] = 0;
        isTimerInt[TIMER_MILLISECOND] = 0;
    }
#endif
}
    15c2:	9f 91       	pop	r25
    15c4:	8f 91       	pop	r24
    15c6:	0f 90       	pop	r0
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	0f 90       	pop	r0
    15cc:	1f 90       	pop	r1
    15ce:	18 95       	reti

000015d0 <write.9314>:
#ifndef UART_DO_NOT_INSERT_RETURN
   //if (ch == '\n')
     //   putchar('\r');
#endif

    UDR0 = ch;
    15d0:	8c b9       	out	0x0c, r24	; 12
    while ( !(UCSR0A & BIT(UDRE0)) )
    15d2:	5d 9b       	sbis	0x0b, 5	; 11
    15d4:	fe cf       	rjmp	.-4      	; 0x15d2 <write.9314+0x2>
 * type expected by AVR-libc stdio system.
 */
static int write(char ch, FILE __attribute__((unused)) *unused)
{
    return uart_putchar(ch);
}
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	08 95       	ret

000015da <read.9316>:
}


uint8_t uart_getchar(void)
{
    while ( !(UCSR0A & BIT(RXC0)) )
    15da:	5f 9b       	sbis	0x0b, 7	; 11
    15dc:	fe cf       	rjmp	.-4      	; 0x15da <read.9316>
        ;
    return UDR0;
    15de:	8c b1       	in	r24, 0x0c	; 12
 * conforms to function type expected by AVR-libc stdio system.
 */
static int read(FILE __attribute__((unused)) *unused)
{
    return uart_getchar();
}
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	08 95       	ret

000015e4 <getByte.9860>:

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    15e4:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    15e6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & BIT(SPIF))) {
    15e8:	77 9b       	sbis	0x0e, 7	; 14
    15ea:	fe cf       	rjmp	.-4      	; 0x15e8 <getByte.9860+0x4>
        ;
    }
    return SPDR;
    15ec:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    15ee:	c0 9a       	sbi	0x18, 0	; 24
    uint8_t byte;
    spi_enableCsn();
    byte = spi_readWriteByte(0);
    spi_disableCsn();
    return byte;
}
    15f0:	08 95       	ret

000015f2 <sendByte.9862>:

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    15f2:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    15f4:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    15f6:	77 9b       	sbis	0x0e, 7	; 14
    15f8:	fe cf       	rjmp	.-4      	; 0x15f6 <sendByte.9862+0x4>
        ;
    }
    return SPDR;
    15fa:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    15fc:	c0 9a       	sbi	0x18, 0	; 24
static void sendByte(uint8_t byte)
{
    spi_enableCsn();
    spi_readWriteByte(byte);
    spi_disableCsn();
}
    15fe:	08 95       	ret

00001600 <rf_setMode.1476>:
    buffer = receiveBuffer;
}


void rf_setMode(uint8_t mode)
{
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	18 2f       	mov	r17, r24
    uint8_t statusByte;

    if (mode == rf_mode) {
    1606:	00 91 11 01 	lds	r16, 0x0111
    160a:	80 17       	cp	r24, r16
    160c:	91 f1       	breq	.+100    	; 0x1672 <rf_setMode.1476+0x72>
        return;
    }

    disableInterrupts();
    160e:	f8 94       	cli

    /* Wait until any active transmission is finished before changing */
    do {
        statusByte = getByte();
    1610:	e9 df       	rcall	.-46     	; 0x15e4 <getByte.9860>
    } while (statusByte & BIT(TX_ACTIVE));
    1612:	83 fd       	sbrc	r24, 3
    1614:	fd cf       	rjmp	.-6      	; 0x1610 <rf_setMode.1476+0x10>

    /* Turn off RX */
    if (mode != RF_MODE_RECEIVING && rf_mode == RF_MODE_RECEIVING) {
    1616:	13 30       	cpi	r17, 0x03	; 3
    1618:	a1 f0       	breq	.+40     	; 0x1642 <rf_setMode.1476+0x42>
    161a:	03 30       	cpi	r16, 0x03	; 3
    161c:	29 f4       	brne	.+10     	; 0x1628 <rf_setMode.1476+0x28>
        sendByte(SRFOFF);
    161e:	86 e0       	ldi	r24, 0x06	; 6
    1620:	e8 df       	rcall	.-48     	; 0x15f2 <sendByte.9862>
        rf_disableInterrupt();
    1622:	89 b7       	in	r24, 0x39	; 57
    1624:	8f 7e       	andi	r24, 0xEF	; 239
    1626:	89 bf       	out	0x39, r24	; 57
    }

    /* Go to sleep mode (oscillator off) */
    if (mode == RF_MODE_SLEEP) {
    1628:	11 30       	cpi	r17, 0x01	; 1
    162a:	19 f4       	brne	.+6      	; 0x1632 <rf_setMode.1476+0x32>
        sendByte(SXOSCOFF);
    162c:	87 e0       	ldi	r24, 0x07	; 7
    162e:	e1 df       	rcall	.-62     	; 0x15f2 <sendByte.9862>
    1630:	1d c0       	rjmp	.+58     	; 0x166c <rf_setMode.1476+0x6c>
    }

    /* Disable radio completely, ans configure pins for sleep */
    if (mode == RF_MODE_OFF) {
    1632:	11 23       	and	r17, r17
    1634:	49 f4       	brne	.+18     	; 0x1648 <rf_setMode.1476+0x48>
        disableVreg();
    1636:	c5 98       	cbi	0x18, 5	; 24


/** Set pins to allow Atmega to go to low power sleep. **/
static inline void unsetPins(void)
{
    RF_FIFOP_DDR |= BIT(RF_FIFOP);
    1638:	14 9a       	sbi	0x02, 4	; 2
    RF_FIFO_DDR |= BIT(RF_FIFO);
    163a:	15 9a       	sbi	0x02, 5	; 2
    RF_SFD_DDR |= BIT(RF_SFD);
    163c:	8c 9a       	sbi	0x11, 4	; 17
    RF_CCA_DDR |= BIT(RF_CCA);
    163e:	8d 9a       	sbi	0x11, 5	; 17
    1640:	15 c0       	rjmp	.+42     	; 0x166c <rf_setMode.1476+0x6c>
        disableVreg();
        unsetPins();
    }

    /* Go to standby mode (oscillator on), if not already there */
    if ((mode == RF_MODE_RECEIVING && rf_mode != RF_MODE_STANDBY) ||
    1642:	02 30       	cpi	r16, 0x02	; 2
    1644:	29 f4       	brne	.+10     	; 0x1650 <rf_setMode.1476+0x50>
    1646:	0b c0       	rjmp	.+22     	; 0x165e <rf_setMode.1476+0x5e>
    1648:	12 30       	cpi	r17, 0x02	; 2
    164a:	39 f4       	brne	.+14     	; 0x165a <rf_setMode.1476+0x5a>
    164c:	03 30       	cpi	r16, 0x03	; 3
    164e:	71 f0       	breq	.+28     	; 0x166c <rf_setMode.1476+0x6c>
                    (mode == RF_MODE_STANDBY && rf_mode != RF_MODE_RECEIVING)) {
        sendByte(SXOSCON);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	cf df       	rcall	.-98     	; 0x15f2 <sendByte.9862>
        /* Wait for the crystal oscillator to become stable */
        do {
            statusByte = getByte();
    1654:	c7 df       	rcall	.-114    	; 0x15e4 <getByte.9860>
        } while (!(statusByte & BIT(XOSC16M_STABLE)));
    1656:	86 ff       	sbrs	r24, 6
    1658:	fd cf       	rjmp	.-6      	; 0x1654 <rf_setMode.1476+0x54>
    }

    /* Turn on receiver */
    if (mode == RF_MODE_RECEIVING) {
    165a:	13 30       	cpi	r17, 0x03	; 3
    165c:	39 f4       	brne	.+14     	; 0x166c <rf_setMode.1476+0x6c>
        sendByte(SRXON);
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	c8 df       	rcall	.-112    	; 0x15f2 <sendByte.9862>
        sendByte(SFLUSHRX);
    1662:	88 e0       	ldi	r24, 0x08	; 8
    1664:	c6 df       	rcall	.-116    	; 0x15f2 <sendByte.9862>
        rf_enableInterrupt();
    1666:	89 b7       	in	r24, 0x39	; 57
    1668:	80 61       	ori	r24, 0x10	; 16
    166a:	89 bf       	out	0x39, r24	; 57
    }

    enableInterrupts();
    166c:	78 94       	sei

    rf_mode = mode;
    166e:	10 93 11 01 	sts	0x0111, r17
}
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	08 95       	ret

00001678 <setRegister.9865>:

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    1678:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    167a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    167c:	77 9b       	sbis	0x0e, 7	; 14
    167e:	fe cf       	rjmp	.-4      	; 0x167c <setRegister.9865+0x4>
        ;
    }
    return SPDR;
    1680:	8f b1       	in	r24, 0x0f	; 15
 **/
static void setRegister(uint8_t address, uint16_t value)
{
    spi_enableCsn();
    spi_readWriteByte(address);
    spi_readWriteByte((uint8_t) ((value) >> 8));
    1682:	87 2f       	mov	r24, r23
    1684:	99 27       	eor	r25, r25


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1686:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1688:	77 9b       	sbis	0x0e, 7	; 14
    168a:	fe cf       	rjmp	.-4      	; 0x1688 <setRegister.9865+0x10>
        ;
    }
    return SPDR;
    168c:	8f b1       	in	r24, 0x0f	; 15


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    168e:	6f b9       	out	0x0f, r22	; 15
    while (!(SPSR & BIT(SPIF))) {
    1690:	77 9b       	sbis	0x0e, 7	; 14
    1692:	fe cf       	rjmp	.-4      	; 0x1690 <setRegister.9865+0x18>
        ;
    }
    return SPDR;
    1694:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1696:	c0 9a       	sbi	0x18, 0	; 24
    spi_readWriteByte((uint8_t) (value));
    spi_disableCsn();
}
    1698:	08 95       	ret

0000169a <sendRamAddress.9867>:
 * Convert to format expected by radio (see datasheet) and send RAM address.
 *
 * @param address where to start writing to RAM within the CC2420.
 **/
static void sendRamAddress(uint16_t address)
{
    169a:	9c 01       	movw	r18, r24
    spi_readWriteByte(0x80 | (address & 0x7F));
    169c:	80 68       	ori	r24, 0x80	; 128


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    169e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    16a0:	77 9b       	sbis	0x0e, 7	; 14
    16a2:	fe cf       	rjmp	.-4      	; 0x16a0 <sendRamAddress.9867+0x6>
        ;
    }
    return SPDR;
    16a4:	8f b1       	in	r24, 0x0f	; 15
    spi_readWriteByte((address >> 1) & 0xC0);
    16a6:	36 95       	lsr	r19
    16a8:	27 95       	ror	r18
    16aa:	82 2f       	mov	r24, r18
    16ac:	80 7c       	andi	r24, 0xC0	; 192


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    16ae:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    16b0:	77 9b       	sbis	0x0e, 7	; 14
    16b2:	fe cf       	rjmp	.-4      	; 0x16b0 <sendRamAddress.9867+0x16>
        ;
    }
    return SPDR;
    16b4:	8f b1       	in	r24, 0x0f	; 15
}
    16b6:	08 95       	ret

000016b8 <writeFifo.9870>:
 *
 * @param data a pointer to the data that will be written.
 * @param size how many bytes of @a data to write.
 **/
static void writeFifo(const uint8_t* data, uint8_t size)
{
    16b8:	9c 01       	movw	r18, r24

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    16ba:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    16bc:	8e e3       	ldi	r24, 0x3E	; 62
    16be:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    16c0:	77 9b       	sbis	0x0e, 7	; 14
    16c2:	fe cf       	rjmp	.-4      	; 0x16c0 <writeFifo.9870+0x8>
        ;
    }
    return SPDR;
    16c4:	8f b1       	in	r24, 0x0f	; 15
    16c6:	f9 01       	movw	r30, r18
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	07 c0       	rjmp	.+14     	; 0x16da <writeFifo.9870+0x22>
    spi_enableCsn();
    spi_readWriteByte(TXFIFO);
    for (uint8_t i = 0; i < size; i++) {
        spi_readWriteByte(data[i]);
    16cc:	80 81       	ld	r24, Z


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    16ce:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    16d0:	77 9b       	sbis	0x0e, 7	; 14
    16d2:	fe cf       	rjmp	.-4      	; 0x16d0 <writeFifo.9870+0x18>
        ;
    }
    return SPDR;
    16d4:	8f b1       	in	r24, 0x0f	; 15
 **/
static void writeFifo(const uint8_t* data, uint8_t size)
{
    spi_enableCsn();
    spi_readWriteByte(TXFIFO);
    for (uint8_t i = 0; i < size; i++) {
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	31 96       	adiw	r30, 0x01	; 1
    16da:	96 17       	cp	r25, r22
    16dc:	b8 f3       	brcs	.-18     	; 0x16cc <writeFifo.9870+0x14>

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    16de:	c0 9a       	sbi	0x18, 0	; 24
        spi_readWriteByte(data[i]);
    }
    spi_disableCsn();
}
    16e0:	08 95       	ret

000016e2 <main>:
static double tempresult;
  uint8_t Bdata[25];
  uint16_t adcValue;

int main(void)
{
    16e2:	a5 e0       	ldi	r26, 0x05	; 5
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e6 e7       	ldi	r30, 0x76	; 118
    16e8:	fb e0       	ldi	r31, 0x0B	; 11
    16ea:	30 c4       	rjmp	.+2144   	; 0x1f4c <__prologue_saves__>
 // uint8_t i;

    /* Initalise everything */
    board_init();
    16ec:	84 e0       	ldi	r24, 0x04	; 4
    16ee:	8b bb       	out	0x1b, r24	; 27
    16f0:	9f ef       	ldi	r25, 0xFF	; 255
    16f2:	9a bb       	out	0x1a, r25	; 26
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	88 bb       	out	0x18, r24	; 24
    16f8:	97 bb       	out	0x17, r25	; 23
    16fa:	22 e0       	ldi	r18, 0x02	; 2
    16fc:	25 bb       	out	0x15, r18	; 21
    16fe:	94 bb       	out	0x14, r25	; 20
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	82 bb       	out	0x12, r24	; 18
    1704:	8c ef       	ldi	r24, 0xFC	; 252
    1706:	81 bb       	out	0x11, r24	; 17
    1708:	23 b9       	out	0x03, r18	; 3
    170a:	8d ef       	ldi	r24, 0xFD	; 253
    170c:	82 b9       	out	0x02, r24	; 2
    170e:	10 92 62 00 	sts	0x0062, r1
    1712:	90 93 61 00 	sts	0x0061, r25
    1716:	10 92 65 00 	sts	0x0065, r1
    171a:	8f e1       	ldi	r24, 0x1F	; 31
    171c:	80 93 64 00 	sts	0x0064, r24

	//Ensure adc port is input
	PORTF = 0x00; 
    1720:	10 92 62 00 	sts	0x0062, r1
    DDRF  = 0x00;
    1724:	10 92 61 00 	sts	0x0061, r1
	
	//Turn off sensors and disable mux 
	sensor_OUT;
    1728:	d4 9a       	sbi	0x1a, 4	; 26
    sensor_off;
    172a:	dc 98       	cbi	0x1b, 4	; 27
	

	
	
	uc_sw_MUX_BEND_EN_OUT;
    172c:	a2 9a       	sbi	0x14, 2	; 20
	uc_sw_MUX_BEND_EN_HI;//Interface Disabled
    172e:	aa 9a       	sbi	0x15, 2	; 21
	uc_sw_MUX_ACC_EN_OUT;
    1730:	a3 9a       	sbi	0x14, 3	; 20
	uc_sw_MUX_ACC_EN_HI;// Interface Disabled
    1732:	ab 9a       	sbi	0x15, 3	; 21
	
	uc_sw_MUX_MUX_cSA_CSB_OUT;
    1734:	a1 9a       	sbi	0x14, 1	; 20
	uc_sw_MUX_MUX_cSA_CSB_LO;
    1736:	a9 98       	cbi	0x15, 1	; 21
	
	uc_sw_MUX_MUX_WR_OUT;
    1738:	a0 9a       	sbi	0x14, 0	; 20
	uc_sw_MUX_MUX_WR_LO;
    173a:	a8 98       	cbi	0x15, 0	; 21
	
	adxl345_spi_init();
    173c:	48 de       	rcall	.-880    	; 0x13ce <adxl345_spi_init>
	uc_sw_MUX_A0_OUT;
    173e:	a7 9a       	sbi	0x14, 7	; 20
	uc_sw_MUX_A0_LO;
    1740:	af 98       	cbi	0x15, 7	; 21
	uc_sw_MUX_A1_OUT;
    1742:	a6 9a       	sbi	0x14, 6	; 20
	uc_sw_MUX_A1_LO;
    1744:	ae 98       	cbi	0x15, 6	; 21
	uc_sw_MUX_A2_OUT;
    1746:	a5 9a       	sbi	0x14, 5	; 20
	uc_sw_MUX_A2_LO;
    1748:	ad 98       	cbi	0x15, 5	; 21
	uc_sw_MUX_A3_OUT;
    174a:	a4 9a       	sbi	0x14, 4	; 20
	uc_sw_MUX_A3_LO;
    174c:	ac 98       	cbi	0x15, 4	; 21

	
	
	PORTF = 0x00; 
    174e:	10 92 62 00 	sts	0x0062, r1
    DDRF  = 0x00;
    1752:	10 92 61 00 	sts	0x0061, r1
\******************************************************************************/

/** Set pins for communicating with radio. **/
static inline void initPins(void)
{
    RF_RESETN_DDR |= BIT(RF_RESETN);
    1756:	8f 9a       	sbi	0x11, 7	; 17
    RF_RESETN_PORT |= BIT(RF_RESETN);
    1758:	97 9a       	sbi	0x12, 7	; 18
    RF_VREG_DDR |= BIT(RF_VREG_EN);
    175a:	bd 9a       	sbi	0x17, 5	; 23
    RF_FIFOP_DDR &= ~BIT(RF_FIFOP);
    175c:	14 98       	cbi	0x02, 4	; 2
    RF_FIFO_DDR &= ~BIT(RF_FIFO);
    175e:	15 98       	cbi	0x02, 5	; 2
    RF_SFD_DDR &= ~BIT(RF_SFD);
    1760:	8c 98       	cbi	0x11, 4	; 17
    RF_CCA_DDR &= ~BIT(RF_CCA);
    1762:	8d 98       	cbi	0x11, 5	; 17
\******************************************************************************/

/** Enables SPI, selects master mode, clock rate F_CPU / 2, and SPI mode 0. **/
static inline void spi_init(void)
{
    SPI_PORT |= BIT(SPI_MOSI) | BIT(SPI_SCLK) | BIT(SPI_CSN) | BIT(SPI_MISO);
    1764:	88 b3       	in	r24, 0x18	; 24
    1766:	8f 60       	ori	r24, 0x0F	; 15
    1768:	88 bb       	out	0x18, r24	; 24

    SPCR = BIT(SPE) | BIT(MSTR);
    176a:	80 e5       	ldi	r24, 0x50	; 80
    176c:	8d b9       	out	0x0d, r24	; 13

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    176e:	c0 9a       	sbi	0x18, 0	; 24

    initPins();
    spi_init();

    /* Turn on regulator and reset chip */
    enableVreg();
    1770:	c5 9a       	sbi	0x18, 5	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1772:	80 eb       	ldi	r24, 0xB0	; 176
    1774:	94 e0       	ldi	r25, 0x04	; 4
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <main+0x94>
    delay_us(600);
    enableReset();
    177a:	97 98       	cbi	0x12, 7	; 18
    177c:	80 ed       	ldi	r24, 0xD0	; 208
    177e:	97 e0       	ldi	r25, 0x07	; 7
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <main+0x9e>
    delay_us(1000);
    disableReset();
    1784:	97 9a       	sbi	0x12, 7	; 18
    1786:	88 ee       	ldi	r24, 0xE8	; 232
    1788:	93 e0       	ldi	r25, 0x03	; 3
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <main+0xa8>
    /* Calculate frequency from channel number (see datasheet) */
    f = ((uint16_t)(channel - 11) * 5) + 357;
    f |= 0x4000;        /* To set bits in rest of register */

    /* Write it to the CC2420 */
    disableInterrupts();
    178e:	f8 94       	cli
    setRegister(FSCTRL, f);
    1790:	88 e1       	ldi	r24, 0x18	; 24
    1792:	62 e9       	ldi	r22, 0x92	; 146
    1794:	71 e4       	ldi	r23, 0x41	; 65
    1796:	70 df       	rcall	.-288    	; 0x1678 <setRegister.9865>
    enableInterrupts();
    1798:	78 94       	sei
            (power != RF_PWR_NEG15) &&
            (power != RF_PWR_NEG25)) {
        power = RF_PWR_MAX;
    }
    
    rf_power = power;
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	80 93 1c 01 	sts	0x011C, r24

    disableInterrupts();
    17a0:	f8 94       	cli
    setRegister(TXCTRL, 0xA000 | (uint16_t)rf_power);
    17a2:	85 e1       	ldi	r24, 0x15	; 21
    17a4:	6f ef       	ldi	r22, 0xFF	; 255
    17a6:	70 ea       	ldi	r23, 0xA0	; 160
    17a8:	67 df       	rcall	.-306    	; 0x1678 <setRegister.9865>
    enableInterrupts();
    17aa:	78 94       	sei

    /* Set the output power */
    rf_setPower(power);

    /* Initialize the FIFOP external interrupt */
    rf_initInterrupt();
    17ac:	8a b7       	in	r24, 0x3a	; 58
    17ae:	83 60       	ori	r24, 0x03	; 3
    17b0:	8a bf       	out	0x3a, r24	; 58
    17b2:	80 e1       	ldi	r24, 0x10	; 16
    17b4:	88 bf       	out	0x38, r24	; 56

    /* Disable interrupts while accessing SPI */
    disableInterrupts();
    17b6:	f8 94       	cli

    /* Enable oscillator */
    sendByte(SXOSCON);
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	1b df       	rcall	.-458    	; 0x15f2 <sendByte.9862>

    /* Set correlation threshold to 20 */
    setRegister(MDMCTRL1, 0x0500);
    17bc:	82 e1       	ldi	r24, 0x12	; 18
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	75 e0       	ldi	r23, 0x05	; 5
    17c2:	5a df       	rcall	.-332    	; 0x1678 <setRegister.9865>

    /* Set RXBPF to 1 as recommended in datasheet */
    setRegister(RXCTRL1, 0x2A56);
    17c4:	87 e1       	ldi	r24, 0x17	; 23
    17c6:	66 e5       	ldi	r22, 0x56	; 86
    17c8:	7a e2       	ldi	r23, 0x2A	; 42
    17ca:	56 df       	rcall	.-340    	; 0x1678 <setRegister.9865>

    /* Set the FIFOP threshold to maximum (127 bytes) */
    setRegister(IOCFG0, 0x007F);
    17cc:	8c e1       	ldi	r24, 0x1C	; 28
    17ce:	6f e7       	ldi	r22, 0x7F	; 127
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	52 df       	rcall	.-348    	; 0x1678 <setRegister.9865>

    /* Disable RXFIFO_PROTECTION */
    setRegister(SECCTRL0, 0x01C4);
    17d4:	89 e1       	ldi	r24, 0x19	; 25
    17d6:	64 ec       	ldi	r22, 0xC4	; 196
    17d8:	71 e0       	ldi	r23, 0x01	; 1
    17da:	4e df       	rcall	.-356    	; 0x1678 <setRegister.9865>

    txSeqNumber = 0;
    17dc:	10 92 19 01 	sts	0x0119, r1

    /* Wait for the crystal oscillator to become stable */
    do {
        statusByte = getByte();
    17e0:	01 df       	rcall	.-510    	; 0x15e4 <getByte.9860>
    } while (!(statusByte & BIT(XOSC16M_STABLE)));
    17e2:	86 ff       	sbrs	r24, 6
    17e4:	fd cf       	rjmp	.-6      	; 0x17e0 <main+0xfe>

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    17e6:	c0 98       	cbi	0x18, 0	; 24

    /* Write addresses to RAM. The oscillator must be running for this. */
    spi_enableCsn();
    sendRamAddress(RAM_SHORTADR);
    17e8:	8a e6       	ldi	r24, 0x6A	; 106
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	56 df       	rcall	.-340    	; 0x169a <sendRamAddress.9867>


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    17ee:	89 e7       	ldi	r24, 0x79	; 121
    17f0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    17f2:	77 9b       	sbis	0x0e, 7	; 14
    17f4:	fe cf       	rjmp	.-4      	; 0x17f2 <main+0x110>
        ;
    }
    return SPDR;
    17f6:	8f b1       	in	r24, 0x0f	; 15


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    17f8:	89 e7       	ldi	r24, 0x79	; 121
    17fa:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    17fc:	77 9b       	sbis	0x0e, 7	; 14
    17fe:	fe cf       	rjmp	.-4      	; 0x17fc <main+0x11a>
        ;
    }
    return SPDR;
    1800:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1802:	c0 9a       	sbi	0x18, 0	; 24

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    1804:	c0 98       	cbi	0x18, 0	; 24
    spi_readWriteByte(RF_LOCAL_ADDRESS & 0xFF);  /* LSB first */
    spi_readWriteByte(RF_LOCAL_ADDRESS >> 8);
    spi_disableCsn();

    spi_enableCsn();
    sendRamAddress(RAM_PANID);
    1806:	88 e6       	ldi	r24, 0x68	; 104
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	47 df       	rcall	.-370    	; 0x169a <sendRamAddress.9867>


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    180c:	85 eb       	ldi	r24, 0xB5	; 181
    180e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1810:	77 9b       	sbis	0x0e, 7	; 14
    1812:	fe cf       	rjmp	.-4      	; 0x1810 <main+0x12e>
        ;
    }
    return SPDR;
    1814:	8f b1       	in	r24, 0x0f	; 15


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1816:	81 e3       	ldi	r24, 0x31	; 49
    1818:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    181a:	77 9b       	sbis	0x0e, 7	; 14
    181c:	fe cf       	rjmp	.-4      	; 0x181a <main+0x138>
        ;
    }
    return SPDR;
    181e:	8f b1       	in	r24, 0x0f	; 15

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1820:	c0 9a       	sbi	0x18, 0	; 24
    spi_readWriteByte(RF_NETWORK_ID & 0xFF);
    spi_readWriteByte(RF_NETWORK_ID >> 8);
    spi_disableCsn();

    /* Disable oscillator to save power */
    sendByte(SXOSCOFF);
    1822:	87 e0       	ldi	r24, 0x07	; 7
    1824:	e6 de       	rcall	.-564    	; 0x15f2 <sendByte.9862>

    enableInterrupts();
    1826:	78 94       	sei
}


void rf_setReceiveBuffer(volatile rf_msgType* receiveBuffer)
{
    buffer = receiveBuffer;
    1828:	81 e2       	ldi	r24, 0x21	; 33
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	90 93 1b 01 	sts	0x011B, r25
    1830:	80 93 1a 01 	sts	0x011A, r24
	rf_init(RF_CHANNEL_CENTRE, RF_PWR_MAX);
	rf_setReceiveBuffer(&receivedMsg);
	//rf_setMode(RF_MODE_RECEIVING);
	sensor_on;
    1834:	dc 9a       	sbi	0x1b, 4	; 27
{
/* See avr-libc docs on <util/setbaud.h> for explanation of this code */
#define BAUD UART_BAUDRATE
#define BAUD_TOL UART_BAUD_TOL
#include <util/setbaud.h>
    UBRR0H = UBRRH_VALUE;
    1836:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = UBRRL_VALUE;
    183a:	19 b8       	out	0x09, r1	; 9
#if USE_2X
    UCSR0A |= BIT(U2X0);
    183c:	59 9a       	sbi	0x0b, 1	; 11

#undef BAUD
#undef BAUD_TOL

    /* Set parity, stop bits (one), and character size (eight) */
    UCSR0C = BIT(UCSZ01) | BIT(UCSZ00);
    183e:	86 e0       	ldi	r24, 0x06	; 6
    1840:	80 93 95 00 	sts	0x0095, r24
#ifdef UART_USE_CALLBACK
    /* Enable RX interrupt if application wants it */
    UCSR0B |= BIT(RXCIE0) | BIT(RXEN0) | BIT(TXEN0);
    enableInterrupts();
#else
    UCSR0B |= BIT(RXEN0) | BIT(TXEN0);
    1844:	8a b1       	in	r24, 0x0a	; 10
    1846:	88 61       	ori	r24, 0x18	; 24
    1848:	8a b9       	out	0x0a, r24	; 10

    uart_enable();

#ifdef _STDIO_H_
    /* USART0 becomes stdin and stdout with avr-libc */
    stdout = &uart0;
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	90 93 bf 01 	sts	0x01BF, r25
    1852:	80 93 be 01 	sts	0x01BE, r24
    stdin = &uart0;
    1856:	90 93 bd 01 	sts	0x01BD, r25
    185a:	80 93 bc 01 	sts	0x01BC, r24
    stderr = &uart0;
    185e:	90 93 c1 01 	sts	0x01C1, r25
    1862:	80 93 c0 01 	sts	0x01C0, r24
	uart_init();


	uc_sw_MUX_ACC_EN_LO;
    1866:	ab 98       	cbi	0x15, 3	; 21
    1868:	88 ee       	ldi	r24, 0xE8	; 232
    186a:	93 e0       	ldi	r25, 0x03	; 3
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <main+0x18a>
	delay_us(500);
	
for(j=0;j<16;j++)
    1870:	10 92 9c 01 	sts	0x019C, r1
    1874:	08 ec       	ldi	r16, 0xC8	; 200
    1876:	10 e0       	ldi	r17, 0x00	; 0
    1878:	28 c0       	rjmp	.+80     	; 0x18ca <main+0x1e8>
{


	if(j&0x01)uc_sw_MUX_A0_HI;
    187a:	80 ff       	sbrs	r24, 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <main+0x1a0>
    187e:	af 9a       	sbi	0x15, 7	; 21
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <main+0x1a2>
	else uc_sw_MUX_A0_LO;
    1882:	af 98       	cbi	0x15, 7	; 21
	if(j&0x02)uc_sw_MUX_A1_HI;
    1884:	81 ff       	sbrs	r24, 1
    1886:	02 c0       	rjmp	.+4      	; 0x188c <main+0x1aa>
    1888:	ae 9a       	sbi	0x15, 6	; 21
    188a:	01 c0       	rjmp	.+2      	; 0x188e <main+0x1ac>
	else uc_sw_MUX_A1_LO;
    188c:	ae 98       	cbi	0x15, 6	; 21
	if(j&0x04)uc_sw_MUX_A2_HI;
    188e:	82 ff       	sbrs	r24, 2
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <main+0x1b4>
    1892:	ad 9a       	sbi	0x15, 5	; 21
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <main+0x1b6>
	else uc_sw_MUX_A2_LO;
    1896:	ad 98       	cbi	0x15, 5	; 21
	if(j&0x08)uc_sw_MUX_A3_HI;
    1898:	83 ff       	sbrs	r24, 3
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <main+0x1be>
    189c:	ac 9a       	sbi	0x15, 4	; 21
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <main+0x1c0>
	else uc_sw_MUX_A3_LO;
    18a0:	ac 98       	cbi	0x15, 4	; 21
    18a2:	c8 01       	movw	r24, r16
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <main+0x1c2>
	delay_us(100);
	adxl345_spi_write(0x31,0x08);
    18a8:	81 e3       	ldi	r24, 0x31	; 49
    18aa:	68 e0       	ldi	r22, 0x08	; 8
    18ac:	aa dd       	rcall	.-1196   	; 0x1402 <adxl345_spi_write.1523>
	adxl345_spi_write(0x31,0x08);	
    18ae:	81 e3       	ldi	r24, 0x31	; 49
    18b0:	68 e0       	ldi	r22, 0x08	; 8
    18b2:	a7 dd       	rcall	.-1202   	; 0x1402 <adxl345_spi_write.1523>
	
	adxl345_spi_write(0x2D,0x08);		// start measurement
    18b4:	8d e2       	ldi	r24, 0x2D	; 45
    18b6:	68 e0       	ldi	r22, 0x08	; 8
    18b8:	a4 dd       	rcall	.-1208   	; 0x1402 <adxl345_spi_write.1523>
	adxl345_spi_write(0x31,0x08);
    18ba:	81 e3       	ldi	r24, 0x31	; 49
    18bc:	68 e0       	ldi	r22, 0x08	; 8
    18be:	a1 dd       	rcall	.-1214   	; 0x1402 <adxl345_spi_write.1523>


	uc_sw_MUX_ACC_EN_LO;
	delay_us(500);
	
for(j=0;j<16;j++)
    18c0:	80 91 9c 01 	lds	r24, 0x019C
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	80 93 9c 01 	sts	0x019C, r24
    18ca:	80 91 9c 01 	lds	r24, 0x019C
    18ce:	80 31       	cpi	r24, 0x10	; 16
    18d0:	a0 f2       	brcs	.-88     	; 0x187a <main+0x198>
			uc_sw_MUX_ACC_EN_LO;//Connect interface
			delay_us(2);
			
			
		txBuffer[0+6*j+3] = adxl345_spi_read(0xB2);
		txBuffer[1+6*j+3] = adxl345_spi_read(0xB3);	
    18d2:	16 e0       	ldi	r17, 0x06	; 6
    18d4:	f1 2e       	mov	r15, r17
        txBuffer[2+6*j+3] = adxl345_spi_read(0xB4);
    18d6:	b3 e0       	ldi	r27, 0x03	; 3
    18d8:	eb 2e       	mov	r14, r27
				for (i=0;i<3;i++)
		{
		
		if(0x80&txBuffer[1+2*i+6*j+3])tempresult=((((txBuffer[0+2*i+6*j+3])^0xFF)+1)+256*((((txBuffer[2*i+1+6*j+3])^0xFF))))*(-1.0/256);
		else tempresult=(txBuffer[2*i+6*j+3]+256*(txBuffer[2*i+1+6*j+3]))*(1.0/256);
		snprintf(&Bdata[0],9,"%f",tempresult);
    18da:	a1 ea       	ldi	r26, 0xA1	; 161
    18dc:	aa 2e       	mov	r10, r26
    18de:	a1 e0       	ldi	r26, 0x01	; 1
    18e0:	ba 2e       	mov	r11, r26
    18e2:	f9 e0       	ldi	r31, 0x09	; 9
    18e4:	8f 2e       	mov	r8, r31
    18e6:	91 2c       	mov	r9, r1
    18e8:	e0 e0       	ldi	r30, 0x00	; 0
    18ea:	6e 2e       	mov	r6, r30
    18ec:	e1 e0       	ldi	r30, 0x01	; 1
    18ee:	7e 2e       	mov	r7, r30
        statusByte = getByte();
    } while (!(statusByte & BIT(RSSI_VALID)));
#endif

    /* Write packet to the TX FIFO (footer is appended automatically) */
    writeFifo(&packetLength, 1);                    /* Packet Length */
    18f0:	2e 01       	movw	r4, r28
    18f2:	08 94       	sec
    18f4:	41 1c       	adc	r4, r1
    18f6:	51 1c       	adc	r5, r1
    writeFifo((uint8_t*)&frameControlField, 2);     /* Frame control field */
    18f8:	74 e0       	ldi	r23, 0x04	; 4
    18fa:	27 2e       	mov	r2, r23
    18fc:	31 2c       	mov	r3, r1
    18fe:	2c 0e       	add	r2, r28
    1900:	3d 1e       	adc	r3, r29
    1902:	64 ef       	ldi	r22, 0xF4	; 244
    1904:	c6 2e       	mov	r12, r22
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	d6 2e       	mov	r13, r22
	adxl345_spi_write(0x2D,0x08);		// start measurement
	adxl345_spi_write(0x31,0x08);
	}
    for (;;) {
	
		uc_sw_MUX_BEND_EN_HI;//Interface Disabled
    190a:	aa 9a       	sbi	0x15, 2	; 21
		uc_sw_MUX_ACC_EN_HI;//Disconnect interface
    190c:	ab 9a       	sbi	0x15, 3	; 21
		
	//read accelerometers 
	txBuffer[0] = '-';
    190e:	8d e2       	ldi	r24, 0x2D	; 45
    1910:	80 93 28 01 	sts	0x0128, r24
	txBuffer[1] = '-';
    1914:	80 93 29 01 	sts	0x0129, r24
	
	putchar('-');
    1918:	60 91 be 01 	lds	r22, 0x01BE
    191c:	70 91 bf 01 	lds	r23, 0x01BF
    1920:	8d e2       	ldi	r24, 0x2D	; 45
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	7a d4       	rcall	.+2292   	; 0x221a <fputc>
	putchar('-');
    1926:	60 91 be 01 	lds	r22, 0x01BE
    192a:	70 91 bf 01 	lds	r23, 0x01BF
    192e:	8d e2       	ldi	r24, 0x2D	; 45
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	73 d4       	rcall	.+2278   	; 0x221a <fputc>
		for(j=2;j<5;j++)
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	80 93 9c 01 	sts	0x019C, r24
    193a:	1c c1       	rjmp	.+568    	; 0x1b74 <main+0x492>
		{
			if(j&0x01)uc_sw_MUX_A0_HI;
    193c:	0e 2f       	mov	r16, r30
    193e:	10 e0       	ldi	r17, 0x00	; 0
    1940:	e0 ff       	sbrs	r30, 0
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <main+0x266>
    1944:	af 9a       	sbi	0x15, 7	; 21
    1946:	01 c0       	rjmp	.+2      	; 0x194a <main+0x268>
			else uc_sw_MUX_A0_LO;
    1948:	af 98       	cbi	0x15, 7	; 21
			if(j&0x02)uc_sw_MUX_A1_HI;
    194a:	01 ff       	sbrs	r16, 1
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <main+0x270>
    194e:	ae 9a       	sbi	0x15, 6	; 21
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <main+0x272>
			else uc_sw_MUX_A1_LO;
    1952:	ae 98       	cbi	0x15, 6	; 21
			if(j&0x04)uc_sw_MUX_A2_HI;
    1954:	02 ff       	sbrs	r16, 2
    1956:	02 c0       	rjmp	.+4      	; 0x195c <main+0x27a>
    1958:	ad 9a       	sbi	0x15, 5	; 21
    195a:	01 c0       	rjmp	.+2      	; 0x195e <main+0x27c>
			else uc_sw_MUX_A2_LO;
    195c:	ad 98       	cbi	0x15, 5	; 21
			if(j&0x08)uc_sw_MUX_A3_HI;
    195e:	03 ff       	sbrs	r16, 3
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <main+0x284>
    1962:	ac 9a       	sbi	0x15, 4	; 21
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <main+0x286>
			else uc_sw_MUX_A3_LO;
    1966:	ac 98       	cbi	0x15, 4	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1968:	85 e0       	ldi	r24, 0x05	; 5
    196a:	8a 95       	dec	r24
    196c:	f1 f7       	brne	.-4      	; 0x196a <main+0x288>
			delay_us(2);
			uc_sw_MUX_ACC_EN_LO;//Connect interface
    196e:	ab 98       	cbi	0x15, 3	; 21
    1970:	85 e0       	ldi	r24, 0x05	; 5
    1972:	8a 95       	dec	r24
    1974:	f1 f7       	brne	.-4      	; 0x1972 <main+0x290>
			delay_us(2);
			
			
		txBuffer[0+6*j+3] = adxl345_spi_read(0xB2);
    1976:	82 eb       	ldi	r24, 0xB2	; 178
    1978:	77 dd       	rcall	.-1298   	; 0x1468 <adxl345_spi_read.1525>
    197a:	f8 01       	movw	r30, r16
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	e0 0f       	add	r30, r16
    1982:	f1 1f       	adc	r31, r17
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	e8 5d       	subi	r30, 0xD8	; 216
    198a:	fe 4f       	sbci	r31, 0xFE	; 254
    198c:	83 83       	std	Z+3, r24	; 0x03
		txBuffer[1+6*j+3] = adxl345_spi_read(0xB3);	
    198e:	80 91 9c 01 	lds	r24, 0x019C
    1992:	8f 9d       	mul	r24, r15
    1994:	80 01       	movw	r16, r0
    1996:	11 24       	eor	r1, r1
    1998:	0c 5f       	subi	r16, 0xFC	; 252
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	83 eb       	ldi	r24, 0xB3	; 179
    199e:	64 dd       	rcall	.-1336   	; 0x1468 <adxl345_spi_read.1525>
    19a0:	08 5d       	subi	r16, 0xD8	; 216
    19a2:	1e 4f       	sbci	r17, 0xFE	; 254
    19a4:	d8 01       	movw	r26, r16
    19a6:	8c 93       	st	X, r24
        txBuffer[2+6*j+3] = adxl345_spi_read(0xB4);
    19a8:	80 91 9c 01 	lds	r24, 0x019C
    19ac:	8e 9d       	mul	r24, r14
    19ae:	80 01       	movw	r16, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	00 0f       	add	r16, r16
    19b4:	11 1f       	adc	r17, r17
    19b6:	0b 5f       	subi	r16, 0xFB	; 251
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	84 eb       	ldi	r24, 0xB4	; 180
    19bc:	55 dd       	rcall	.-1366   	; 0x1468 <adxl345_spi_read.1525>
    19be:	08 5d       	subi	r16, 0xD8	; 216
    19c0:	1e 4f       	sbci	r17, 0xFE	; 254
    19c2:	f8 01       	movw	r30, r16
    19c4:	80 83       	st	Z, r24
        txBuffer[3+6*j+3] = adxl345_spi_read(0xB5);
    19c6:	80 91 9c 01 	lds	r24, 0x019C
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	8c 01       	movw	r16, r24
    19d0:	00 0f       	add	r16, r16
    19d2:	11 1f       	adc	r17, r17
    19d4:	08 0f       	add	r16, r24
    19d6:	19 1f       	adc	r17, r25
    19d8:	00 0f       	add	r16, r16
    19da:	11 1f       	adc	r17, r17
    19dc:	85 eb       	ldi	r24, 0xB5	; 181
    19de:	44 dd       	rcall	.-1400   	; 0x1468 <adxl345_spi_read.1525>
    19e0:	08 5d       	subi	r16, 0xD8	; 216
    19e2:	1e 4f       	sbci	r17, 0xFE	; 254
    19e4:	d8 01       	movw	r26, r16
    19e6:	8c 93       	st	X, r24
        txBuffer[4+6*j+3] = adxl345_spi_read(0xB6);
    19e8:	80 91 9c 01 	lds	r24, 0x019C
    19ec:	8f 9d       	mul	r24, r15
    19ee:	80 01       	movw	r16, r0
    19f0:	11 24       	eor	r1, r1
    19f2:	09 5f       	subi	r16, 0xF9	; 249
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	86 eb       	ldi	r24, 0xB6	; 182
    19f8:	37 dd       	rcall	.-1426   	; 0x1468 <adxl345_spi_read.1525>
    19fa:	08 5d       	subi	r16, 0xD8	; 216
    19fc:	1e 4f       	sbci	r17, 0xFE	; 254
    19fe:	f8 01       	movw	r30, r16
    1a00:	80 83       	st	Z, r24
        txBuffer[5+6*j+3] = adxl345_spi_read(0xB7);
    1a02:	80 91 9c 01 	lds	r24, 0x019C
    1a06:	8f 9d       	mul	r24, r15
    1a08:	80 01       	movw	r16, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	08 5f       	subi	r16, 0xF8	; 248
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	87 eb       	ldi	r24, 0xB7	; 183
    1a12:	2a dd       	rcall	.-1452   	; 0x1468 <adxl345_spi_read.1525>
    1a14:	08 5d       	subi	r16, 0xD8	; 216
    1a16:	1e 4f       	sbci	r17, 0xFE	; 254
    1a18:	d8 01       	movw	r26, r16
    1a1a:	8c 93       	st	X, r24
		uc_sw_MUX_ACC_EN_HI;//Disconnect interface
    1a1c:	ab 9a       	sbi	0x15, 3	; 21
		if(DEBUGGING_ON)
		{
				for (i=0;i<3;i++)
    1a1e:	10 92 9b 01 	sts	0x019B, r1
    1a22:	9e c0       	rjmp	.+316    	; 0x1b60 <main+0x47e>
		{
		
		if(0x80&txBuffer[1+2*i+6*j+3])tempresult=((((txBuffer[0+2*i+6*j+3])^0xFF)+1)+256*((((txBuffer[2*i+1+6*j+3])^0xFF))))*(-1.0/256);
    1a24:	9e 9d       	mul	r25, r14
    1a26:	c0 01       	movw	r24, r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	82 0f       	add	r24, r18
    1a2c:	91 1d       	adc	r25, r1
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	fc 01       	movw	r30, r24
    1a34:	e4 5d       	subi	r30, 0xD4	; 212
    1a36:	fe 4f       	sbci	r31, 0xFE	; 254
    1a38:	20 81       	ld	r18, Z
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	27 ff       	sbrs	r18, 7
    1a3e:	18 c0       	rjmp	.+48     	; 0x1a70 <main+0x38e>
    1a40:	a8 5d       	subi	r26, 0xD8	; 216
    1a42:	be 4f       	sbci	r27, 0xFE	; 254
    1a44:	13 96       	adiw	r26, 0x03	; 3
    1a46:	6c 91       	ld	r22, X
    1a48:	60 95       	com	r22
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	6f 5f       	subi	r22, 0xFF	; 255
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	20 95       	com	r18
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	32 2f       	mov	r19, r18
    1a56:	22 27       	eor	r18, r18
    1a58:	62 0f       	add	r22, r18
    1a5a:	73 1f       	adc	r23, r19
    1a5c:	88 27       	eor	r24, r24
    1a5e:	77 fd       	sbrc	r23, 7
    1a60:	80 95       	com	r24
    1a62:	98 2f       	mov	r25, r24
    1a64:	c5 db       	rcall	.-2166   	; 0x11f0 <__floatsisf>
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5b eb       	ldi	r21, 0xBB	; 187
    1a6e:	13 c0       	rjmp	.+38     	; 0x1a96 <main+0x3b4>
		else tempresult=(txBuffer[2*i+6*j+3]+256*(txBuffer[2*i+1+6*j+3]))*(1.0/256);
    1a70:	62 2f       	mov	r22, r18
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	76 2f       	mov	r23, r22
    1a76:	66 27       	eor	r22, r22
    1a78:	a8 5d       	subi	r26, 0xD8	; 216
    1a7a:	be 4f       	sbci	r27, 0xFE	; 254
    1a7c:	13 96       	adiw	r26, 0x03	; 3
    1a7e:	2c 91       	ld	r18, X
    1a80:	62 0f       	add	r22, r18
    1a82:	71 1d       	adc	r23, r1
    1a84:	88 27       	eor	r24, r24
    1a86:	77 fd       	sbrc	r23, 7
    1a88:	80 95       	com	r24
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	b1 db       	rcall	.-2206   	; 0x11f0 <__floatsisf>
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5b e3       	ldi	r21, 0x3B	; 59
    1a96:	e7 db       	rcall	.-2098   	; 0x1266 <__mulsf3>
    1a98:	60 93 9d 01 	sts	0x019D, r22
    1a9c:	70 93 9e 01 	sts	0x019E, r23
    1aa0:	80 93 9f 01 	sts	0x019F, r24
    1aa4:	90 93 a0 01 	sts	0x01A0, r25
		snprintf(&Bdata[0],9,"%f",tempresult);
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	3a 97       	sbiw	r30, 0x0a	; 10
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	ad b7       	in	r26, 0x3d	; 61
    1abc:	be b7       	in	r27, 0x3e	; 62
    1abe:	12 96       	adiw	r26, 0x02	; 2
    1ac0:	bc 92       	st	X, r11
    1ac2:	ae 92       	st	-X, r10
    1ac4:	11 97       	sbiw	r26, 0x01	; 1
    1ac6:	93 82       	std	Z+3, r9	; 0x03
    1ac8:	82 82       	std	Z+2, r8	; 0x02
    1aca:	75 82       	std	Z+5, r7	; 0x05
    1acc:	64 82       	std	Z+4, r6	; 0x04
    1ace:	80 91 9d 01 	lds	r24, 0x019D
    1ad2:	90 91 9e 01 	lds	r25, 0x019E
    1ad6:	a0 91 9f 01 	lds	r26, 0x019F
    1ada:	b0 91 a0 01 	lds	r27, 0x01A0
    1ade:	86 83       	std	Z+6, r24	; 0x06
    1ae0:	97 83       	std	Z+7, r25	; 0x07
    1ae2:	a0 87       	std	Z+8, r26	; 0x08
    1ae4:	b1 87       	std	Z+9, r27	; 0x09
    1ae6:	c5 d3       	rcall	.+1930   	; 0x2272 <snprintf>
			//putchar('C');
			//putchar('C');
			//putHex_JT(j);
			//putchar(' ');
			//putchar(' ');
			putchar(Bdata[0]);
    1ae8:	ed b7       	in	r30, 0x3d	; 61
    1aea:	fe b7       	in	r31, 0x3e	; 62
    1aec:	3a 96       	adiw	r30, 0x0a	; 10
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	fe bf       	out	0x3e, r31	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	ed bf       	out	0x3d, r30	; 61
    1af8:	80 91 a1 01 	lds	r24, 0x01A1
    1afc:	60 91 be 01 	lds	r22, 0x01BE
    1b00:	70 91 bf 01 	lds	r23, 0x01BF
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	89 d3       	rcall	.+1810   	; 0x221a <fputc>
			putchar(Bdata[1]);
    1b08:	80 91 a2 01 	lds	r24, 0x01A2
    1b0c:	60 91 be 01 	lds	r22, 0x01BE
    1b10:	70 91 bf 01 	lds	r23, 0x01BF
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	81 d3       	rcall	.+1794   	; 0x221a <fputc>
			putchar(Bdata[2]);
    1b18:	80 91 a3 01 	lds	r24, 0x01A3
    1b1c:	60 91 be 01 	lds	r22, 0x01BE
    1b20:	70 91 bf 01 	lds	r23, 0x01BF
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	79 d3       	rcall	.+1778   	; 0x221a <fputc>
			putchar(Bdata[3]);
    1b28:	80 91 a4 01 	lds	r24, 0x01A4
    1b2c:	60 91 be 01 	lds	r22, 0x01BE
    1b30:	70 91 bf 01 	lds	r23, 0x01BF
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	71 d3       	rcall	.+1762   	; 0x221a <fputc>
			putchar(Bdata[4]);
    1b38:	80 91 a5 01 	lds	r24, 0x01A5
    1b3c:	60 91 be 01 	lds	r22, 0x01BE
    1b40:	70 91 bf 01 	lds	r23, 0x01BF
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	69 d3       	rcall	.+1746   	; 0x221a <fputc>
			putchar(',');
    1b48:	60 91 be 01 	lds	r22, 0x01BE
    1b4c:	70 91 bf 01 	lds	r23, 0x01BF
    1b50:	8c e2       	ldi	r24, 0x2C	; 44
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	62 d3       	rcall	.+1732   	; 0x221a <fputc>
        txBuffer[4+6*j+3] = adxl345_spi_read(0xB6);
        txBuffer[5+6*j+3] = adxl345_spi_read(0xB7);
		uc_sw_MUX_ACC_EN_HI;//Disconnect interface
		if(DEBUGGING_ON)
		{
				for (i=0;i<3;i++)
    1b56:	80 91 9b 01 	lds	r24, 0x019B
    1b5a:	8f 5f       	subi	r24, 0xFF	; 255
    1b5c:	80 93 9b 01 	sts	0x019B, r24
    1b60:	20 91 9b 01 	lds	r18, 0x019B
    1b64:	90 91 9c 01 	lds	r25, 0x019C
    1b68:	23 30       	cpi	r18, 0x03	; 3
    1b6a:	08 f4       	brcc	.+2      	; 0x1b6e <main+0x48c>
    1b6c:	5b cf       	rjmp	.-330    	; 0x1a24 <main+0x342>
	txBuffer[0] = '-';
	txBuffer[1] = '-';
	
	putchar('-');
	putchar('-');
		for(j=2;j<5;j++)
    1b6e:	9f 5f       	subi	r25, 0xFF	; 255
    1b70:	90 93 9c 01 	sts	0x019C, r25
    1b74:	e0 91 9c 01 	lds	r30, 0x019C
    1b78:	e5 30       	cpi	r30, 0x05	; 5
    1b7a:	08 f4       	brcc	.+2      	; 0x1b7e <main+0x49c>
    1b7c:	df ce       	rjmp	.-578    	; 0x193c <main+0x25a>
		}
		}
				if(DEBUGGING_ON)
		{
		}
		rf_send(DEST_ADDR, txBuffer, 99);
    1b7e:	80 e8       	ldi	r24, 0x80	; 128
    1b80:	94 e8       	ldi	r25, 0x84	; 132
    1b82:	9b 83       	std	Y+3, r25	; 0x03
    1b84:	8a 83       	std	Y+2, r24	; 0x02
}


void rf_send(uint16_t address, const uint8_t* msg, uint8_t length)
{
    uint16_t frameControlField = RF_FCF_NOACK;
    1b86:	81 e6       	ldi	r24, 0x61	; 97
    1b88:	98 e8       	ldi	r25, 0x88	; 136
    1b8a:	9d 83       	std	Y+5, r25	; 0x05
    1b8c:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t packetLength = length + RF_PACKET_OVERHEAD_SIZE;
    1b8e:	8e e6       	ldi	r24, 0x6E	; 110
    1b90:	89 83       	std	Y+1, r24	; 0x01
    if (length > RF_MAX_PAYLOAD_SIZE) {
        return;
    }

    /* Turn radio to standby mode, and save original mode */
    oldMode = rf_mode;
    1b92:	10 91 11 01 	lds	r17, 0x0111
    rf_setMode(RF_MODE_STANDBY);
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	33 dd       	rcall	.-1434   	; 0x1600 <rf_setMode.1476>

    /* Wait until the transceiver is idle */
    while (isFifop() || isSfd()) {
    1b9a:	0c 99       	sbic	0x01, 4	; 1
    1b9c:	fe cf       	rjmp	.-4      	; 0x1b9a <main+0x4b8>
    1b9e:	84 99       	sbic	0x10, 4	; 16
    1ba0:	fc cf       	rjmp	.-8      	; 0x1b9a <main+0x4b8>
        ;
    }

    /* Disable interrupts while accessing SPI */
    disableInterrupts();
    1ba2:	f8 94       	cli

    /* Flush the TX FIFO buffer */
    sendByte(SFLUSHTX);
    1ba4:	89 e0       	ldi	r24, 0x09	; 9
    1ba6:	25 dd       	rcall	.-1462   	; 0x15f2 <sendByte.9862>
        statusByte = getByte();
    } while (!(statusByte & BIT(RSSI_VALID)));
#endif

    /* Write packet to the TX FIFO (footer is appended automatically) */
    writeFifo(&packetLength, 1);                    /* Packet Length */
    1ba8:	c2 01       	movw	r24, r4
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	85 dd       	rcall	.-1270   	; 0x16b8 <writeFifo.9870>
    writeFifo((uint8_t*)&frameControlField, 2);     /* Frame control field */
    1bae:	c1 01       	movw	r24, r2
    1bb0:	62 e0       	ldi	r22, 0x02	; 2
    1bb2:	82 dd       	rcall	.-1276   	; 0x16b8 <writeFifo.9870>
    writeFifo(&txSeqNumber, 1);                     /* Sequence Number */
    1bb4:	89 e1       	ldi	r24, 0x19	; 25
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	7e dd       	rcall	.-1284   	; 0x16b8 <writeFifo.9870>
    writeFifo((uint8_t*)&panId, 2);                 /* PAN ID */
    1bbc:	82 e1       	ldi	r24, 0x12	; 18
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	62 e0       	ldi	r22, 0x02	; 2
    1bc2:	7a dd       	rcall	.-1292   	; 0x16b8 <writeFifo.9870>
    writeFifo((uint8_t*)&address, 2);               /* Destination address */
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	02 96       	adiw	r24, 0x02	; 2
    1bc8:	62 e0       	ldi	r22, 0x02	; 2
    1bca:	76 dd       	rcall	.-1300   	; 0x16b8 <writeFifo.9870>
    writeFifo((uint8_t*)&shortAddress, 2);          /* Source address */
    1bcc:	84 e1       	ldi	r24, 0x14	; 20
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	62 e0       	ldi	r22, 0x02	; 2
    1bd2:	72 dd       	rcall	.-1308   	; 0x16b8 <writeFifo.9870>
    writeFifo(msg, length);                         /* Payload */
    1bd4:	88 e2       	ldi	r24, 0x28	; 40
    1bd6:	91 e0       	ldi	r25, 0x01	; 1
    1bd8:	63 e6       	ldi	r22, 0x63	; 99
    1bda:	6e dd       	rcall	.-1316   	; 0x16b8 <writeFifo.9870>

    /* Send packet */
#ifdef RF_CARRIER_DETECT
    sendByte(STXONCCA);
#else
    sendByte(STXON);
    1bdc:	84 e0       	ldi	r24, 0x04	; 4
    1bde:	09 dd       	rcall	.-1518   	; 0x15f2 <sendByte.9862>
#endif

    /* Wait until transmission starts (SFD field has been sent) */
    while (!isSfd()) {
    1be0:	84 9b       	sbis	0x10, 4	; 16
    1be2:	fe cf       	rjmp	.-4      	; 0x1be0 <main+0x4fe>
        ;
    }

    /* Increment the sequence number*/
    txSeqNumber++;
    1be4:	80 91 19 01 	lds	r24, 0x0119
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	80 93 19 01 	sts	0x0119, r24
        sendByte(SRFOFF);
    }
#endif

    /* Return to original mode */
    rf_setMode(oldMode);
    1bee:	81 2f       	mov	r24, r17
    1bf0:	07 dd       	rcall	.-1522   	; 0x1600 <rf_setMode.1476>

    /* Turn interrupts back on */
    enableInterrupts();
    1bf2:	78 94       	sei
		//delay_ms(7);
		//rf_send(DEST_ADDR, txBuffer, 99);
		
	
			
		for(j=2;j<5;j++)
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	80 93 9c 01 	sts	0x019C, r24
    1bfa:	06 c1       	rjmp	.+524    	; 0x1e08 <main+0x726>
		{
			if(j&0x01)uc_sw_MUX_A0_HI;
    1bfc:	80 ff       	sbrs	r24, 0
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <main+0x522>
    1c00:	af 9a       	sbi	0x15, 7	; 21
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <main+0x524>
			else uc_sw_MUX_A0_LO;
    1c04:	af 98       	cbi	0x15, 7	; 21
			if(j&0x02)uc_sw_MUX_A1_HI;
    1c06:	81 ff       	sbrs	r24, 1
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <main+0x52c>
    1c0a:	ae 9a       	sbi	0x15, 6	; 21
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <main+0x52e>
			else uc_sw_MUX_A1_LO;
    1c0e:	ae 98       	cbi	0x15, 6	; 21
			if(j&0x04)uc_sw_MUX_A2_HI;
    1c10:	82 ff       	sbrs	r24, 2
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <main+0x536>
    1c14:	ad 9a       	sbi	0x15, 5	; 21
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <main+0x538>
			else uc_sw_MUX_A2_LO;
    1c18:	ad 98       	cbi	0x15, 5	; 21
			if(j&0x08)uc_sw_MUX_A3_HI;
    1c1a:	83 ff       	sbrs	r24, 3
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <main+0x540>
    1c1e:	ac 9a       	sbi	0x15, 4	; 21
    1c20:	01 c0       	rjmp	.+2      	; 0x1c24 <main+0x542>
			else uc_sw_MUX_A3_LO;
    1c22:	ac 98       	cbi	0x15, 4	; 21
    1c24:	8a e1       	ldi	r24, 0x1A	; 26
    1c26:	8a 95       	dec	r24
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <main+0x544>
			delay_us(10);
			uc_sw_MUX_BEND_EN_LO;//Interface Enabled
    1c2a:	aa 98       	cbi	0x15, 2	; 21
    1c2c:	80 ef       	ldi	r24, 0xF0	; 240
    1c2e:	8a 95       	dec	r24
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <main+0x54c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c32:	c6 01       	movw	r24, r12
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <main+0x552>
			delay_us(90);
			delay_us(250);
			delay_us(250);
			
			adc_init(2, 10, ADC_REF_VCC);
    1c38:	c6 01       	movw	r24, r12
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <main+0x558>
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	6a e0       	ldi	r22, 0x0A	; 10
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	42 dc       	rcall	.-1916   	; 0x14ca <adc_init.1365>
			
			adcValue=adc_singleConversion();
    1c46:	5c dc       	rcall	.-1864   	; 0x1500 <adc_singleConversion.1374>
    1c48:	90 93 bb 01 	sts	0x01BB, r25
    1c4c:	80 93 ba 01 	sts	0x01BA, r24
			//adcValue=adc_singleConversion();
			txBuffer[0+6*j+3] = HIGH_BYTE(adcValue);
    1c50:	20 91 9c 01 	lds	r18, 0x019C
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	f9 01       	movw	r30, r18
    1c58:	ee 0f       	add	r30, r30
    1c5a:	ff 1f       	adc	r31, r31
    1c5c:	e2 0f       	add	r30, r18
    1c5e:	f3 1f       	adc	r31, r19
    1c60:	ee 0f       	add	r30, r30
    1c62:	ff 1f       	adc	r31, r31
    1c64:	e8 5d       	subi	r30, 0xD8	; 216
    1c66:	fe 4f       	sbci	r31, 0xFE	; 254
    1c68:	29 2f       	mov	r18, r25
    1c6a:	33 27       	eor	r19, r19
    1c6c:	23 83       	std	Z+3, r18	; 0x03
			txBuffer[1+6*j+3]= LOW_BYTE(adcValue);
    1c6e:	84 83       	std	Z+4, r24	; 0x04
			
			
			adc_init(1, 10,ADC_REF_VCC);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	6a e0       	ldi	r22, 0x0A	; 10
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	29 dc       	rcall	.-1966   	; 0x14ca <adc_init.1365>
			//delay_us(10);
			adcValue=adc_singleConversion();
    1c78:	43 dc       	rcall	.-1914   	; 0x1500 <adc_singleConversion.1374>
    1c7a:	90 93 bb 01 	sts	0x01BB, r25
    1c7e:	80 93 ba 01 	sts	0x01BA, r24
			//adcValue=adc_singleConversion();
			txBuffer[2+6*j+3] = HIGH_BYTE(adcValue);
    1c82:	20 91 9c 01 	lds	r18, 0x019C
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	f9 01       	movw	r30, r18
    1c8a:	ee 0f       	add	r30, r30
    1c8c:	ff 1f       	adc	r31, r31
    1c8e:	e2 0f       	add	r30, r18
    1c90:	f3 1f       	adc	r31, r19
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	e6 5d       	subi	r30, 0xD6	; 214
    1c98:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9a:	49 2f       	mov	r20, r25
    1c9c:	55 27       	eor	r21, r21
    1c9e:	43 83       	std	Z+3, r20	; 0x03
			txBuffer[3+6*j+3] = LOW_BYTE(adcValue);
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	ee 0f       	add	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	e2 0f       	add	r30, r18
    1cac:	f3 1f       	adc	r31, r19
    1cae:	ee 0f       	add	r30, r30
    1cb0:	ff 1f       	adc	r31, r31
    1cb2:	e8 5d       	subi	r30, 0xD8	; 216
    1cb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb6:	80 83       	st	Z, r24
			
			adc_init(3, 10,ADC_REF_VCC);
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	6a e0       	ldi	r22, 0x0A	; 10
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	05 dc       	rcall	.-2038   	; 0x14ca <adc_init.1365>
			//adc_init(3, 10,ADC_REF_INTERNAL);
			//delay_us(100);
			adcValue=adc_singleConversion();
    1cc0:	1f dc       	rcall	.-1986   	; 0x1500 <adc_singleConversion.1374>
    1cc2:	90 93 bb 01 	sts	0x01BB, r25
    1cc6:	80 93 ba 01 	sts	0x01BA, r24

			//adcValue=adc_singleConversion();
			txBuffer[4+6*j+3] = HIGH_BYTE(adcValue);
    1cca:	20 91 9c 01 	lds	r18, 0x019C
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	e2 0f       	add	r30, r18
    1cd8:	f3 1f       	adc	r31, r19
    1cda:	ee 0f       	add	r30, r30
    1cdc:	ff 1f       	adc	r31, r31
    1cde:	e8 5d       	subi	r30, 0xD8	; 216
    1ce0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce2:	29 2f       	mov	r18, r25
    1ce4:	33 27       	eor	r19, r19
    1ce6:	27 83       	std	Z+7, r18	; 0x07
			txBuffer[5+6*j+3]  = LOW_BYTE(adcValue);
    1ce8:	80 87       	std	Z+8, r24	; 0x08

			
		uc_sw_MUX_BEND_EN_HI;//Disconnect interface
    1cea:	aa 9a       	sbi	0x15, 2	; 21
		if(DEBUGGING_ON)
		{
			for (i=0;i<1;i++)
    1cec:	10 92 9b 01 	sts	0x019B, r1
    1cf0:	81 c0       	rjmp	.+258    	; 0x1df4 <main+0x712>
		{
		

		tempresult=(txBuffer[2*i+1+6*j+3]+256*((txBuffer[2*i+6*j+3])&0x03))*(3.3/1024);
    1cf2:	9e 9d       	mul	r25, r14
    1cf4:	f0 01       	movw	r30, r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	ee 0f       	add	r30, r30
    1cfa:	ff 1f       	adc	r31, r31
    1cfc:	df 01       	movw	r26, r30
    1cfe:	a8 5d       	subi	r26, 0xD8	; 216
    1d00:	be 4f       	sbci	r27, 0xFE	; 254
    1d02:	13 96       	adiw	r26, 0x03	; 3
    1d04:	6c 91       	ld	r22, X
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	63 70       	andi	r22, 0x03	; 3
    1d0a:	70 70       	andi	r23, 0x00	; 0
    1d0c:	76 2f       	mov	r23, r22
    1d0e:	66 27       	eor	r22, r22
    1d10:	e4 5d       	subi	r30, 0xD4	; 212
    1d12:	fe 4f       	sbci	r31, 0xFE	; 254
    1d14:	20 81       	ld	r18, Z
    1d16:	62 0f       	add	r22, r18
    1d18:	71 1d       	adc	r23, r1
    1d1a:	88 27       	eor	r24, r24
    1d1c:	77 fd       	sbrc	r23, 7
    1d1e:	80 95       	com	r24
    1d20:	98 2f       	mov	r25, r24
    1d22:	66 da       	rcall	.-2868   	; 0x11f0 <__floatsisf>
    1d24:	23 e3       	ldi	r18, 0x33	; 51
    1d26:	33 e3       	ldi	r19, 0x33	; 51
    1d28:	43 e5       	ldi	r20, 0x53	; 83
    1d2a:	5b e3       	ldi	r21, 0x3B	; 59
    1d2c:	9c da       	rcall	.-2760   	; 0x1266 <__mulsf3>
    1d2e:	60 93 9d 01 	sts	0x019D, r22
    1d32:	70 93 9e 01 	sts	0x019E, r23
    1d36:	80 93 9f 01 	sts	0x019F, r24
    1d3a:	90 93 a0 01 	sts	0x01A0, r25
		snprintf(&Bdata[0],9,"%f",tempresult);
    1d3e:	2d b7       	in	r18, 0x3d	; 61
    1d40:	3e b7       	in	r19, 0x3e	; 62
    1d42:	2a 50       	subi	r18, 0x0A	; 10
    1d44:	30 40       	sbci	r19, 0x00	; 0
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	3e bf       	out	0x3e, r19	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	2d bf       	out	0x3d, r18	; 61
    1d50:	ed b7       	in	r30, 0x3d	; 61
    1d52:	fe b7       	in	r31, 0x3e	; 62
    1d54:	31 96       	adiw	r30, 0x01	; 1
    1d56:	ad b7       	in	r26, 0x3d	; 61
    1d58:	be b7       	in	r27, 0x3e	; 62
    1d5a:	12 96       	adiw	r26, 0x02	; 2
    1d5c:	bc 92       	st	X, r11
    1d5e:	ae 92       	st	-X, r10
    1d60:	11 97       	sbiw	r26, 0x01	; 1
    1d62:	93 82       	std	Z+3, r9	; 0x03
    1d64:	82 82       	std	Z+2, r8	; 0x02
    1d66:	75 82       	std	Z+5, r7	; 0x05
    1d68:	64 82       	std	Z+4, r6	; 0x04
    1d6a:	66 83       	std	Z+6, r22	; 0x06
    1d6c:	77 83       	std	Z+7, r23	; 0x07
    1d6e:	80 87       	std	Z+8, r24	; 0x08
    1d70:	91 87       	std	Z+9, r25	; 0x09
    1d72:	7f d2       	rcall	.+1278   	; 0x2272 <snprintf>
			
			
			
			
			if(i==0)
    1d74:	ed b7       	in	r30, 0x3d	; 61
    1d76:	fe b7       	in	r31, 0x3e	; 62
    1d78:	3a 96       	adiw	r30, 0x0a	; 10
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	fe bf       	out	0x3e, r31	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	ed bf       	out	0x3d, r30	; 61
    1d84:	80 91 9b 01 	lds	r24, 0x019B
    1d88:	88 23       	and	r24, r24
    1d8a:	79 f5       	brne	.+94     	; 0x1dea <main+0x708>
			{
				
				putchar(Bdata[0]);
    1d8c:	80 91 a1 01 	lds	r24, 0x01A1
    1d90:	60 91 be 01 	lds	r22, 0x01BE
    1d94:	70 91 bf 01 	lds	r23, 0x01BF
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	3f d2       	rcall	.+1150   	; 0x221a <fputc>
				putchar(Bdata[1]);
    1d9c:	80 91 a2 01 	lds	r24, 0x01A2
    1da0:	60 91 be 01 	lds	r22, 0x01BE
    1da4:	70 91 bf 01 	lds	r23, 0x01BF
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	37 d2       	rcall	.+1134   	; 0x221a <fputc>
				putchar(Bdata[2]);
    1dac:	80 91 a3 01 	lds	r24, 0x01A3
    1db0:	60 91 be 01 	lds	r22, 0x01BE
    1db4:	70 91 bf 01 	lds	r23, 0x01BF
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	2f d2       	rcall	.+1118   	; 0x221a <fputc>
				putchar(Bdata[3]);
    1dbc:	80 91 a4 01 	lds	r24, 0x01A4
    1dc0:	60 91 be 01 	lds	r22, 0x01BE
    1dc4:	70 91 bf 01 	lds	r23, 0x01BF
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	27 d2       	rcall	.+1102   	; 0x221a <fputc>
				putchar(Bdata[4]);
    1dcc:	80 91 a5 01 	lds	r24, 0x01A5
    1dd0:	60 91 be 01 	lds	r22, 0x01BE
    1dd4:	70 91 bf 01 	lds	r23, 0x01BF
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	1f d2       	rcall	.+1086   	; 0x221a <fputc>
				//putchar(Bdata[5]);---
				//putchar(Bdata[6]);---
				//putchar(Bdata[7]);---
				//putchar(Bdata[8]);
				putchar(',');
    1ddc:	60 91 be 01 	lds	r22, 0x01BE
    1de0:	70 91 bf 01 	lds	r23, 0x01BF
    1de4:	8c e2       	ldi	r24, 0x2C	; 44
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	18 d2       	rcall	.+1072   	; 0x221a <fputc>

			
		uc_sw_MUX_BEND_EN_HI;//Disconnect interface
		if(DEBUGGING_ON)
		{
			for (i=0;i<1;i++)
    1dea:	80 91 9b 01 	lds	r24, 0x019B
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	80 93 9b 01 	sts	0x019B, r24
    1df4:	80 91 9b 01 	lds	r24, 0x019B
    1df8:	90 91 9c 01 	lds	r25, 0x019C
    1dfc:	88 23       	and	r24, r24
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <main+0x720>
    1e00:	78 cf       	rjmp	.-272    	; 0x1cf2 <main+0x610>
		//delay_ms(7);
		//rf_send(DEST_ADDR, txBuffer, 99);
		
	
			
		for(j=2;j<5;j++)
    1e02:	9f 5f       	subi	r25, 0xFF	; 255
    1e04:	90 93 9c 01 	sts	0x019C, r25
    1e08:	80 91 9c 01 	lds	r24, 0x019C
    1e0c:	85 30       	cpi	r24, 0x05	; 5
    1e0e:	08 f4       	brcc	.+2      	; 0x1e12 <main+0x730>
    1e10:	f5 ce       	rjmp	.-534    	; 0x1bfc <main+0x51a>
			

		//}
		//		rf_send(DEST_ADDR, txBuffer, 99);
			//delay_ms(7);
			putchar('\n');
    1e12:	60 91 be 01 	lds	r22, 0x01BE
    1e16:	70 91 bf 01 	lds	r23, 0x01BF
    1e1a:	8a e0       	ldi	r24, 0x0A	; 10
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	fd d1       	rcall	.+1018   	; 0x221a <fputc>
    1e20:	74 cd       	rjmp	.-1304   	; 0x190a <main+0x228>

00001e22 <getFifo.9873>:
 *
 * @param data a pointer to where to save the data that is read.
 * @param size how many bytes to read.
 **/
static void getFifo(volatile uint8_t* data, uint8_t size)
{
    1e22:	9c 01       	movw	r18, r24

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    1e24:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1e26:	8f e7       	ldi	r24, 0x7F	; 127
    1e28:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1e2a:	77 9b       	sbis	0x0e, 7	; 14
    1e2c:	fe cf       	rjmp	.-4      	; 0x1e2a <getFifo.9873+0x8>
        ;
    }
    return SPDR;
    1e2e:	8f b1       	in	r24, 0x0f	; 15
    1e30:	f9 01       	movw	r30, r18
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	06 c0       	rjmp	.+12     	; 0x1e42 <getFifo.9873+0x20>


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1e36:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & BIT(SPIF))) {
    1e38:	77 9b       	sbis	0x0e, 7	; 14
    1e3a:	fe cf       	rjmp	.-4      	; 0x1e38 <getFifo.9873+0x16>
        ;
    }
    return SPDR;
    1e3c:	8f b1       	in	r24, 0x0f	; 15
    spi_enableCsn();
    spi_readWriteByte(RXFIFO | REG_READ);
    for (uint8_t i = 0; i < size; i++) {
        data[i] = spi_readWriteByte(0);
    1e3e:	81 93       	st	Z+, r24
 **/
static void getFifo(volatile uint8_t* data, uint8_t size)
{
    spi_enableCsn();
    spi_readWriteByte(RXFIFO | REG_READ);
    for (uint8_t i = 0; i < size; i++) {
    1e40:	9f 5f       	subi	r25, 0xFF	; 255
    1e42:	96 17       	cp	r25, r22
    1e44:	c0 f3       	brcs	.-16     	; 0x1e36 <getFifo.9873+0x14>

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1e46:	c0 9a       	sbi	0x18, 0	; 24
        data[i] = spi_readWriteByte(0);
    }
    spi_disableCsn();
}
    1e48:	08 95       	ret

00001e4a <discardFifo.9875>:
 * Read and ignore data from the RX FIFO.
 *
 * @param size how many bytes to read and discard.
 **/
static void discardFifo(uint8_t size)
{
    1e4a:	98 2f       	mov	r25, r24

/** Enable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_enableCsn(void)
{
    SPI_PORT &= ~BIT(SPI_CSN);
    1e4c:	c0 98       	cbi	0x18, 0	; 24


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1e4e:	8f e7       	ldi	r24, 0x7F	; 127
    1e50:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & BIT(SPIF))) {
    1e52:	77 9b       	sbis	0x0e, 7	; 14
    1e54:	fe cf       	rjmp	.-4      	; 0x1e52 <discardFifo.9875+0x8>
        ;
    }
    return SPDR;
    1e56:	8f b1       	in	r24, 0x0f	; 15
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	05 c0       	rjmp	.+10     	; 0x1e66 <discardFifo.9875+0x1c>


FORCE_INLINE
static inline uint8_t spi_readWriteByte(uint8_t byte)
{
    SPDR = byte;
    1e5c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & BIT(SPIF))) {
    1e5e:	77 9b       	sbis	0x0e, 7	; 14
    1e60:	fe cf       	rjmp	.-4      	; 0x1e5e <discardFifo.9875+0x14>
        ;
    }
    return SPDR;
    1e62:	2f b1       	in	r18, 0x0f	; 15
    spi_enableCsn();
    spi_readWriteByte(RXFIFO | REG_READ);
    for (uint8_t i = 0; ((i < size) && isFifo()); i++){
    1e64:	8f 5f       	subi	r24, 0xFF	; 255
    1e66:	89 17       	cp	r24, r25
    1e68:	10 f4       	brcc	.+4      	; 0x1e6e <discardFifo.9875+0x24>
    1e6a:	0d 99       	sbic	0x01, 5	; 1
    1e6c:	f7 cf       	rjmp	.-18     	; 0x1e5c <discardFifo.9875+0x12>

/** Disable chip select connected to radio. **/
FORCE_INLINE
static inline void spi_disableCsn(void)
{
    SPI_PORT |= BIT(SPI_CSN);
    1e6e:	c0 9a       	sbi	0x18, 0	; 24
        spi_readWriteByte(0);
    }
    spi_disableCsn();
}
    1e70:	08 95       	ret

00001e72 <__vector_5>:

/**
 * This interrupt is triggered when a full packet is received.
 **/
ISR(RF_INT_VECTOR)
{
    1e72:	1f 92       	push	r1
    1e74:	0f 92       	push	r0
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	0f 92       	push	r0
    1e7a:	0b b6       	in	r0, 0x3b	; 59
    1e7c:	0f 92       	push	r0
    1e7e:	11 24       	eor	r1, r1
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	2f 93       	push	r18
    1e86:	3f 93       	push	r19
    1e88:	4f 93       	push	r20
    1e8a:	5f 93       	push	r21
    1e8c:	6f 93       	push	r22
    1e8e:	7f 93       	push	r23
    1e90:	8f 93       	push	r24
    1e92:	9f 93       	push	r25
    1e94:	af 93       	push	r26
    1e96:	bf 93       	push	r27
    1e98:	ef 93       	push	r30
    1e9a:	ff 93       	push	r31
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <__vector_5+0x30>
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <__vector_5+0x32>
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    uint16_t frameControlField;
    uint8_t length;
    uint8_t footer[2];

    /* Check if FIFO overflow has happened */
    if((isFifop()) && (!(isFifo()))) {
    1eaa:	0c 9b       	sbis	0x01, 4	; 1
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <__vector_5+0x46>
    1eae:	0d 99       	sbic	0x01, 5	; 1
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <__vector_5+0x46>
        sendByte(SFLUSHRX);
    1eb2:	88 e0       	ldi	r24, 0x08	; 8
    1eb4:	9e db       	rcall	.-2244   	; 0x15f2 <sendByte.9862>
    1eb6:	2e c0       	rjmp	.+92     	; 0x1f14 <__vector_5+0xa2>
        return;
    }

    /* Payload length */
    getFifo(&length, 1);
    1eb8:	ce 01       	movw	r24, r28
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	b1 df       	rcall	.-158    	; 0x1e22 <getFifo.9873>
    length &= RF_LENGTH_MASK;
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	8f 77       	andi	r24, 0x7F	; 127
    1ec4:	89 83       	std	Y+1, r24	; 0x01

    /* Ignore the packet if the length is too short */
    if (length < RF_PACKET_OVERHEAD_SIZE) {
    1ec6:	8b 30       	cpi	r24, 0x0B	; 11
    1ec8:	10 f4       	brcc	.+4      	; 0x1ece <__vector_5+0x5c>
        discardFifo(length);
    1eca:	bf df       	rcall	.-130    	; 0x1e4a <discardFifo.9875>
    1ecc:	23 c0       	rjmp	.+70     	; 0x1f14 <__vector_5+0xa2>
        return;
    }

    /* Store payload length */
    buffer->length = length - RF_PACKET_OVERHEAD_SIZE;
    1ece:	00 91 1a 01 	lds	r16, 0x011A
    1ed2:	10 91 1b 01 	lds	r17, 0x011B
    1ed6:	8b 50       	subi	r24, 0x0B	; 11
    1ed8:	f8 01       	movw	r30, r16
    1eda:	80 83       	st	Z, r24

    /* Start reading the rest of the data */
    getFifo((uint8_t*) &frameControlField, 2);
    1edc:	ce 01       	movw	r24, r28
    1ede:	02 96       	adiw	r24, 0x02	; 2
    1ee0:	62 e0       	ldi	r22, 0x02	; 2
    1ee2:	9f df       	rcall	.-194    	; 0x1e22 <getFifo.9873>
    getFifo(&buffer->seqNumber, 1);
    1ee4:	c8 01       	movw	r24, r16
    1ee6:	03 96       	adiw	r24, 0x03	; 3
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	9b df       	rcall	.-202    	; 0x1e22 <getFifo.9873>

    /* Ignore destination address */
    discardFifo(4);
    1eec:	84 e0       	ldi	r24, 0x04	; 4
    1eee:	ad df       	rcall	.-166    	; 0x1e4a <discardFifo.9875>

    /* Read the source address */
    getFifo((volatile uint8_t*) &buffer->srcAddress, 2);
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	62 e0       	ldi	r22, 0x02	; 2
    1ef6:	95 df       	rcall	.-214    	; 0x1e22 <getFifo.9873>

    /* Read the packet payload */
    getFifo(buffer->data, length - RF_PACKET_OVERHEAD_SIZE);
    1ef8:	f8 01       	movw	r30, r16
    1efa:	85 81       	ldd	r24, Z+5	; 0x05
    1efc:	96 81       	ldd	r25, Z+6	; 0x06
    1efe:	69 81       	ldd	r22, Y+1	; 0x01
    1f00:	6b 50       	subi	r22, 0x0B	; 11
    1f02:	8f df       	rcall	.-226    	; 0x1e22 <getFifo.9873>

    /* Read the footer to get the RSSI value */
    getFifo(footer, 2);
    1f04:	ce 01       	movw	r24, r28
    1f06:	04 96       	adiw	r24, 0x04	; 4
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	8b df       	rcall	.-234    	; 0x1e22 <getFifo.9873>
    
    /* Subtracting 45 as recommended by datasheet */
    buffer->rssi = footer[0] - 45;
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	8d 52       	subi	r24, 0x2D	; 45
    1f10:	f8 01       	movw	r30, r16
    1f12:	84 83       	std	Z+4, r24	; 0x04

    /* Check CRC, and call upper layer if ok */
    if (footer[1] & RF_CRC_OK_MASK) {
        rf_callback(buffer);
    }
}
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	ff 91       	pop	r31
    1f24:	ef 91       	pop	r30
    1f26:	bf 91       	pop	r27
    1f28:	af 91       	pop	r26
    1f2a:	9f 91       	pop	r25
    1f2c:	8f 91       	pop	r24
    1f2e:	7f 91       	pop	r23
    1f30:	6f 91       	pop	r22
    1f32:	5f 91       	pop	r21
    1f34:	4f 91       	pop	r20
    1f36:	3f 91       	pop	r19
    1f38:	2f 91       	pop	r18
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	0f 90       	pop	r0
    1f40:	0b be       	out	0x3b, r0	; 59
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <__prologue_saves__>:
    1f4c:	2f 92       	push	r2
    1f4e:	3f 92       	push	r3
    1f50:	4f 92       	push	r4
    1f52:	5f 92       	push	r5
    1f54:	6f 92       	push	r6
    1f56:	7f 92       	push	r7
    1f58:	8f 92       	push	r8
    1f5a:	9f 92       	push	r9
    1f5c:	af 92       	push	r10
    1f5e:	bf 92       	push	r11
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	ca 1b       	sub	r28, r26
    1f76:	db 0b       	sbc	r29, r27
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	09 94       	ijmp

00001f84 <__ftoa_engine>:
    1f84:	28 30       	cpi	r18, 0x08	; 8
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <__ftoa_engine+0x6>
    1f88:	27 e0       	ldi	r18, 0x07	; 7
    1f8a:	33 27       	eor	r19, r19
    1f8c:	da 01       	movw	r26, r20
    1f8e:	99 0f       	add	r25, r25
    1f90:	31 1d       	adc	r19, r1
    1f92:	87 fd       	sbrc	r24, 7
    1f94:	91 60       	ori	r25, 0x01	; 1
    1f96:	00 96       	adiw	r24, 0x00	; 0
    1f98:	61 05       	cpc	r22, r1
    1f9a:	71 05       	cpc	r23, r1
    1f9c:	39 f4       	brne	.+14     	; 0x1fac <__ftoa_engine+0x28>
    1f9e:	32 60       	ori	r19, 0x02	; 2
    1fa0:	2e 5f       	subi	r18, 0xFE	; 254
    1fa2:	3d 93       	st	X+, r19
    1fa4:	30 e3       	ldi	r19, 0x30	; 48
    1fa6:	2a 95       	dec	r18
    1fa8:	e1 f7       	brne	.-8      	; 0x1fa2 <__ftoa_engine+0x1e>
    1faa:	08 95       	ret
    1fac:	9f 3f       	cpi	r25, 0xFF	; 255
    1fae:	30 f0       	brcs	.+12     	; 0x1fbc <__ftoa_engine+0x38>
    1fb0:	80 38       	cpi	r24, 0x80	; 128
    1fb2:	71 05       	cpc	r23, r1
    1fb4:	61 05       	cpc	r22, r1
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <__ftoa_engine+0x36>
    1fb8:	3c 5f       	subi	r19, 0xFC	; 252
    1fba:	3c 5f       	subi	r19, 0xFC	; 252
    1fbc:	3d 93       	st	X+, r19
    1fbe:	91 30       	cpi	r25, 0x01	; 1
    1fc0:	08 f0       	brcs	.+2      	; 0x1fc4 <__ftoa_engine+0x40>
    1fc2:	80 68       	ori	r24, 0x80	; 128
    1fc4:	91 1d       	adc	r25, r1
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	1f 93       	push	r17
    1fcc:	0f 93       	push	r16
    1fce:	ff 92       	push	r15
    1fd0:	ef 92       	push	r14
    1fd2:	19 2f       	mov	r17, r25
    1fd4:	98 7f       	andi	r25, 0xF8	; 248
    1fd6:	96 95       	lsr	r25
    1fd8:	e9 2f       	mov	r30, r25
    1fda:	96 95       	lsr	r25
    1fdc:	96 95       	lsr	r25
    1fde:	e9 0f       	add	r30, r25
    1fe0:	ff 27       	eor	r31, r31
    1fe2:	e5 5c       	subi	r30, 0xC5	; 197
    1fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe6:	99 27       	eor	r25, r25
    1fe8:	33 27       	eor	r19, r19
    1fea:	ee 24       	eor	r14, r14
    1fec:	ff 24       	eor	r15, r15
    1fee:	a7 01       	movw	r20, r14
    1ff0:	e7 01       	movw	r28, r14
    1ff2:	05 90       	lpm	r0, Z+
    1ff4:	08 94       	sec
    1ff6:	07 94       	ror	r0
    1ff8:	28 f4       	brcc	.+10     	; 0x2004 <__ftoa_engine+0x80>
    1ffa:	36 0f       	add	r19, r22
    1ffc:	e7 1e       	adc	r14, r23
    1ffe:	f8 1e       	adc	r15, r24
    2000:	49 1f       	adc	r20, r25
    2002:	51 1d       	adc	r21, r1
    2004:	66 0f       	add	r22, r22
    2006:	77 1f       	adc	r23, r23
    2008:	88 1f       	adc	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	06 94       	lsr	r0
    200e:	a1 f7       	brne	.-24     	; 0x1ff8 <__ftoa_engine+0x74>
    2010:	05 90       	lpm	r0, Z+
    2012:	07 94       	ror	r0
    2014:	28 f4       	brcc	.+10     	; 0x2020 <__ftoa_engine+0x9c>
    2016:	e7 0e       	add	r14, r23
    2018:	f8 1e       	adc	r15, r24
    201a:	49 1f       	adc	r20, r25
    201c:	56 1f       	adc	r21, r22
    201e:	c1 1d       	adc	r28, r1
    2020:	77 0f       	add	r23, r23
    2022:	88 1f       	adc	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	66 1f       	adc	r22, r22
    2028:	06 94       	lsr	r0
    202a:	a1 f7       	brne	.-24     	; 0x2014 <__ftoa_engine+0x90>
    202c:	05 90       	lpm	r0, Z+
    202e:	07 94       	ror	r0
    2030:	28 f4       	brcc	.+10     	; 0x203c <__ftoa_engine+0xb8>
    2032:	f8 0e       	add	r15, r24
    2034:	49 1f       	adc	r20, r25
    2036:	56 1f       	adc	r21, r22
    2038:	c7 1f       	adc	r28, r23
    203a:	d1 1d       	adc	r29, r1
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	66 1f       	adc	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	06 94       	lsr	r0
    2046:	a1 f7       	brne	.-24     	; 0x2030 <__ftoa_engine+0xac>
    2048:	05 90       	lpm	r0, Z+
    204a:	07 94       	ror	r0
    204c:	20 f4       	brcc	.+8      	; 0x2056 <__ftoa_engine+0xd2>
    204e:	49 0f       	add	r20, r25
    2050:	56 1f       	adc	r21, r22
    2052:	c7 1f       	adc	r28, r23
    2054:	d8 1f       	adc	r29, r24
    2056:	99 0f       	add	r25, r25
    2058:	66 1f       	adc	r22, r22
    205a:	77 1f       	adc	r23, r23
    205c:	88 1f       	adc	r24, r24
    205e:	06 94       	lsr	r0
    2060:	a9 f7       	brne	.-22     	; 0x204c <__ftoa_engine+0xc8>
    2062:	84 91       	lpm	r24, Z+
    2064:	10 95       	com	r17
    2066:	17 70       	andi	r17, 0x07	; 7
    2068:	41 f0       	breq	.+16     	; 0x207a <__ftoa_engine+0xf6>
    206a:	d6 95       	lsr	r29
    206c:	c7 95       	ror	r28
    206e:	57 95       	ror	r21
    2070:	47 95       	ror	r20
    2072:	f7 94       	ror	r15
    2074:	e7 94       	ror	r14
    2076:	1a 95       	dec	r17
    2078:	c1 f7       	brne	.-16     	; 0x206a <__ftoa_engine+0xe6>
    207a:	e1 ee       	ldi	r30, 0xE1	; 225
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	68 94       	set
    2080:	15 90       	lpm	r1, Z+
    2082:	15 91       	lpm	r17, Z+
    2084:	35 91       	lpm	r19, Z+
    2086:	65 91       	lpm	r22, Z+
    2088:	95 91       	lpm	r25, Z+
    208a:	05 90       	lpm	r0, Z+
    208c:	7f e2       	ldi	r23, 0x2F	; 47
    208e:	73 95       	inc	r23
    2090:	e1 18       	sub	r14, r1
    2092:	f1 0a       	sbc	r15, r17
    2094:	43 0b       	sbc	r20, r19
    2096:	56 0b       	sbc	r21, r22
    2098:	c9 0b       	sbc	r28, r25
    209a:	d0 09       	sbc	r29, r0
    209c:	c0 f7       	brcc	.-16     	; 0x208e <__ftoa_engine+0x10a>
    209e:	e1 0c       	add	r14, r1
    20a0:	f1 1e       	adc	r15, r17
    20a2:	43 1f       	adc	r20, r19
    20a4:	56 1f       	adc	r21, r22
    20a6:	c9 1f       	adc	r28, r25
    20a8:	d0 1d       	adc	r29, r0
    20aa:	7e f4       	brtc	.+30     	; 0x20ca <__ftoa_engine+0x146>
    20ac:	70 33       	cpi	r23, 0x30	; 48
    20ae:	11 f4       	brne	.+4      	; 0x20b4 <__ftoa_engine+0x130>
    20b0:	8a 95       	dec	r24
    20b2:	e6 cf       	rjmp	.-52     	; 0x2080 <__ftoa_engine+0xfc>
    20b4:	e8 94       	clt
    20b6:	01 50       	subi	r16, 0x01	; 1
    20b8:	30 f0       	brcs	.+12     	; 0x20c6 <__ftoa_engine+0x142>
    20ba:	08 0f       	add	r16, r24
    20bc:	0a f4       	brpl	.+2      	; 0x20c0 <__ftoa_engine+0x13c>
    20be:	00 27       	eor	r16, r16
    20c0:	02 17       	cp	r16, r18
    20c2:	08 f4       	brcc	.+2      	; 0x20c6 <__ftoa_engine+0x142>
    20c4:	20 2f       	mov	r18, r16
    20c6:	23 95       	inc	r18
    20c8:	02 2f       	mov	r16, r18
    20ca:	7a 33       	cpi	r23, 0x3A	; 58
    20cc:	28 f0       	brcs	.+10     	; 0x20d8 <__ftoa_engine+0x154>
    20ce:	79 e3       	ldi	r23, 0x39	; 57
    20d0:	7d 93       	st	X+, r23
    20d2:	2a 95       	dec	r18
    20d4:	e9 f7       	brne	.-6      	; 0x20d0 <__ftoa_engine+0x14c>
    20d6:	10 c0       	rjmp	.+32     	; 0x20f8 <__ftoa_engine+0x174>
    20d8:	7d 93       	st	X+, r23
    20da:	2a 95       	dec	r18
    20dc:	89 f6       	brne	.-94     	; 0x2080 <__ftoa_engine+0xfc>
    20de:	06 94       	lsr	r0
    20e0:	97 95       	ror	r25
    20e2:	67 95       	ror	r22
    20e4:	37 95       	ror	r19
    20e6:	17 95       	ror	r17
    20e8:	17 94       	ror	r1
    20ea:	e1 18       	sub	r14, r1
    20ec:	f1 0a       	sbc	r15, r17
    20ee:	43 0b       	sbc	r20, r19
    20f0:	56 0b       	sbc	r21, r22
    20f2:	c9 0b       	sbc	r28, r25
    20f4:	d0 09       	sbc	r29, r0
    20f6:	98 f0       	brcs	.+38     	; 0x211e <__ftoa_engine+0x19a>
    20f8:	23 95       	inc	r18
    20fa:	7e 91       	ld	r23, -X
    20fc:	73 95       	inc	r23
    20fe:	7a 33       	cpi	r23, 0x3A	; 58
    2100:	08 f0       	brcs	.+2      	; 0x2104 <__ftoa_engine+0x180>
    2102:	70 e3       	ldi	r23, 0x30	; 48
    2104:	7c 93       	st	X, r23
    2106:	20 13       	cpse	r18, r16
    2108:	b8 f7       	brcc	.-18     	; 0x20f8 <__ftoa_engine+0x174>
    210a:	7e 91       	ld	r23, -X
    210c:	70 61       	ori	r23, 0x10	; 16
    210e:	7d 93       	st	X+, r23
    2110:	30 f0       	brcs	.+12     	; 0x211e <__ftoa_engine+0x19a>
    2112:	83 95       	inc	r24
    2114:	71 e3       	ldi	r23, 0x31	; 49
    2116:	7d 93       	st	X+, r23
    2118:	70 e3       	ldi	r23, 0x30	; 48
    211a:	2a 95       	dec	r18
    211c:	e1 f7       	brne	.-8      	; 0x2116 <__ftoa_engine+0x192>
    211e:	11 24       	eor	r1, r1
    2120:	ef 90       	pop	r14
    2122:	ff 90       	pop	r15
    2124:	0f 91       	pop	r16
    2126:	1f 91       	pop	r17
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	99 27       	eor	r25, r25
    212e:	87 fd       	sbrc	r24, 7
    2130:	90 95       	com	r25
    2132:	08 95       	ret

00002134 <isspace>:
    2134:	91 11       	cpse	r25, r1
    2136:	53 c1       	rjmp	.+678    	; 0x23de <__ctype_isfalse>
    2138:	80 32       	cpi	r24, 0x20	; 32
    213a:	19 f0       	breq	.+6      	; 0x2142 <isspace+0xe>
    213c:	89 50       	subi	r24, 0x09	; 9
    213e:	85 50       	subi	r24, 0x05	; 5
    2140:	d0 f7       	brcc	.-12     	; 0x2136 <isspace+0x2>
    2142:	08 95       	ret

00002144 <tolower>:
    2144:	91 11       	cpse	r25, r1
    2146:	08 95       	ret
    2148:	81 54       	subi	r24, 0x41	; 65
    214a:	8a 51       	subi	r24, 0x1A	; 26
    214c:	08 f4       	brcc	.+2      	; 0x2150 <tolower+0xc>
    214e:	80 5e       	subi	r24, 0xE0	; 224
    2150:	85 5a       	subi	r24, 0xA5	; 165
    2152:	08 95       	ret

00002154 <strchr_P>:
    2154:	fc 01       	movw	r30, r24
    2156:	05 90       	lpm	r0, Z+
    2158:	06 16       	cp	r0, r22
    215a:	21 f0       	breq	.+8      	; 0x2164 <strchr_P+0x10>
    215c:	00 20       	and	r0, r0
    215e:	d9 f7       	brne	.-10     	; 0x2156 <strchr_P+0x2>
    2160:	c0 01       	movw	r24, r0
    2162:	08 95       	ret
    2164:	31 97       	sbiw	r30, 0x01	; 1
    2166:	cf 01       	movw	r24, r30
    2168:	08 95       	ret

0000216a <strnlen_P>:
    216a:	fc 01       	movw	r30, r24
    216c:	05 90       	lpm	r0, Z+
    216e:	61 50       	subi	r22, 0x01	; 1
    2170:	70 40       	sbci	r23, 0x00	; 0
    2172:	01 10       	cpse	r0, r1
    2174:	d8 f7       	brcc	.-10     	; 0x216c <strnlen_P+0x2>
    2176:	80 95       	com	r24
    2178:	90 95       	com	r25
    217a:	8e 0f       	add	r24, r30
    217c:	9f 1f       	adc	r25, r31
    217e:	08 95       	ret

00002180 <strnlen>:
    2180:	fc 01       	movw	r30, r24
    2182:	61 50       	subi	r22, 0x01	; 1
    2184:	70 40       	sbci	r23, 0x00	; 0
    2186:	01 90       	ld	r0, Z+
    2188:	01 10       	cpse	r0, r1
    218a:	d8 f7       	brcc	.-10     	; 0x2182 <strnlen+0x2>
    218c:	80 95       	com	r24
    218e:	90 95       	com	r25
    2190:	8e 0f       	add	r24, r30
    2192:	9f 1f       	adc	r25, r31
    2194:	08 95       	ret

00002196 <fgetc>:
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	ec 01       	movw	r28, r24
    219c:	4b 81       	ldd	r20, Y+3	; 0x03
    219e:	40 ff       	sbrs	r20, 0
    21a0:	1a c0       	rjmp	.+52     	; 0x21d6 <fgetc+0x40>
    21a2:	46 ff       	sbrs	r20, 6
    21a4:	0a c0       	rjmp	.+20     	; 0x21ba <fgetc+0x24>
    21a6:	4f 7b       	andi	r20, 0xBF	; 191
    21a8:	4b 83       	std	Y+3, r20	; 0x03
    21aa:	8e 81       	ldd	r24, Y+6	; 0x06
    21ac:	9f 81       	ldd	r25, Y+7	; 0x07
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	9f 83       	std	Y+7, r25	; 0x07
    21b2:	8e 83       	std	Y+6, r24	; 0x06
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	28 2f       	mov	r18, r24
    21b8:	2b c0       	rjmp	.+86     	; 0x2210 <fgetc+0x7a>
    21ba:	42 ff       	sbrs	r20, 2
    21bc:	13 c0       	rjmp	.+38     	; 0x21e4 <fgetc+0x4e>
    21be:	e8 81       	ld	r30, Y
    21c0:	f9 81       	ldd	r31, Y+1	; 0x01
    21c2:	80 81       	ld	r24, Z
    21c4:	28 2f       	mov	r18, r24
    21c6:	33 27       	eor	r19, r19
    21c8:	27 fd       	sbrc	r18, 7
    21ca:	30 95       	com	r19
    21cc:	21 15       	cp	r18, r1
    21ce:	31 05       	cpc	r19, r1
    21d0:	29 f4       	brne	.+10     	; 0x21dc <fgetc+0x46>
    21d2:	40 62       	ori	r20, 0x20	; 32
    21d4:	4b 83       	std	Y+3, r20	; 0x03
    21d6:	2f ef       	ldi	r18, 0xFF	; 255
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	1b c0       	rjmp	.+54     	; 0x2212 <fgetc+0x7c>
    21dc:	31 96       	adiw	r30, 0x01	; 1
    21de:	f9 83       	std	Y+1, r31	; 0x01
    21e0:	e8 83       	st	Y, r30
    21e2:	11 c0       	rjmp	.+34     	; 0x2206 <fgetc+0x70>
    21e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    21e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    21e8:	ce 01       	movw	r24, r28
    21ea:	09 95       	icall
    21ec:	9c 01       	movw	r18, r24
    21ee:	97 ff       	sbrs	r25, 7
    21f0:	0a c0       	rjmp	.+20     	; 0x2206 <fgetc+0x70>
    21f2:	9b 81       	ldd	r25, Y+3	; 0x03
    21f4:	2f 5f       	subi	r18, 0xFF	; 255
    21f6:	3f 4f       	sbci	r19, 0xFF	; 255
    21f8:	11 f0       	breq	.+4      	; 0x21fe <fgetc+0x68>
    21fa:	80 e2       	ldi	r24, 0x20	; 32
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <fgetc+0x6a>
    21fe:	80 e1       	ldi	r24, 0x10	; 16
    2200:	89 2b       	or	r24, r25
    2202:	8b 83       	std	Y+3, r24	; 0x03
    2204:	e8 cf       	rjmp	.-48     	; 0x21d6 <fgetc+0x40>
    2206:	8e 81       	ldd	r24, Y+6	; 0x06
    2208:	9f 81       	ldd	r25, Y+7	; 0x07
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	9f 83       	std	Y+7, r25	; 0x07
    220e:	8e 83       	std	Y+6, r24	; 0x06
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	c9 01       	movw	r24, r18
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	08 95       	ret

0000221a <fputc>:
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	8c 01       	movw	r16, r24
    2224:	eb 01       	movw	r28, r22
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	81 ff       	sbrs	r24, 1
    222a:	1b c0       	rjmp	.+54     	; 0x2262 <fputc+0x48>
    222c:	82 ff       	sbrs	r24, 2
    222e:	0d c0       	rjmp	.+26     	; 0x224a <fputc+0x30>
    2230:	2e 81       	ldd	r18, Y+6	; 0x06
    2232:	3f 81       	ldd	r19, Y+7	; 0x07
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	9d 81       	ldd	r25, Y+5	; 0x05
    2238:	28 17       	cp	r18, r24
    223a:	39 07       	cpc	r19, r25
    223c:	64 f4       	brge	.+24     	; 0x2256 <fputc+0x3c>
    223e:	e8 81       	ld	r30, Y
    2240:	f9 81       	ldd	r31, Y+1	; 0x01
    2242:	01 93       	st	Z+, r16
    2244:	f9 83       	std	Y+1, r31	; 0x01
    2246:	e8 83       	st	Y, r30
    2248:	06 c0       	rjmp	.+12     	; 0x2256 <fputc+0x3c>
    224a:	e8 85       	ldd	r30, Y+8	; 0x08
    224c:	f9 85       	ldd	r31, Y+9	; 0x09
    224e:	80 2f       	mov	r24, r16
    2250:	09 95       	icall
    2252:	89 2b       	or	r24, r25
    2254:	31 f4       	brne	.+12     	; 0x2262 <fputc+0x48>
    2256:	8e 81       	ldd	r24, Y+6	; 0x06
    2258:	9f 81       	ldd	r25, Y+7	; 0x07
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	9f 83       	std	Y+7, r25	; 0x07
    225e:	8e 83       	std	Y+6, r24	; 0x06
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <fputc+0x4c>
    2262:	0f ef       	ldi	r16, 0xFF	; 255
    2264:	1f ef       	ldi	r17, 0xFF	; 255
    2266:	c8 01       	movw	r24, r16
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	08 95       	ret

00002272 <snprintf>:
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	2e 97       	sbiw	r28, 0x0e	; 14
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	0d 89       	ldd	r16, Y+21	; 0x15
    228c:	1e 89       	ldd	r17, Y+22	; 0x16
    228e:	8f 89       	ldd	r24, Y+23	; 0x17
    2290:	98 8d       	ldd	r25, Y+24	; 0x18
    2292:	97 ff       	sbrs	r25, 7
    2294:	02 c0       	rjmp	.+4      	; 0x229a <snprintf+0x28>
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e8       	ldi	r25, 0x80	; 128
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	1a 83       	std	Y+2, r17	; 0x02
    22a2:	09 83       	std	Y+1, r16	; 0x01
    22a4:	86 e0       	ldi	r24, 0x06	; 6
    22a6:	8c 83       	std	Y+4, r24	; 0x04
    22a8:	9e 01       	movw	r18, r28
    22aa:	25 5e       	subi	r18, 0xE5	; 229
    22ac:	3f 4f       	sbci	r19, 0xFF	; 255
    22ae:	ce 01       	movw	r24, r28
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	69 8d       	ldd	r22, Y+25	; 0x19
    22b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b6:	a9 01       	movw	r20, r18
    22b8:	0e 94 0e 01 	call	0x21c	; 0x21c <vfprintf>
    22bc:	4d 81       	ldd	r20, Y+5	; 0x05
    22be:	5e 81       	ldd	r21, Y+6	; 0x06
    22c0:	57 fd       	sbrc	r21, 7
    22c2:	0a c0       	rjmp	.+20     	; 0x22d8 <snprintf+0x66>
    22c4:	2f 81       	ldd	r18, Y+7	; 0x07
    22c6:	38 85       	ldd	r19, Y+8	; 0x08
    22c8:	42 17       	cp	r20, r18
    22ca:	53 07       	cpc	r21, r19
    22cc:	0c f4       	brge	.+2      	; 0x22d0 <snprintf+0x5e>
    22ce:	9a 01       	movw	r18, r20
    22d0:	02 0f       	add	r16, r18
    22d2:	13 1f       	adc	r17, r19
    22d4:	f8 01       	movw	r30, r16
    22d6:	10 82       	st	Z, r1
    22d8:	2e 96       	adiw	r28, 0x0e	; 14
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	08 95       	ret

000022ee <ungetc>:
    22ee:	9c 01       	movw	r18, r24
    22f0:	fb 01       	movw	r30, r22
    22f2:	83 81       	ldd	r24, Z+3	; 0x03
    22f4:	80 ff       	sbrs	r24, 0
    22f6:	11 c0       	rjmp	.+34     	; 0x231a <ungetc+0x2c>
    22f8:	86 fd       	sbrc	r24, 6
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <ungetc+0x2c>
    22fc:	9f ef       	ldi	r25, 0xFF	; 255
    22fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2300:	39 07       	cpc	r19, r25
    2302:	59 f0       	breq	.+22     	; 0x231a <ungetc+0x2c>
    2304:	22 83       	std	Z+2, r18	; 0x02
    2306:	80 64       	ori	r24, 0x40	; 64
    2308:	8f 7d       	andi	r24, 0xDF	; 223
    230a:	83 83       	std	Z+3, r24	; 0x03
    230c:	86 81       	ldd	r24, Z+6	; 0x06
    230e:	97 81       	ldd	r25, Z+7	; 0x07
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	97 83       	std	Z+7, r25	; 0x07
    2314:	86 83       	std	Z+6, r24	; 0x06
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	02 c0       	rjmp	.+4      	; 0x231e <ungetc+0x30>
    231a:	2f ef       	ldi	r18, 0xFF	; 255
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	c9 01       	movw	r24, r18
    2320:	08 95       	ret

00002322 <__ultoa_invert>:
    2322:	fa 01       	movw	r30, r20
    2324:	aa 27       	eor	r26, r26
    2326:	28 30       	cpi	r18, 0x08	; 8
    2328:	51 f1       	breq	.+84     	; 0x237e <__ultoa_invert+0x5c>
    232a:	20 31       	cpi	r18, 0x10	; 16
    232c:	81 f1       	breq	.+96     	; 0x238e <__ultoa_invert+0x6c>
    232e:	e8 94       	clt
    2330:	6f 93       	push	r22
    2332:	6e 7f       	andi	r22, 0xFE	; 254
    2334:	6e 5f       	subi	r22, 0xFE	; 254
    2336:	7f 4f       	sbci	r23, 0xFF	; 255
    2338:	8f 4f       	sbci	r24, 0xFF	; 255
    233a:	9f 4f       	sbci	r25, 0xFF	; 255
    233c:	af 4f       	sbci	r26, 0xFF	; 255
    233e:	b1 e0       	ldi	r27, 0x01	; 1
    2340:	3e d0       	rcall	.+124    	; 0x23be <__ultoa_invert+0x9c>
    2342:	b4 e0       	ldi	r27, 0x04	; 4
    2344:	3c d0       	rcall	.+120    	; 0x23be <__ultoa_invert+0x9c>
    2346:	67 0f       	add	r22, r23
    2348:	78 1f       	adc	r23, r24
    234a:	89 1f       	adc	r24, r25
    234c:	9a 1f       	adc	r25, r26
    234e:	a1 1d       	adc	r26, r1
    2350:	68 0f       	add	r22, r24
    2352:	79 1f       	adc	r23, r25
    2354:	8a 1f       	adc	r24, r26
    2356:	91 1d       	adc	r25, r1
    2358:	a1 1d       	adc	r26, r1
    235a:	6a 0f       	add	r22, r26
    235c:	71 1d       	adc	r23, r1
    235e:	81 1d       	adc	r24, r1
    2360:	91 1d       	adc	r25, r1
    2362:	a1 1d       	adc	r26, r1
    2364:	20 d0       	rcall	.+64     	; 0x23a6 <__ultoa_invert+0x84>
    2366:	09 f4       	brne	.+2      	; 0x236a <__ultoa_invert+0x48>
    2368:	68 94       	set
    236a:	3f 91       	pop	r19
    236c:	2a e0       	ldi	r18, 0x0A	; 10
    236e:	26 9f       	mul	r18, r22
    2370:	11 24       	eor	r1, r1
    2372:	30 19       	sub	r19, r0
    2374:	30 5d       	subi	r19, 0xD0	; 208
    2376:	31 93       	st	Z+, r19
    2378:	de f6       	brtc	.-74     	; 0x2330 <__ultoa_invert+0xe>
    237a:	cf 01       	movw	r24, r30
    237c:	08 95       	ret
    237e:	46 2f       	mov	r20, r22
    2380:	47 70       	andi	r20, 0x07	; 7
    2382:	40 5d       	subi	r20, 0xD0	; 208
    2384:	41 93       	st	Z+, r20
    2386:	b3 e0       	ldi	r27, 0x03	; 3
    2388:	0f d0       	rcall	.+30     	; 0x23a8 <__ultoa_invert+0x86>
    238a:	c9 f7       	brne	.-14     	; 0x237e <__ultoa_invert+0x5c>
    238c:	f6 cf       	rjmp	.-20     	; 0x237a <__ultoa_invert+0x58>
    238e:	46 2f       	mov	r20, r22
    2390:	4f 70       	andi	r20, 0x0F	; 15
    2392:	40 5d       	subi	r20, 0xD0	; 208
    2394:	4a 33       	cpi	r20, 0x3A	; 58
    2396:	18 f0       	brcs	.+6      	; 0x239e <__ultoa_invert+0x7c>
    2398:	49 5d       	subi	r20, 0xD9	; 217
    239a:	31 fd       	sbrc	r19, 1
    239c:	40 52       	subi	r20, 0x20	; 32
    239e:	41 93       	st	Z+, r20
    23a0:	02 d0       	rcall	.+4      	; 0x23a6 <__ultoa_invert+0x84>
    23a2:	a9 f7       	brne	.-22     	; 0x238e <__ultoa_invert+0x6c>
    23a4:	ea cf       	rjmp	.-44     	; 0x237a <__ultoa_invert+0x58>
    23a6:	b4 e0       	ldi	r27, 0x04	; 4
    23a8:	a6 95       	lsr	r26
    23aa:	97 95       	ror	r25
    23ac:	87 95       	ror	r24
    23ae:	77 95       	ror	r23
    23b0:	67 95       	ror	r22
    23b2:	ba 95       	dec	r27
    23b4:	c9 f7       	brne	.-14     	; 0x23a8 <__ultoa_invert+0x86>
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	61 05       	cpc	r22, r1
    23ba:	71 05       	cpc	r23, r1
    23bc:	08 95       	ret
    23be:	9b 01       	movw	r18, r22
    23c0:	ac 01       	movw	r20, r24
    23c2:	0a 2e       	mov	r0, r26
    23c4:	06 94       	lsr	r0
    23c6:	57 95       	ror	r21
    23c8:	47 95       	ror	r20
    23ca:	37 95       	ror	r19
    23cc:	27 95       	ror	r18
    23ce:	ba 95       	dec	r27
    23d0:	c9 f7       	brne	.-14     	; 0x23c4 <__ultoa_invert+0xa2>
    23d2:	62 0f       	add	r22, r18
    23d4:	73 1f       	adc	r23, r19
    23d6:	84 1f       	adc	r24, r20
    23d8:	95 1f       	adc	r25, r21
    23da:	a0 1d       	adc	r26, r0
    23dc:	08 95       	ret

000023de <__ctype_isfalse>:
    23de:	99 27       	eor	r25, r25
    23e0:	88 27       	eor	r24, r24

000023e2 <__ctype_istrue>:
    23e2:	08 95       	ret

000023e4 <_exit>:
    23e4:	f8 94       	cli

000023e6 <__stop_program>:
    23e6:	ff cf       	rjmp	.-2      	; 0x23e6 <__stop_program>
